{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"This page contains the user manuals, assembly instructions or technical documentation of discontinued, non-Eurorack, Mutable Instruments products. Shruthi September 2010 to July 2015 Shruthi is a DIY hybrid monosynth with a large palette of analog filter boards. User manual Firmware hacking Control board SMR4 mkII filter board All DIY resources Ambika December 2012 to December 2014 Ambika is a DIY 6-voice hybrid polysynth. User manual Motherboard assembly instructions / BOM / schematics SMR-4 voicecard assembly instructions / BOM / schematics Other voicecards assembly tips / BOM / schematics Mechanical assembly Firmware setup Technical notes Anushri November 2012 to December 2014 Anushri is a DIY digitally controlled analog monosynth. User manual Build instructions CVpal November 2013 to March 2015 The CVpal is a simple DIY USB to CV/Gate interface. User manual Specifications Build instructions MIDIpal December 2011 to April 2012 (DIY kit); August 2012 to June 2014 (factory-made version) The MIDIpal is a MIDI event processor. User manual Firmware downloads Build instructions Other projects CycliC Module tester Breadboard friends","title":"Home"},{"location":"#shruthi","text":"September 2010 to July 2015 Shruthi is a DIY hybrid monosynth with a large palette of analog filter boards. User manual Firmware hacking Control board SMR4 mkII filter board All DIY resources","title":"Shruthi"},{"location":"#ambika","text":"December 2012 to December 2014 Ambika is a DIY 6-voice hybrid polysynth. User manual Motherboard assembly instructions / BOM / schematics SMR-4 voicecard assembly instructions / BOM / schematics Other voicecards assembly tips / BOM / schematics Mechanical assembly Firmware setup Technical notes","title":"Ambika"},{"location":"#anushri","text":"November 2012 to December 2014 Anushri is a DIY digitally controlled analog monosynth. User manual Build instructions","title":"Anushri"},{"location":"#cvpal","text":"November 2013 to March 2015 The CVpal is a simple DIY USB to CV/Gate interface. User manual Specifications Build instructions","title":"CVpal"},{"location":"#midipal","text":"December 2011 to April 2012 (DIY kit); August 2012 to June 2014 (factory-made version) The MIDIpal is a MIDI event processor. User manual Firmware downloads Build instructions","title":"MIDIpal"},{"location":"#other-projects","text":"CycliC Module tester Breadboard friends","title":"Other projects"},{"location":"ambika/firmware/","text":"Flashing the motherboard / voicecards firmware This section explains how to flash Ambika's firmware with an AVR programmer - in case you are building it from scratch (the kits come with pre-programmed chips). This is also helpful if you intend to modify the code. Option 1: build the code and upload it with avrdude The firmware code is hosted on github , in the controller and voicecard directories. The required tools are python 2.5, GNU make, avrdude, and avr-gcc version 4.3.3 (if you use another version you might have to check that the voicecard code size is under 31744 bytes and the motherboard code size under 61440 bytes). Some of the paths to these tools have to be edited in avrlib/makefile.mk To build the motherboard code (including MIDI/SD bootloader) and flash it, connect the programmer to the motherboard and use: make bootstrap_controller To build the voicecard code (including bootloader) and flash it, connect the programmer to a voicecard and use: make bootstrap_voicecard Option 2: install pre-built binaries with avrdude Download the following files: ambika_controller.hex ambika_controller_boot.hex ambika_voicecard.hex ambika_voicecard_boot.hex ambika_voicecard_eeprom_golden.hex Connect the programmer to the motherboard. Type the following commands in a terminal/command line: avrdude -B 100 -V -p m644p -c avrispmkII -P usb -e -u -U efuse:w:0xfd:m -U hfuse:w:0xd2:m -U lfuse:w:0xff:m -U lock:w:0x2f:m avrdude -B 1 -V -p m644p -c avrispmkII -P usb -U flash:w:ambika_controller.hex:i -U flash:w:ambika_controller_boot.hex:i -U lock:w:0x2f:m Hook the programmer to the voicecard. Type the following commands in a terminal/command line: avrdude -B 100 -V -p m328p -c avrispmkII -P usb -e -u -U efuse:w:0xfd:m -U hfuse:w:0xde:m -U lfuse:w:0xff:m -U lock:w:0x2f:m avrdude -B 1 -V -p m328p -c avrispmkII -P usb -U flash:w:ambika_voicecard.hex:i -U flash:w:ambika_voicecard_boot.hex:i -U eeprom:w:ambika_voicecard_eeprom_golden.hex:i -U lock:w:0x2f:m Note that in all these commands, you will have to replace: avrdude by the path to your local install of avrdude (for example C:\\WinAVR\\bin\\avrdude on windows). avrispmkII by the name of your ISP programmer. usb by something else if your ISP programmer is not a USB one. Copying the \"factory data\" (presets) to a SD card Format a SD card with a FAT or FAT32 filesystem (all the brand new voicecards we tested were correctly formatted). Unzip this archive and copy the PROGRAM and MULTI directories to the root directory of the SD card.","title":"Firmware setup"},{"location":"ambika/firmware/#flashing-the-motherboard-voicecards-firmware","text":"This section explains how to flash Ambika's firmware with an AVR programmer - in case you are building it from scratch (the kits come with pre-programmed chips). This is also helpful if you intend to modify the code.","title":"Flashing the motherboard / voicecards firmware"},{"location":"ambika/firmware/#option-1-build-the-code-and-upload-it-with-avrdude","text":"The firmware code is hosted on github , in the controller and voicecard directories. The required tools are python 2.5, GNU make, avrdude, and avr-gcc version 4.3.3 (if you use another version you might have to check that the voicecard code size is under 31744 bytes and the motherboard code size under 61440 bytes). Some of the paths to these tools have to be edited in avrlib/makefile.mk To build the motherboard code (including MIDI/SD bootloader) and flash it, connect the programmer to the motherboard and use: make bootstrap_controller To build the voicecard code (including bootloader) and flash it, connect the programmer to a voicecard and use: make bootstrap_voicecard","title":"Option 1: build the code and upload it with avrdude"},{"location":"ambika/firmware/#option-2-install-pre-built-binaries-with-avrdude","text":"Download the following files: ambika_controller.hex ambika_controller_boot.hex ambika_voicecard.hex ambika_voicecard_boot.hex ambika_voicecard_eeprom_golden.hex Connect the programmer to the motherboard. Type the following commands in a terminal/command line: avrdude -B 100 -V -p m644p -c avrispmkII -P usb -e -u -U efuse:w:0xfd:m -U hfuse:w:0xd2:m -U lfuse:w:0xff:m -U lock:w:0x2f:m avrdude -B 1 -V -p m644p -c avrispmkII -P usb -U flash:w:ambika_controller.hex:i -U flash:w:ambika_controller_boot.hex:i -U lock:w:0x2f:m Hook the programmer to the voicecard. Type the following commands in a terminal/command line: avrdude -B 100 -V -p m328p -c avrispmkII -P usb -e -u -U efuse:w:0xfd:m -U hfuse:w:0xde:m -U lfuse:w:0xff:m -U lock:w:0x2f:m avrdude -B 1 -V -p m328p -c avrispmkII -P usb -U flash:w:ambika_voicecard.hex:i -U flash:w:ambika_voicecard_boot.hex:i -U eeprom:w:ambika_voicecard_eeprom_golden.hex:i -U lock:w:0x2f:m Note that in all these commands, you will have to replace: avrdude by the path to your local install of avrdude (for example C:\\WinAVR\\bin\\avrdude on windows). avrispmkII by the name of your ISP programmer. usb by something else if your ISP programmer is not a USB one.","title":"Option 2: install pre-built binaries with avrdude"},{"location":"ambika/firmware/#copying-the-factory-data-presets-to-a-sd-card","text":"Format a SD card with a FAT or FAT32 filesystem (all the brand new voicecards we tested were correctly formatted). Unzip this archive and copy the PROGRAM and MULTI directories to the root directory of the SD card.","title":"Copying the \"factory data\" (presets) to a SD card"},{"location":"ambika/manual/","text":"Getting started Overview You have successfully built Ambika, Congratulations! Ambika is a multi-voice hybrid synthesizer. You can play it as a 6-voice polysynth, an ensemble of 6 monosynths, or anything inbetween due to its easily configurable voicing architecture. The sound generation is hybrid, combining the warmth and sonic character of a true 4-pole analog filter, with the large array of waveforms offered by digital wavetables, fm and phase modulation. The digital control of the analogue filter and VCA also means a very large palette of modulation possibilities. Some of the key features of Ambika include: 6 voices with individual outputs. 2 digital oscillators per voice, with 36 oscillator algorithms/wavetables. 1 sub-oscillator, also configurable as a transient generator. Pre-filter overdrive and bit-crushing effect. Analog 4-pole filter (or 2-pole multimode filter depending on the type of voicecard used) and VCA. 3 ADSR envelopes, 3 patch-level LFOs, 1 voice-level LFO. Modulation matrix with 14 slots and 4 modulation modifiers. 1 arpeggiator, 1 note sequencer and 2 step sequencers per part. Flexible mapping of the 6 voices. A single patch with 6 voice-polyphony, 6 independent mono parts, 2 layered patches with 3-voices polyphony, a 3-voice unison bass line on the lower half of the keyboard with a 3-voice unison lead on the upper half... all are possible! SD-card storage allows the storing of a life-long of patches, programs and multis, along with the history of editing operations for undo/redo. Connections The following connectors are available on the rear panel: 1 : SD-card slot. Insert here a SD-card (SDHC supported), FAT16 or FAT32 formatted. At the exception of system settings, everything Ambika needs to store goes on the SD-card. A capacity of at least 256 MB is recommended. 2 : MIDI in connector. This input should be connected to the MIDI output of a computer MIDI interface, master keyboard, sequencer... 3 : MIDI out connector. This output is by default used as a MIDI-thru, but you can also use it to transmit the notes generated by the Ambika sequencer, arpeggiator ; or to do SysEx dumps of patches. 4 : Mix line output. This audio output contains a mix of all voices. 5 , 6 , 7 , 8 , 9 , 10 : Individual outputs. 11 : AC power jack. Use a 9V AC, 1A power source. Higher voltage will cause more heating of the voltage regulators and shorten the lifespan of the module. Some terminology... A voice is a physical monophonic sound production device, consisting of digital oscillators, CV sources, an analog VCF and a VCA. A voice is only capable of producing a single-note sound. Ambika contains 6 voices, each of them being a physically different circuit board. A part is one or many voices sharing the same synthesis settings. Ambika can manage up to 6 parts. Each part stores its own synthesis, arpeggiator and sequencer settings. Each part listens to a MIDI channel, and is assigned a range of keys on the keyboard. Each of the 6 voices in Ambika needs to be linked to (assigned to) a part. This is a bit like showing each musician (voice) in an orchestra which staff they must play on a musical score! If you assign the 6 voices to the same part, Ambika will behave like a classic monotimbral polysynth. If you assign each voice to a different part, Ambika will behave like 6 independent monophonic synths. If you want to play a bassline on the lower part of the keyboard, and a brass riff on the upper part of the keyboard, you need to use two parts: one part with 1 voice for the bass, and a second part with 5 voices for the brass sound. A patch is a specific combination of synthesis settings stored into a part. A program consists of a patch , and additional sequencer/arpeggiator settings. A multi stores 6 programs (one for each part of Ambika) along with the mappings between voices, parts, midi channels and keyboard range. This is a complete snapshot of the Ambika configuration! Controls and navigation The 2x40 characters LCD display D displays, most of the time, the name and values of the 8 synthesis parameters accessible by the 8 potentiometers P . The parameters are organized as two rows of 4 parameters. The clickable encoder E is used to scroll between parameters/pages, or to fine-tune the value of a parameter. The 8 LEDs L1 ... L8 indicate which page is active. The 8 switches S1 ... S8 are used to display synthesis pages. For example, S1 shows the oscillators and mixer page ; S2 shows the filter page, etc. The part and voice LEDs LP1 ... LP6 indicate which part is active (green lights), and which voicecards are currently playing notes (yellow lights). The status LED LS is used to visualize the rate of a LFO or the beats in a sequence -- depending on which module you are editing. Controls Editing parameters The Ambika parameters are organized in pages . To jump to a page, press one of the 7 switches S1 ... S7 . Some pages share the same switch ; and you will need to repeatedly press a switch to cycle between those pages. The active page is indicated by the LEDs L1 ... L7 next to the navigation switches. The following table lists which page is associated with each switch: Switch Pages S1 Oscillators, Mixer S2 Filter S3 Envelopes and LFOs, voice LFO S4 Modulation matrix S5 Keyboard & tuning, sequencer & arpeggiator, sequence editor S6 Voice and parts mappings, Tempo/clock S7 Performance, knob assignments Each page displays up to eight related synthesis parameters. Each parameter can be edited by turning the knob sitting at its top (for the first row of the display) or at its bottom (for the second row of the display). Here is an example: After having powered up the unit, press S1 to bring the oscillators page. L1 lights up in green, and the LCD display shows the following parameters: Wave saw|para 0|rang 0|tune 0 wave squa|para 32|rang -12|tune 12 You can use the first row of knobs to edit the shape, parameter, range and detune of the first oscillator ; and the second row of knobs to edit the shape, parameter, range and detune of the second oscillator. Observe that when you are turning a knob, the explicit name of the parameter is temporarily shown on the screen: oscillator 1 |waveform saw wave squa|para 32|rang -12|tune 12 After a short delay, the four names and values are shown again. Press S1 again to bring the mixer page. L2 lights up in yellow, and the LCD display shows the following parameters: Mix 32|nois 0|sub 0|wave squ1 xmod off|amnt 31|fuzz 0|crsh 0 Press S1 again to get back to the oscillators page. Using the encoder When Ambika displays a parameters page, the rotary encoder can be used to scroll through the parameters. The name of the active parameter is capitalized. For example, oscillator 1 range is here the active parameter: wave saw|para 0|Rang 0|tune 0 wave squa|para 32|rang -12|tune 12 Rotate the encoder clockwise to make tune the active parameter, rotate the encoder counter-clockwise to make para the active parameter. If you continue rotating the encoder clockwise, the next page will become active. Once a parameter is selected (capitalized), click the encoder to edit it. The full name of the parameter is displayed on the screen. The encoder can now be used to increment/decrement the parameter value. Once the value has been set, click the encoder again. Knob and encoder editing can be combined. Use a knob to rapidly adjust the value of a parameter, and then, while the parameter name is still displayed on the screen, use the encoder to fine-tune the value. Shortcut. Hold the S8 switch while turning the encoder to increment/decrement values by 8 instead of 1. Reference This section describes in details each page and parameter of Ambika. Voice allocation This page, accessible by the S6 switch, serves two purposes: Selecting the current part. Assigning voices to a part. Part 1|chan 1|low C-|high G9 voicecard| [1] [2] [3] 4 5 6 The first knob on the upper row is used to select a part. Notice how the LP1 ... LP6 LEDs indicate by a green light which part is active. All settings on all the other pages apply to the part indicated by this green light. chan (channel) sets the MIDI channel the active part responds to. Use omni if you want a part to respond to notes from all MIDI channels. Several parts can share the same MIDI channel. This is useful for controlling two patches from the same MIDI controller, in split or dual mode. low and high set the range of MIDI notes the active part responds to. This can be used to create keyboard splits: set the range of part 1 to C- .. B3 and the range of part 2 to C4 .. G9 ; and set both part 1 and part 2 to listen to the same MIDI channel. The result is that part 1 is played on the lower half of the keyboard and part 2 on the upper half. The lower part of the screen displays which voices are assigned to the active part. For example, in the display capture shown above, voices 1, 2 and 3 are assigned to part 1. Use the second knob on the lower row to assign/deassign voice 1 and 2 to the active part. Use the third and fourth knobs to assign/deassign voices 3/4 and voices 5/6. Note that you can assign to a part only voices which are not currently in use by another part. For example, when Ambika boots, voices 1, 3 and 5 are assigned to part 1 ; and voices 2, 4, 6 are assigned to part 2. You will notice that it is not possible to assign voices 2, 4, 6 to part 1 before having de-assigned them from part 2. It might not be convenient, but a voice can only be used by one part, so this constraint has to be enforced! Assigning/de-assigning a voice causes quite a bit of data shuffling between the processors running each voicecard, and this causes interruptions/reset notes. Don't do that during a live performance! Shortcut Hold the S1 switch while turning the encoder to change the active part. This works on any page! Synthesis Finally, let's get to the real thing! Each voice of Ambika is built according to the diagram drawn below. Obviously, it would be tedious to edit the settings of each individual voice... Instead, you edit parts and all the voices assigned to a part automatically inherit its settings! Here is a day (or rather a millisecond) in the life of a voice's signal: The oscillators 1 and 2 generate digital waveforms, which are digitally combined together using one of the following operations: mix, sync and mix, multiply (ring-modulation), xor, mix and fold, mix and bit-reduce. The sub-oscillator (whose pitch is linked to oscillator 1's) is added. The click generator generates a short transient/click at the beginning of the note. Note that the sub-oscillator and the click generator cannot be used at the same time. It's bassy-beefy or clicky, not both. The output of the modulator, the sub-oscillator/click-generator and a controllable amount of white noise are summed together. You can adjust the balance of each ingredient. A controllable amount of fuzzy overdrive is applied to the signal. The resulting signal is sample-reduced by a controllable amount. The resulting signal is converted to the analog domain by a 12-bit DAC and fed into an analog VCF and VCA. Each of these sound generation and modification modules have parameters which can be controlled by any of the modulation sources listed below. However, some connections are already \"hardwired\" (or rather \"softwired\" in the firmware): The oscillators' pitch always tracks the note played on the keyboard. However, this can be disabled by applying a negative modulation (amount: -63) from note to oscillator pitch. The filter cutoff frequency always tracks the note. Again, this can be disabled or attenuated by applying a negative modulation from note pitch to cutoff frequency. The rationale behind this choice is that most of the time, you want 1:1 tracking, so this frees up a slot in the modulation matrix for something more interesting! Lfo 2 and Envelope 2 are always connected to the filter, their modulation amount being controlled by dedicated parameters on the filter page. Besides this, it is up to you to route modulations to parameters. By default, the following routings are wired: Source Destination Amount Env 1 Oscillator 1 parameter 0 Env 1 Oscillator 2 parameter 0 Lfo 1 Oscillator 1 pitch 0 Lfo 1 Oscillator 2 pitch 0 Lfo 2 Oscillator 1 parameter 0 Lfo 2 Oscillator 2 parameter 0 Lfo 3 Mixer balance 0 Lfo 4 Filter cutoff 0 Seq 1 Filter cutoff 0 Seq 2 Mixer balance 0 Envelope 3 VCA gain 100% Velocity VCA gain 25% Pitch-bend Oscillator 1+2 pitch 2 semitones Lfo 4 Oscillator 1+2 fine pitch 2 semitones Let us now review the different synthesis parameters. Digital oscillators (S1) Wave saw|para 0|rang 0|tune 0 wave squa|para 32|rang -12|tune 12 Each row displays the settings of an oscillator. The parameters are the following: wave (waveform) : Oscillator waveform family. Contrary to most synthesizers in which waveforms are static, the Ambika waveforms are dynamic and can be continously morphed -- this is why it is more correct to refer to \"waveform families\" instead of \"waveforms\". para (parameter) : Morphing parameter. This morphs the selected waveform into many variations. rang (range) : Oscillator pitch, from -36 semitones to 36 semitones (relative the pitch of the MIDI note played on the keyboard). tune (tune) : Oscillator fine tune, from -0.5 semitone (-64) to 0.5 semitone (+64). The following is a list of all the available waveform families, with some applications and a description of what adjusting the parameter setting actually does. none : silence This simply switches off the oscillator. Switching the oscillators off is useful if you want to use the sine-wave produced by the filter's self-oscillation as the sole sound source. saw : sawtooth This waveform is perfect for basses and brass sounds. The parameter controls the waveshapping - when its value is increased, an increasingly large section of the waveform is shifted up. This waveform is band-limited. Thus, only a limited amount of aliasing artifacts will be heard when playing high-pitched notes. square : square wave The parameter controls the pulse-width. This waveform is perfect for simulating a clarinet, for basses, \"hollow\" sounds or Depeche Mode-like leads. This waveform is band-limited and only a limited amount of aliasing will be heard when playing high-pitched notes. You will observe that there is a slight difference in sound when moving the parameter from 0 to 1. To offer the best sound quality, the pulse width = 50% flavor is read straight from a wavetable at full sample rate, while the pulse width > 50% flavor is obtained from two dephased sawtooth waves, evaluated at half the sample rate. For bass sounds, for which aliasing is not going to be a problem, it is recommended to use pwm instead of square to get a beefier sound. triang : triangle wave A pure waveform, which serves as a good basis for flute or soundchip-like leads. The parameter controls a kind of waveshapping, clipping the bottom of the waveform. This waveform is band-limited and will still sound fine above C5. sine : sine wave A pure and chaste sine wave lost her virginity. At some point she started listening to Nine Inch Nails. zsaw : phase-distortion sawtooth with filter sweep This waveform uses phase distortion to recreate a low-pass filtered sawtooth by progressively \"pinching\" the phase of a sine wave. The parameter controls the brightness of the sound: from a sine wave to a sawtooth, then from a sawtooth to a sawtooth gone through an ugly transistor amp. Good for dirty bass guitar sounds or clavinets. lpzsaw , pkzsaw , bpzsaw , hpzsaw : resonant filter sweeps on a sawtooth wave. This waveform family directly simulates the sound of a sawtooth wave processed by a low-pass, peaking, band-pass, or high-pass resonant filter. The parameter controls the cutoff frequency of the filter. lpzpulse , pkzpulse , bpzpulse , hpzpulse : resonant filter sweeps on a trapezoidal wave. This waveform family simulates the sound of a trapezoidal pulse wave processed by a low-pass, peaking, band-pass, or high-pass resonant filter. The parameter controls the cutoff frequency of the filter. pkzpulse is particularly good at recreating the dirty, saturated sound, of a sawtooth filtered by the least academic of the 2-pole analog filters. ztriangle : mystery... This waveform vaguely evokes two hardsync'ed oscillators -- the parameter controlling their frequency ratio. It may or may not have been used in the Casio CZ-101. pad : swarm of 4 buzzing detuned sawtooth waves As the name implies, this waveform made of four stacked sawtooth waves is useful for pads (when a copious amount of filtering is applied) or for buzzing trance leads. The parameter controls the amount of detuning between the four waves. Note that no bandlimiting is happening here, so this thing doesn't sound quite good above C5... but it's doing a perfect job in the bass range! fm : minimal 2-operators FM The parameter controls the modulation strength. This oscillator provides the base material for metallic sounds, bells, metallophones, or the next 386 DX hit. When the fm oscillator is selected, the range parameter plays a slightly different role than usual: instead of controlling the main pitch of the note, it controls the modulator frequency, and has a drastic impact on the timbre. 8bits : bitwise anarchy A palette of 8-bits sounding waveforms obtained by applying bitwise operations to a basic sawtooth wave (something now known as \"biscuiting\"). pwm : my first Arduino synth This waveform is a shamelessly naive square wave. The parameter controls the pulse-width. Contrary to square , this waveform stinks aliasing - but for notes below C2 it is not a real problem: it becomes much more aggressive and \"in your face\" than square . noise : filtered noise generator The parameter controls the frequency of a simple 1-pole low-pass/high-pass filter in which is sent white noise. From 0 to 63, high-frequency content is progressively added. From 63 to 127, low-frequency content is progressively removed. Perfect as a raw material for percussions or sound effects. vowel : low-tech formant synthesis Changing the parameter will sweep between different vocal-like sounds (14 vowels and 2 consonants). Wavetables The remaining waveform families are wavetables -- collection of single cycle waveforms, synthetic or sampled from real instruments. The parameter is used to smoothly \"scan\" the wavetable. For example, if a wavetable has 2 waveforms, parameter = 0 plays the first waveform ; parameter = 127 plays the second ; and parameter = 64 plays a mix of both. Wavetables can contain up to 16 waves. Wavetable name Description male Vocal formants, best played in the lowest octaves female Vocal formants, best played in the medium octaves choir Depeche mode-like vocal sound tampura Single cycle waveforms from an indian tampura note bowed Transwave extracted from a cello sample cello Transwave extracted from a less dramatic cello sample vibes Transwave extracted from a vibraphone sample slap Transwave extracted from a slap bass sample epiano Various single cycle waveforms extracted from electric piano samples organ Various combinations of sine waves, as produced by drawbars organs waves 16 basic waveforms, ready to be morphed into one another digital Abstract, PPG-wave style wavetable drone 1 Abstract, PPG-wave style wavetable drone 2 Abstract, PPG-wave style wavetable metallic Single cycle waveforms from classic D50 patches bell A Depeche mode classic wavquence Individually addresses each single cycle waveform The last wavetable contains all the single cycle waveforms in memory. It is not recommended to scan the parameter with LFOs or envelopes ; but rather to control this from the step sequencer or a random modulation (for the infamous a new sound at each note effect). Mixer (S1) Mix 32|nois 0|sub 0|wave squ1 xmod sum|amnt 31|fuzz 0|crsh 0 mix (osc mix) : Balance between oscillator 1 and 2. nois (noise) : Noise level. sub (sub osc) : Sub oscillator/transient generator level. wave (waveform) : Sub oscillator/transient generator waveform (see below). xmod (crossmod) : Cross-modulation method used to combine the sound of oscillators 1 and 2. amnt (amount) : Cross-modulation amount. fuzz : Amount of overdrive/fuzz applied to the signal. crsh (crush) : Amount of sample rate reduction (sometimes known as bitcrushing) applied to the signal. Here is a list of sub-oscillator/transient generator waveforms. The first 6 settings correspond to the sub-oscillator, which is an oscillator of its own, playing always one or two octave lower than the oscillator 1. The next settings disable the sub-oscillator and enable various flavors of transient generators, which will produce a short, clicky sound at the beginning of the note: sq1 square sub-oscillator, 1 octave below osc. 1 tr1 triangle sub-oscillator, 1 octave below osc. 1 pl1 25% pulse sub-oscillator, 1 octave below osc. 1 sq2 square sub-oscillator, 2 octaves below osc. 1 tr2 triangle sub-oscillator, 2 octaves below osc. 1 pl2 25% pulse sub-oscillator, 2 octaves below osc. 1 click produces a discrete click which can emphasizes the percussiveness of a note. glitch produces a sound similar to that of a skipping CD. blow is a burst of noise with a slow attack. metal adds a metallic sounding, high-pitched click. pop adds a low-pitched discontinuity, useful for spicing up a kick drum. The crossmod parameter controls how oscillator 1 and oscillator 2 are blended together. The different modulation modes are: Mode Description What does the xmod parameter controls? off Mixing: Oscillators 1 and 2 are mixed together nothing sync Mixing and sync: Oscillators 1 and 2 are mixed together, with oscillator 2's waveform phase-synced to oscillator 1's nothing ring Ring modulation: Oscillators 1 and 2 are mixed together, and simultaneously sent to a ring-modulator balance between the original mixed signal and the ring-modulated signal xor Xor modulation: Oscillators 1 and 2 are mixed together, and simultaneously sent to a digital XOR cross-modulator balance between the original mixed signal and the XOR signal fold Foldback distortion: Oscillators 1 and 2 are mixed together, and sent to a foldback distortion Amount of foldback distortion bits Bit reduction: Oscillators 1 and 2 are mixed together, and sent to a bit depth reducer Amount of quantization noise Filter (S2) Freq 96|reso 0 mode lp env2 24|lfo2 0 freq (frequency) : Filter cutoff frequency. reso (resonance) : Filter resonance. mode (mode) : Filter mode (low-pass / band-pass / high-pass). Note that this setting takes effect only if the SVF filter board is installed. With the standard SMR-4 filter board, the filter is always a low-pass no matter the position of this setting! env2 (env2->vcf) : Modulation amount from envelope 2 to VCF. If you want to set a negative modulation amount, you can patch env2 to the VCF in the modulations section and ignore this parameter. lfo2 (lfo2->vcf) : Modulation amount from LFO 2 to VCF. Again, if you want to set a negative modulation amount, you can patch the LFO 2 to the VCF in the modulations section and ignore this parameter. Envelopes and LFOs (S3) Ambika has three ADSR envelopes, three part LFOs and one voice LFO . A part LFO is shared among all voices assigned to a part and is used for creating global sweeps, tremolo effects, etc. A voice LFO is specific to each voice, and there will actually be a small amount of detuning/dephasing between them, for a richer sound. Consider the example of a guitarist playing a guitar through a tremolo pedal, and applying a vibrato on a particular note. If you want to program something similar, you will use the voice LFO for the vibrato (because it is slightly different and desynchronized for each individual note) ; and you will use a part LFO for the tremolo, since it uniformly affects all the notes. Another example: you have found the perfect combination of LFOs to create a trancey gated strings sound. The last thing you want is to have each note of the chord triggered at a slightly different instant due to difference in timings when the chord is played. You need a part LFO for the gating effect. A voice LFO is good for richness and randomness, a part LFO is good for sync'ing things up. As a result, only the voice LFO can be controlled in the modulation matrix (because it can be controlled by velocity, aftertouch, etc. -- all kind of things that might be different for each played note) ; and only the part LFOs can be synchronized to tempo. This part LFO vs voice LFO distinction sounds confusing, and there is actually little documentation about it. Most classic analog synthesizers do not have one LFO circuit per voice, so their behaviour is accurately simulated by the use of part LFOs . Some VAs, like the access Virus, use voice LFOs . On the Waldorf Blofeld, each LFO is a voice LFO by default and can be turned into a part LFO through the use of the sync setting. Lfo/eg 1|rate 24|wave tri|trig free attk 0|deca 40|sust 20|rele 60 lfo/eg : Selects the LFO / envelope generator to edit. The settings shown on the page are relative to the selected LFO / EG. If you are wondering if there is such thing as a \"filter envelope\" and \"VCA envelope\"... Yes, by default env2 is mapped to cutoff and env3 to the VCA ; but this can be changed in the modulation matrix by patching pranksters. rate : LFO rate. The first values (1/1 to 1/96) are note values relative to the global tempo (or to an external MIDI clock). For example, if set to 1/4, the LFO will play one cycle every quarter note. The other values are increasing frequencies, from 0.06 Hz (0) to 100 Hz (127). wave (waveform) : LFO waveform. A list of LFO waveforms is given below. trig (trigger) : LFO/envelope synchronization mode. free leaves the LFO free-running. env->lfo resets the phase of the LFO everytime a new note is played. lfo->env retriggers the corresponding envelope generator everytime the LFO completes a cycle. attk (attack) : Envelope attack time, from 1ms to 66s. deca (decay) : Envelope decay time (same times as for attack). sust (sustain) : Envelope sustain level. rele (release) : Envelope release time (same times as for attack). Here is a list of LFO waveforms: tri : Triangle. sqr : Square. s&h : Sample & hold (random value). ramp : Ascending ramp (use a negative modulation amount in the modulation matrix to get a descending ramp modulation). sine to stp2 : Wavetable LFOs. These LFOs are read from a wavetable containing many interesting waveshapes. Voice LFO (S3) rate 24|wave tri _ rate : LFO rate. The voice lfo cannot be synchronized to the tempo. The frequency ranges from 0.06 Hz (0) to 100 Hz (127). wave (waveform) : LFO waveform. Modulation matrix and modifiers (S4) Modul. 1|srce env1|dest prm1|amnt 0 modif. 1|in1 lfo1|in2 lfo2|oper off The upper part of this page allows the routing of up to 14 modulation sources to synthesis parameters. The first knob is used to select one of the 14 virtual \"modulation patchcords\", while the other knobs on the first row are respectively used to edit its source ( srce ), destination ( dest ), and the attenuation amount ( amnt ). For example, this line: Modul. 4|srce env3|dest vca|amnt 63 Indicates that the third envelope is routed to the VCA gain. The modulation sources are the following: env1 , env2 , env3 : ADSR envelopes. lfo1 , lfo2 , lfo3 : Part LFOs (bipolar). lfo4 : Voice LFO. mod1 , mod2 , mod3 , mod4 : Modifiers (see next section). seq1 , seq2 : Step sequences 1 & 2. arp : Arpeggiator gate pattern. velo : Note velocity. aftr : Note aftertouch. bend : Pitch-pend wheel (bipolar). mwhl : Modulation wheel. whl2 : Modulation wheel 2, Joystick negative Y axis or Breath controller. pdal : Expression pedal. note : MIDI note number (bipolar). gate : Keyboard gate (null when the key is released). nois : White noise sampled at 1kHz. random : Random value, updated every time a note is retriggered. [256]{style=\"text-align:center;\"} to [4]{style=\"text-align:center;\"} : Boring constant values. The modulation destinations are the following: prm1 , prm2 : Oscillator 1&2 parameters. osc1 , osc2 : Oscillator 1&2 pitch. \\~1+2 : Oscillator 1&2 coarse pitch. vibr : Oscillator 1&2 fine pitch. mix : Oscillator balance. xmod : Oscillators cross-modulation amount. This has no effect when the off or sync mixing modes are selected. nois : Noise amount. sub : Sub-oscillator amount. fuzz : Fuzz amount. crsh : Sample-rate reduction amount. freq : Filter cutoff. reso : Filter resonance. attk : Envelopes attack time. deca : Envelopes decay time. rele : Envelopes release time. lfo4 : Voice LFO rate. vca : VCA gain. One thing that requires a bit of clarification is the notion of bipolar modulation source. Let's take an example. We have a triangle LFO mapped to the filter cutoff, with a modulation amount of 30. If the cutoff is set to 80, the actual value of the cutoff will oscillate between 50 (80-30) and 110 (80+30). On the other hand, if we have an envelope mapped to the cutoff with a modulation amount of 20, the cutoff will go from 80 to 120 (80 + 2 * 20), then down to 80 after the release. This is something to remember if you want to do PWM for example. If you set the PWM modulation amount to 40, you also have to set the oscillator parameter value to 40, so it will oscillates between 40-40 = 0 and 40+40=80. Otherwise, it will spend half of the time stuck at 0. But this makes things nicer for vibrato, tremolo, wah-wah or growl effects! LFOs, pitch-bend and MIDI note number modulations are bipolar. If you are used to electronics/Modular speak, it is equivalent to say that the LFOs are always \"AC-coupled\" instead of \"DC-coupled\". Another thing worth noting is that the modulation amount of the last patch in the modulation matrix is always attenuated by the modulation wheel. Let us say that you have connected patch 14 from LFO 4 to the oscillators fine pitch (actually this is done by default in the init patch!): Modul. 14|srce lfo4|dest vibr|amnt 16 This modulation will be applied with an amount proportional to the mod-wheel position - by default it will not be active until you start moving the modulation wheel, and to get it at full strength, you will have to push the modulation wheel to the max. In the modular synth world, you would have obtained the same effect by patching the LFO at the signal input of a VCA, the joystick at the control input of the VCA, and routed the resulting signal to the exponential FM input of the VCO. Pheww! The lower page of the modulation/modifiers page allows the combination of up to 4 pairs of modulation sources to create new modulation signals. The first knob on the bottom row is used to select one of the 4 modulation modifiers, while the other knobs on the lower row are respectively used to edit the two inputs of the modulation modifier ( in1 and in2 ), and the operation ( oper ) to apply. modif. 1|in1 lfo1|in2 lfo2|oper prod In the example above, the modulation source mod 1 is defined as the product of lfo1 and lfo2 . The following operations are available: off no operation. add adds the values of the two modulation sources. prd computes the product of the two modulation sources. attn computes the product of a bipolar version of the first source, and the second source. max takes the maximum of the two sources. min takes the minimum of the two sources. xor computes the bitwise XOR of the two sources. greater or equal outputs a large value if source 1 is above soure 2, 0 otherwise. less or equal outputs a large value if source 1 is below soure 2, 0 otherwise. qtz outputs the value of in1 quantized into a number of levels defined by in2. For example, if you set a constant value (say = 4) as in2, the modulation source in1 will be quantized into 4 discrete steps, as if it was processed through a bit-reducer! This is useful for creating pseudo S&H effects. lag outputs the value of in1 filtered by a lowpass filter whose cutoff frequency is set by in2. For example, if you use a constant value (say = 4) as in2, the modulation source in1 will be strongly low-pass filtered. This is very useful for smoothing a square or S&H lfo! Keyboard and sequencing Keyboard and tuning (S5) Volu 120|mode poly|lega off|port 0 octv 0|tune 0|sprd 0|raga equa volu (volume) : Part volume. Note that the volume attenuation is done by scaling the value of the VCA control signal - causing a potential loss of resolution in the shape of the VCA envelope. mode : Polyphony handling. When this is set to mono , all voices assigned to this part are simultaneously played in unison, and you cannot play chords (only the most recently played note is heard). When this is set to poly , the notes you play are dispatched to the voicecards. Obviously, the polyphony is limited by the number of voices assigned to the edited part! Finally, 2x unison works like the polyphony mode except that every time you play a note, it is played by 2 voices - this effectively divides the polyphony by two. lega (legato) : Legato mode on/off. This setting has an effect only in mono mode. This option specifies how the part will interpret overlapping notes. When legato is off, the envelope retriggers everytime a new note is played, and the portamento is always applied. When legato is on, the envelope retriggers only when the new note does not overlap with the previous one, and the portamento triggers only on overlapping notes. port (portamento) : Portamento time. This setting has an effect only in mono mode. octv (octave) : Octave shift. Use this to transpose a part by a given number of octaves. Note that if a note is playing when while this setting is changed, it won't be affected. tune : Part tuning. Changes the tuning of the part by +/- 1 semitones. sprd (spread) : Voice detune. Use this setting to introduce an artificial detuning between all the voices allocated to this part. This can be used to create very thick leads or basses in mono mode, or to add more depth to strings/pads sounds in poly mode. raga : Scale/keyboard mapping. The different scales/keyboard mappings are: Name Description equal Equal temperament just Just intonation (frequency ratios to C are rational numbers) pythagorean Pythagorean scale 1/4 eb E and B are 1/4 tone lower 1/4 e E is 1/4 tone lower 1/4 ea E and A are 1/4 tone lower bhaira ... rasia A bunch of ragas of the Maihar gharana . Note that it is not possible to play notes outside of the raga - if you attempt to do so, the previously played note will be retriggered. The suggested mode of operation is to find out which keys are active in the raga, and improvise with them! Sequencer and arpeggiator settings (S5) Each part of Ambika has a sequencer / arpeggiator. The sequencer consists of: 2 step-sequences, up to 32-step long, which can be freely routed to any modulation source in the modulation matrix. 1 note pattern, up to 32-step long. All parts follow the same global clock, which can be set to a fixed BPM or synchronized to an external MIDI clock. However, since polyrythmy can be fun, each part can be synchronized to a different subdivision of the MIDI clock and use a different step-sequence / pattern length. 3 sequencing modes are available - they define how notes played on the keyboard are translated into the notes played by the voices: step seq : Only the step sequencers (modulation sources) are running. The arpeggiator and note pattern are disabled - thus only notes actually played on the keyboard are heard. arpeggio : The notes played on the keyboard are not directly heard, instead, they are arpeggiated. pattern : Holding a key triggers the note pattern programmed in the sequencer. The pattern is played at its original pitch if the held key is C4 (midi note #60). Otherwise, the pattern is transposed. A/sq step|dire up|rang 1|patt 1 grid 1/16|len1 16|len2 16|lenp 16 a/seq (arp/seq) : Arpeggiator/sequencer mode. dire (direction) : Arpeggiator direction. The available options are up, down, up and down, random, played (which follows the order in which the notes have been played on the keyboard) and chord (which retriggers the whole chord at each step). rang (range) : Arpeggiator direction. patt (pattern) : Arpeggiator rythmic pattern. grid : Step duration. The default setting, 1/16 (one sixteenth note or one semiquaver per step) corresponds to the default setting of Roland's x0x boxes. For programming a pattern in triplets, use 1/12 and set the pattern duration to 12 steps. You can also use this for programming SID-style rapid-fire arpeggios. len1 (seq1 len) : Length (in steps) of the first step sequence. len2 (seq2 len) : Length (in steps) of the second step sequence. lenp (patt len) : Length (in steps) of the note pattern. Let us now discuss the most devilish, confusing thing about Ambika sequencer: sequencer memory sharing. Ambika only has memory for 16-steps long patterns. Yet, the len1 , len2 , lenp lengths can go up to 32. How is it possible? Simply by reusing steps from one pattern into the other! For example, if you set the step sequence 1 length to 18, the last 2 steps of step sequence 1 and the first 2 steps of step sequence 2 will store the same value. If you set the step sequence 1 and 2 length to 32, the last 16 steps of step sequence 1 will be the first 2 steps of step sequence 2 and reciprocally. When you set the notes sequence length to 18, the first 4 steps of step sequence 1 will be scrambled with apparently random data from the note sequence. So remember: as soon as one of sequence 1 or sequence 2 exceeds 16 steps they will scramble each other ; and as soon as the note sequence exceeds 16 steps it will scramble the step sequences. Whether you will prudently avoid using the scrambled sequence or take creative advantage of this scrambling is up to you! Sequence editor (S5) This page shows the note pattern and the step sequences 1 & 2. | note |velocity |stepseq 1|stepseq 2 01|. C4 |. o100 |. 255 |. 0 The first column displays the step number. Use the encoder to scroll through the sequence. The second column displays the note number, editable by the first knob of the upper and lower rows. The third column displays the note velocity, editable by the second knob of the upper and lower rows. Turn the knob completely counter-clockwise to mute a step, and completely clockwise to enter a note at full velocity. Turn the knob to a middle position to enter a tie/slide. The fourth and fifth columns display the value of the step sequence 1 and 2, editable by the third and fourth knobs of the upper and lower rows. What about the dots shown in some columns? They indicate the start of the sequence. For example, if the note sequence is 16 steps long, but the step sequence 1 is only 5 steps long, you will see a dot on step 6, 11 and 15 to remind you that the step sequence 1 \"cycles\" over 5 steps only. Trivia: the longest non-repeating pattern you can build with Ambika is 20677 steps long (set sequence 1 to 23 steps ; sequence 2 to 29 steps ; and the note sequence to 31 steps). With a clock speed of 1/16 and a BPM of 86, the sequence would last for 1 hour! Multi settings These settings are not related to a specific part. They are saved (along with each part's individual settings) in a multi. Clock settings (S6) Bpm 120|groo swin|amnt 0|ltch 0 _ bpm is the master tempo, in beats per minute. Use ext to sync to an external MIDI clock source. groo (groove) : groove template. The options are swing (uneven distribution of pairs of 1/8th notes), shuffle (uneven distribution of pairs of 1/16th notes), push (push the beat), lag (sloppy drummer!), human (humanization) and monkey (humanization + shuffle). This setting only has an effect when amnt is set to a non-zero value. amnt (amount) : amount of groove to apply. ltch (latch) : clock latch release time. This parameter controls the number of beats during which the internal clock continues running after you have released all keys. This allows the internal arpeggiator or sequencer to \"keep counting\" for a while after you have released all keys from the keyboard. When this setting is set to 0 and the arpeggiator is on , every time you release the keys to play a new chord, the internal clock stops and the arpeggiator/sequencer is restarted. You might like this effect (many vintage synths work this way), but it might sound a bit strange to have the \"flow\" of the sequence broken at each chord change. When the clock latch is set to 1 beat, the \"flow\" of the clock and arpeggiator are preserved as long as your chord changes are spaced by less than 1 beat. Performance page (S7) Para 0|freq 96|para 0|freq 96 env2 27|volu 120|env2 24|volu 120 This page allows 8 parameters from different pages and for different parts to be displayed together on the same page. Observe that when a parameter is edited, the part number part is shown on screen: pt 1 oscillator 1 |waveform saw wave squa|para 32|rang -12|tune 12 A particular quirk of this page is the specific function assigned to the encoder. Press it to simultaneously send a C4 note to all parts. Press it again to send a note off message to all parts. This allows Ambika to be used without a MIDI keyboard. While a note is being played through this mean, you can turn the encoder to transpose all parts up and down. To select the parameters/parts shown on the performance page, press S7 again to bring the customization page: performance page customization knob 1|part 1|oscillator 1 parameter Use the first knob to select the index of the knob you want to customize. Use the second knob to select a part number. Use the third and fourth knobs, or the encoder, to scroll through the list of parameters. The library Everything related to loading/saving patches, multi, etc. is done on this page. The data is stored on a SD card (SDHC cards are supported) formatted in FAT16 or FAT32 format, inserted at the back of Ambika. In case the SD card is incorrectly formatted, incorrectly inserted, or damaged, the following text will be displayed every time you try to display the library page: /!\\ SD card I/O error ok Press S8 to continue and try blowing on the SD card connectors. If the card is correctly inserted and formatted, the main library page will be displayed: pt 1 program .A000 junon | init|send|save|versions more|exit The first row displays the following information: pt 1 program is the current \"object\", that is to say the kind of thing you want to load/save from/to the memory card. In this case, you will be browsing the list of programs and they will be loaded into part 1. A000 indicates the bank and object number. Banks are identified by a letter from A to Z ; objects are identified by a number from 000 to 127. The dot before A000 indicates that the version in memory is different from the version stored on the card. junon is the object (here a program) name. The second row is a list of commands. Each command is associated with a switch. For example, S2 performs the init command, S3 the send command, and S8 the exit command. To quit the library page, you thus have to press S8 ( exit command). Selecting an object Press S1 to repeatedly cycle through the different types of items that can be loaded/written from/to the memory card: pt N patch will load/save all the sound synthesis settings, but not the sequencer/arpeggiator parameters of the Nth part. pt N sequence will load/save all the sequencer/arpeggiator settings of the Nth part. pt N program will load/save all the settings of the Nth part (synthesis, arpeggiator and sequencer). multi will load/save all the settings of all parts. Remember that you can hold S1 while turning the encoder to change the active part. Ambika can store 3328 (26 banks of 128) patches/sequences/programs/multis. Loading programs/multis/sequences/patches Turn the encoder to move to the previous/next program. Remember that you can hold S8 while turning the encoder to scroll faster in the list. To change the current bank: Click the encoder. The bank letter starts blinking. Turn the encoder to select a bank. Click the encoder when you are done. Reinitializing programs/multis/sequences/patches Press S2 ( init command) to reinitialize or randomize the select object. This brings the following confirmation page: pt 1 program [ randomize ] yes | no Turn the encoder to select an action (randomize will replace all settings by random values; while initialize will replace all settings by the values they had at startup). Press S7 to confirm, or S8 to cancel the initialization. Dumping programs/multis/sequences/patches as SysEx Press S3 ( send command) on the library page to send the selected object on the MIDI output, encoded in SysEx messages. Note that programs are sent as 2 messages (1 block with synthesis settings and 1 block with part settings) ; and multi are sent as 13 messages ; so you need to set your SysEx Librarian program to receive many messages. Saving programs/multis/sequences/patches After having selected with S1 which object type you want to save (multi, program, etc.), press S4 ( save command). pt 1 program .A000 junon save|cancel Before saving a program/multi/sequence/patch, its bank letter, number and name must be set. Use the encoder to increment/decrement the value or letter at the cursor. To move the cursor, click the encoder, turn it to move the cursor, and click it again. When you are done, press S7 ( save command). If you want to cancel the operation, press S8 ( cancel command). A warning will be displayed in case the memory card is damaged, full, incorrectly formatted, or just needs a little blow on its connectors. Note that when a patch is overwritten, a backup copy of the previous version is kept. You can use a SD-card reader on your personal computer to remove the latest version of the patch and restore the backup copy (Sorry... Ambika does not come with its own version of Norton Commander). Clipboard and version manager. Press S5 ( versions command) to bring the version manager. pt 1 program version 0 copy|swap|paste << | >> |keep|exit The following commands are available for the select object ( part 1 program in the example given above): copy ( S1 ) copies the current item to a clipboard . You can use it to temporarily hold in memory a version of a patch, or to copy a patch from one part to another. swap ( S2 ) exchanges the content of the clipboard with the current item. This allows you to quickly go back and forth between two versions of a patch. paste ( S3 ) replaces the current item by the content of the clipboard . Note that there are actually 4 clipboards, one for patches, one for multis, one for programs and one for sequences. << ( S5 ) reverts the current item to its previous content. This works like the undo function available on most computer software. For example, if you create an amazing patch, and then load by mistake a preset on top of it, you can use this function to go back in time and retrieve your creation. >> ( S6 ) works like a redo command. You can use it to cancel an undo command and move forwards in the versions list. keep ( S7 ) saves the state of the current item on the undo stack, so that you can get back to it at a later point in time. exit ( S8 ) exits the version manager. System preferences From the library page: pt 1 program .A000 junon | init|send|save|versions more|exit Press S7 to display more commands: pt 1 program .A000 junon pref|>ini|about more|exit Press S1 to bring the system preferences page: Inpt ....|outp thru help on|snap off|leds on|auto on The following system preferences can be edited: inpt (inpt filtr) : Input filter. By default, all MIDI messages are accepted by Ambika (....). Any combination of SysEx (...s), Program changes (..p.), NRPN (.n..) or Patch editing control changes (c...) can be disabled. With all filters active (cnps) Ambika only responds to basic MIDI messages. outp (outp mode) : MIDI output mode. The following output modes are available: thru (the MIDI output forwards all incoming messages, and only those), sequencer (the MIDI output sends the note generated by the arpeggiator and sequencer), controllr (the MIDI output sends NRPN messages reproducing all editing operations performed on Ambika), full (the MIDI output sends all incoming messages along with NRPN reproducing all editing operations). help : Whether the long name of the edited parameter should be displayed. Once you are familiar with Ambika, you might find it more convenient to have the help text never shown. snap : Enables potentiometers' \"snap\" mode. This mode makes it less likely to accidentally change a parameter value when switching pages. Suppose you are tweaking the filter resonance with P2 -- you rotate it all the way down to 0. Then you switch to the oscillators page to adjust the oscillator 1 parameter. If the current value of the parameter is set to 64, you'll hear a discontinuity, since the value of the parameter will instantly jump to 0 or 1 when you start touching the pot. When snap is on, things will happen differently: rotating the pot will have no effect until the position of the pot actually reflects the current value of the parameter. After that, the parameter value will track the potentiometer's position. Another way to explain it: when snap is on you have to move the pot to \"grab\" the current parameter value before the parameter is modified. leds : Disables the voicecard LEDs, in case you consider that synths should not be used as Diwali decorations. Note that you need to reboot the unit for this setting to take effect! auto (auto backup) : Enables or disables the backup copy created on the memory card whenever an item is overwritten. Disabling it will make saving faster. It is also possible to save the current multi so that it is reloaded every time Ambika starts up. This is very useful for saving your MIDI settings and favorite split/voice allocation parameters! pt 1 program .A000 junon pref|>ini|about more|exit On this library page, press S2 to select the [ini]{style=\"text-align:right;\"} command. (?) use current multi as default? yes | no Press S7 to confirm. The unit will freeze for a few seconds to write the current multi to its non-volatile memory. Firmware update Firmware update through the SD-card From the library page: pt 1 program .A000 junon | init|send|save|versions more|exit Press S7 to display more commands: pt 1 program .A000 junon pref|>ini|about more|exit Press S3 to bring the about page: ambika v1.0|port 1 device 1 v1.0 upgrade |upgrade exit The first half of the screen displays the version of the OS running on the motherboard. If a firmware update file named AMBIKA.BIN is present on the memory-card, pressing S1 ( upgrade command) will load it to upgrade the main processor. Ambika contains seven ports to which devices are attached. The first 6 ports (port 1 to port 6) are used for connecting the voicecards ; the last port (port 7) is used for connecting additional controllers or I/O connectors. The second half of the screen on the about page shows the device type and OS version number for a selected port. Use the encoder to scroll through the ports. When no device is attached to a port (or when the device firmware has been corrupted), a '?' is shown in place of the device type. If a firmware update file named VOICE$.BIN (where \\$ is the port number) is present on the memory card, pressing S4 (upgrade command) will load it to upgrade the voicecard processor. Emergency firmware update If for some reason Ambika is \"bricked\" -- this can happen if the SD card is damaged, if the firmware update file has been incorrectly copied to the card, or if the power has been disconnected during the firmware upgrade procedure -- there is still a way of initiating a firmware update: Press S8 while powering up Ambika to force the firmware to be reloaded from the SD-card. During loading, the unit displays the number of bytes loaded (the firmware takes up to 60kbytes): SD update... 4096 Press S7 while powering up Ambika to put the unit in MIDI firmware upgrade mode. In this mode, the unit is waiting for the firmware to be sent as SysEx blocks over MIDI. A .syx or .mid file with the latest data is available on the Mutable Instruments website. While receiving blocks of MIDI data, the unit displays the number of bytes loaded (the firmware takes up to 60kbytes): Syx update... 4096 If you want to use a dedicated SysEx transfer tool, we recommend Elektron's C6 tool available for both Windows and OS X, configured with a 250ms delay between blocks. Resetting the unit to factory settings Most of the data held by Ambika is stored on the SD card, with one exception: the boot configuration , which is stored on the main processor's non-volatile memory. The boot configuration is the set of settings loaded when the unit is powered on. To restore the default factory boot configuration , keep the S1 key while powering the unit. The unit will freeze for a few seconds to retrieve and write the factory defaults. Dirty technical details MIDI implementation Basics A MIDI implementation chart is available here . Program changes Program change messages are used to load either: a program (that is to say sound synthesis settings + keyboard mapping/sequencer parameters). All parts set to listen to the channel on which the program change message is sent will load the program. a multi . In this case, all parts are affected. The MIDI banks 0-25 are used to load program banks A to Z . The MIDI banks 26-51 are used to load multi banks A to Z . For example, to load the multi 002 in the B bank, send a control change 0 (bank select) with a value of 27 to select multi bank B , and a program change 2. To load the program 120 in the D bank, send a control change 0 (bank select) with a value of 3, and a program change 120. External clock reception Keep in mind that the tempo must be set to ext to receive an external MIDI clock! Otherwise Ambika continues running with its own internal clock. Control changes The Modulation Wheel, Breath Controller and Foot Pedal CCs ; along with aftertouch messages might not affect the sound unless they are patched to a modulation destination in the modulation matrix. If you want these sources to control the intensity of a LFO, it is recommended to do it through a modifier. Here is an example of patching: Modul. 8|srce mod1|dest mix|amnt 63 modif. 1|in1 lfo2|in2 whl2|oper attn Mod1 is defined as \"LFO2 attenuated by the modulation wheel 2\", and this modulation is applied to the oscillators balance. Please refer to the CC page of the MIDI implementation chart given above to see the list of synthesis parameters controllable by CC. Editing a synthesis parameter by CC is fool-proof: values between 0 and 127 are translated into the full range of the parameter; so that 0 always means the minimum value taken by the parameter, and 127 its maximum value. This might cause a resolution loss for parameters with a wide range above 127. NRPN patch editing NRPN messages can be used to directly write into the Patch and PartData data structures. The NRPN number indicates the address at which a value must be written ; and the data entry / data increment messages are used to set the value. Observe that you need to send both a Data Entry MSB and a Data Entry LSB message to send a signed value, or a value above 127. Signed values are represented in 2's complement. NRPN range Mapped to Data structure declaration 0 .. 111 Patch data structure, offsets 0 .. 111 struct Patch 112 .. 192 Part data structure, offsets 0 .. 80 struct PartData Here is an example: you want to modify the part tuning to -13. The tuning byte is at offset 2 in the Part data structure, so its NRPN number is 114. In 2's complement, the value ~~13 is represented by 128~~ 13 = 115. Thus, the NPRN that needs to be sent is: 176 99 0 (NRPN MSB set to 0)` 176 98 114 (NRPN LSB set to 114)` 176 6 1 (Data Entry MSB set to 1 -- value above 127 or negative)` 176 38 115 (Data Entry LSB set to 115, because 115 - 128 = -13)` SysEx Ambika can receive and transmit settings in system exclusive format. The messages all share the same format: 0xf0 (SysEx) 0x00 0x21 0x02 (Mutable Instruments Manufaturer ID) 0x00 0x04 (Product ID for Ambika) Command Argument Payload Checksum 0xf7 (End of SysEx) Command indicates what the receiver should do with the data in the payload block, and argument is a byte that might contain an additional piece of information about what to do with the data. Payload is a sequence of bytes in nibblized form. For example, the sequence 0x80 0x56 0x13 is transmitted as 0x08 0x00 0x05 0x06 0x01 0x03 . Checksum is equal to the nibblized-sum, modulo 256, of the bytes. In the example above, the checksum is equal to 0x80 + 0x56 + 0x13 = 0xe9 and is transmitted as 0x0e 0x09 . Data structure dump When transfering patch/sequence/program/multi data to Ambika, command indicates the data structure being sent and argument indicates the part number the data must be loaded into. The following table summarizes the different payload types. Command Argument Affected data structure Payload size 1 Part number (0 for current part) Patch 112 bytes 2 Part number (0 for current part) PartData::sequence_data 72 bytes 4 Part number (0 for current part) PartData 84 bytes 5 Always 0 MultiData 56 bytes Data structure request Use this command to request one or several data blocks from Ambika. Command Argument Reply 17 Part number (0 for current part) Patch bytes for selected part 18 Part number (0 for current part) Sequencer bytes for selected part 19 Part number (0 for current part) Patch bytes + PartData bytes for selected part 20 Part number (0 for current part) PartData bytes for selected part 21 Always 0 MultiData bytes + Patch Bytes and PartData bytes for the 6 parts Random memory read (PEEK) Use this command to request the contents of an arbitrary block of RAM, up to 32 bytes long. Command is equal to 0x1f (31). Argument is equal to the size of the requested block. The two bytes of payload indicate the address to read (16-bit, little endian address). For example, to retrieve the 4 bytes at addresses 0x3ac .. 0x3b0, the sysex string would be: 0xf0 (SysEx) 0x00 0x21 0x02 (Mutable Instruments Manufacturer ID) 0x00 0x04 (Product ID for Ambika) 0x1f (PEEK command) 0x04 (Number of bytes to retrieve) 0x0a 0x0c (LSB of the address, here, 0xac) 0x00 0x03 (MSB of the address, here 0x03) 0x0a 0x0f (Checksum) 0xf7 (End of SysEx) 0x1f 04 0a 0c 00 03 0a 0f f7@ Random memory write (POKE) Use this command to transfer arbitrary data into Ambika's RAM. Command is equal to 0x0f (15). Argument is equal to the size of the block to transfer. The two first bytes of payload indicate the address to write to (16-bit, little endian address). The following bytes of payload contain the data. With great power comes great responsibility - this feature has the potential to create some damage that would require a factory reset! Developers can use the avr-nm tool to get a memory map and find out which datastructures are located at which addresses. For example: avr-nm build/ambika_controller/ambika_controller.elf -C -n . Addresses in RAM are prefixed by 0080. Mutable Instruments cannot guarantee that these addresses won't be subject to changes from one firmware version to the other. Memory card storage Filesystem layout The Ambika firmware supports both SD and SDHC memory cards, formatted with FAT16 and FAT32 filesystems. Memory cards with long file names are not supported. Congrats to ChaN for his amazing FAT library! Firmware update files / AMBIKA.BIN Firmware update for motherboard VOICE1.BIN Firmware update for voicecard 1 ... VOICE6.BIN Firmware update for voicecard 6 Patches, programs and sequences /PATCH /BANK /A /000.PAT Patch 000 in bank A /000.PA~ Backup version of Patch 000 in bank A ... /127.PAT Patch 127 in bank A /B /000.PAT Patch 000 in bank B ... /Z /127.PAT Patch 127 in bank Z /CLIPBRD /CLIPBRD.PAT Contents of patch clipboard /CLIPBRD.PA~ Previous contents of patch clipboard /HISTORY /0 /000.PAT Undo/redo sequence of part 1's patch /001.PAT Undo/redo sequence of part 1's patch ... /5 /000.PAT Undo/redo sequence of part 6's patch ... For programs and sequences, the directories are PROGRAM and SEQUENCE , and the file extensions are PRO and SEQ . Multis /MULTI /BANK /A /000.MUL Multi 000 in bank A /000.MU~ Backup version of Multi 000 in bank A ... /127.MUL Multi 127 in bank A /B /000.MUL Multi 000 in bank B ... /Z /127.MUL Multi 127 in bank Z /CLIPBRD /CLIPBRD.MUL Contents of multi clipboard /CLIPBRD.MU~ Previous contents of multi clipboard /HISTORY /000.MUL Undo/redo sequence of multis /001.MUL Undo/redo sequence of multis ... File format All files are stored in RIFF format. The first 4 bytes of the file is the 'RIFF' string. The next 4 bytes are the total size of the file in bytes, little endian format. The next 4 bytes is the 'MBKS' string. This is followed by one or many chunks. Each chunk consists of a 4 chars identifier, a 32-bit integer indicating the size N of the \"payload\" data, and N bytes of \"payload\" data. Two types of chunk are present in a file: The name chunk is always 16 bytes long and contains the name of the object (multi, patch, program...) stored in the file. The 16th byte must be a null character ; and the name must be padded with spaces. The obj chunk contains data that will be copied into one of Ambika's internal data structures. It consists of: A byte indicating the data structure (1: Patch, 2: PartData.sequence_data, 4: MultiData, 5: PartData). A byte indicating the part number the data must be loaded into (0: current part or global, 1: part 1, etc.) 2 null bytes. The actual data.","title":"Manual"},{"location":"ambika/manual/#getting-started","text":"","title":"Getting started"},{"location":"ambika/manual/#overview","text":"You have successfully built Ambika, Congratulations! Ambika is a multi-voice hybrid synthesizer. You can play it as a 6-voice polysynth, an ensemble of 6 monosynths, or anything inbetween due to its easily configurable voicing architecture. The sound generation is hybrid, combining the warmth and sonic character of a true 4-pole analog filter, with the large array of waveforms offered by digital wavetables, fm and phase modulation. The digital control of the analogue filter and VCA also means a very large palette of modulation possibilities. Some of the key features of Ambika include: 6 voices with individual outputs. 2 digital oscillators per voice, with 36 oscillator algorithms/wavetables. 1 sub-oscillator, also configurable as a transient generator. Pre-filter overdrive and bit-crushing effect. Analog 4-pole filter (or 2-pole multimode filter depending on the type of voicecard used) and VCA. 3 ADSR envelopes, 3 patch-level LFOs, 1 voice-level LFO. Modulation matrix with 14 slots and 4 modulation modifiers. 1 arpeggiator, 1 note sequencer and 2 step sequencers per part. Flexible mapping of the 6 voices. A single patch with 6 voice-polyphony, 6 independent mono parts, 2 layered patches with 3-voices polyphony, a 3-voice unison bass line on the lower half of the keyboard with a 3-voice unison lead on the upper half... all are possible! SD-card storage allows the storing of a life-long of patches, programs and multis, along with the history of editing operations for undo/redo.","title":"Overview"},{"location":"ambika/manual/#connections","text":"The following connectors are available on the rear panel: 1 : SD-card slot. Insert here a SD-card (SDHC supported), FAT16 or FAT32 formatted. At the exception of system settings, everything Ambika needs to store goes on the SD-card. A capacity of at least 256 MB is recommended. 2 : MIDI in connector. This input should be connected to the MIDI output of a computer MIDI interface, master keyboard, sequencer... 3 : MIDI out connector. This output is by default used as a MIDI-thru, but you can also use it to transmit the notes generated by the Ambika sequencer, arpeggiator ; or to do SysEx dumps of patches. 4 : Mix line output. This audio output contains a mix of all voices. 5 , 6 , 7 , 8 , 9 , 10 : Individual outputs. 11 : AC power jack. Use a 9V AC, 1A power source. Higher voltage will cause more heating of the voltage regulators and shorten the lifespan of the module.","title":"Connections"},{"location":"ambika/manual/#some-terminology","text":"A voice is a physical monophonic sound production device, consisting of digital oscillators, CV sources, an analog VCF and a VCA. A voice is only capable of producing a single-note sound. Ambika contains 6 voices, each of them being a physically different circuit board. A part is one or many voices sharing the same synthesis settings. Ambika can manage up to 6 parts. Each part stores its own synthesis, arpeggiator and sequencer settings. Each part listens to a MIDI channel, and is assigned a range of keys on the keyboard. Each of the 6 voices in Ambika needs to be linked to (assigned to) a part. This is a bit like showing each musician (voice) in an orchestra which staff they must play on a musical score! If you assign the 6 voices to the same part, Ambika will behave like a classic monotimbral polysynth. If you assign each voice to a different part, Ambika will behave like 6 independent monophonic synths. If you want to play a bassline on the lower part of the keyboard, and a brass riff on the upper part of the keyboard, you need to use two parts: one part with 1 voice for the bass, and a second part with 5 voices for the brass sound. A patch is a specific combination of synthesis settings stored into a part. A program consists of a patch , and additional sequencer/arpeggiator settings. A multi stores 6 programs (one for each part of Ambika) along with the mappings between voices, parts, midi channels and keyboard range. This is a complete snapshot of the Ambika configuration!","title":"Some terminology..."},{"location":"ambika/manual/#controls-and-navigation","text":"The 2x40 characters LCD display D displays, most of the time, the name and values of the 8 synthesis parameters accessible by the 8 potentiometers P . The parameters are organized as two rows of 4 parameters. The clickable encoder E is used to scroll between parameters/pages, or to fine-tune the value of a parameter. The 8 LEDs L1 ... L8 indicate which page is active. The 8 switches S1 ... S8 are used to display synthesis pages. For example, S1 shows the oscillators and mixer page ; S2 shows the filter page, etc. The part and voice LEDs LP1 ... LP6 indicate which part is active (green lights), and which voicecards are currently playing notes (yellow lights). The status LED LS is used to visualize the rate of a LFO or the beats in a sequence -- depending on which module you are editing.","title":"Controls and navigation"},{"location":"ambika/manual/#controls","text":"","title":"Controls"},{"location":"ambika/manual/#editing-parameters","text":"The Ambika parameters are organized in pages . To jump to a page, press one of the 7 switches S1 ... S7 . Some pages share the same switch ; and you will need to repeatedly press a switch to cycle between those pages. The active page is indicated by the LEDs L1 ... L7 next to the navigation switches. The following table lists which page is associated with each switch: Switch Pages S1 Oscillators, Mixer S2 Filter S3 Envelopes and LFOs, voice LFO S4 Modulation matrix S5 Keyboard & tuning, sequencer & arpeggiator, sequence editor S6 Voice and parts mappings, Tempo/clock S7 Performance, knob assignments Each page displays up to eight related synthesis parameters. Each parameter can be edited by turning the knob sitting at its top (for the first row of the display) or at its bottom (for the second row of the display). Here is an example: After having powered up the unit, press S1 to bring the oscillators page. L1 lights up in green, and the LCD display shows the following parameters: Wave saw|para 0|rang 0|tune 0 wave squa|para 32|rang -12|tune 12 You can use the first row of knobs to edit the shape, parameter, range and detune of the first oscillator ; and the second row of knobs to edit the shape, parameter, range and detune of the second oscillator. Observe that when you are turning a knob, the explicit name of the parameter is temporarily shown on the screen: oscillator 1 |waveform saw wave squa|para 32|rang -12|tune 12 After a short delay, the four names and values are shown again. Press S1 again to bring the mixer page. L2 lights up in yellow, and the LCD display shows the following parameters: Mix 32|nois 0|sub 0|wave squ1 xmod off|amnt 31|fuzz 0|crsh 0 Press S1 again to get back to the oscillators page.","title":"Editing parameters"},{"location":"ambika/manual/#using-the-encoder","text":"When Ambika displays a parameters page, the rotary encoder can be used to scroll through the parameters. The name of the active parameter is capitalized. For example, oscillator 1 range is here the active parameter: wave saw|para 0|Rang 0|tune 0 wave squa|para 32|rang -12|tune 12 Rotate the encoder clockwise to make tune the active parameter, rotate the encoder counter-clockwise to make para the active parameter. If you continue rotating the encoder clockwise, the next page will become active. Once a parameter is selected (capitalized), click the encoder to edit it. The full name of the parameter is displayed on the screen. The encoder can now be used to increment/decrement the parameter value. Once the value has been set, click the encoder again. Knob and encoder editing can be combined. Use a knob to rapidly adjust the value of a parameter, and then, while the parameter name is still displayed on the screen, use the encoder to fine-tune the value. Shortcut. Hold the S8 switch while turning the encoder to increment/decrement values by 8 instead of 1.","title":"Using the encoder"},{"location":"ambika/manual/#reference","text":"This section describes in details each page and parameter of Ambika.","title":"Reference"},{"location":"ambika/manual/#voice-allocation","text":"This page, accessible by the S6 switch, serves two purposes: Selecting the current part. Assigning voices to a part. Part 1|chan 1|low C-|high G9 voicecard| [1] [2] [3] 4 5 6 The first knob on the upper row is used to select a part. Notice how the LP1 ... LP6 LEDs indicate by a green light which part is active. All settings on all the other pages apply to the part indicated by this green light. chan (channel) sets the MIDI channel the active part responds to. Use omni if you want a part to respond to notes from all MIDI channels. Several parts can share the same MIDI channel. This is useful for controlling two patches from the same MIDI controller, in split or dual mode. low and high set the range of MIDI notes the active part responds to. This can be used to create keyboard splits: set the range of part 1 to C- .. B3 and the range of part 2 to C4 .. G9 ; and set both part 1 and part 2 to listen to the same MIDI channel. The result is that part 1 is played on the lower half of the keyboard and part 2 on the upper half. The lower part of the screen displays which voices are assigned to the active part. For example, in the display capture shown above, voices 1, 2 and 3 are assigned to part 1. Use the second knob on the lower row to assign/deassign voice 1 and 2 to the active part. Use the third and fourth knobs to assign/deassign voices 3/4 and voices 5/6. Note that you can assign to a part only voices which are not currently in use by another part. For example, when Ambika boots, voices 1, 3 and 5 are assigned to part 1 ; and voices 2, 4, 6 are assigned to part 2. You will notice that it is not possible to assign voices 2, 4, 6 to part 1 before having de-assigned them from part 2. It might not be convenient, but a voice can only be used by one part, so this constraint has to be enforced! Assigning/de-assigning a voice causes quite a bit of data shuffling between the processors running each voicecard, and this causes interruptions/reset notes. Don't do that during a live performance! Shortcut Hold the S1 switch while turning the encoder to change the active part. This works on any page!","title":"Voice allocation"},{"location":"ambika/manual/#synthesis","text":"Finally, let's get to the real thing! Each voice of Ambika is built according to the diagram drawn below. Obviously, it would be tedious to edit the settings of each individual voice... Instead, you edit parts and all the voices assigned to a part automatically inherit its settings! Here is a day (or rather a millisecond) in the life of a voice's signal: The oscillators 1 and 2 generate digital waveforms, which are digitally combined together using one of the following operations: mix, sync and mix, multiply (ring-modulation), xor, mix and fold, mix and bit-reduce. The sub-oscillator (whose pitch is linked to oscillator 1's) is added. The click generator generates a short transient/click at the beginning of the note. Note that the sub-oscillator and the click generator cannot be used at the same time. It's bassy-beefy or clicky, not both. The output of the modulator, the sub-oscillator/click-generator and a controllable amount of white noise are summed together. You can adjust the balance of each ingredient. A controllable amount of fuzzy overdrive is applied to the signal. The resulting signal is sample-reduced by a controllable amount. The resulting signal is converted to the analog domain by a 12-bit DAC and fed into an analog VCF and VCA. Each of these sound generation and modification modules have parameters which can be controlled by any of the modulation sources listed below. However, some connections are already \"hardwired\" (or rather \"softwired\" in the firmware): The oscillators' pitch always tracks the note played on the keyboard. However, this can be disabled by applying a negative modulation (amount: -63) from note to oscillator pitch. The filter cutoff frequency always tracks the note. Again, this can be disabled or attenuated by applying a negative modulation from note pitch to cutoff frequency. The rationale behind this choice is that most of the time, you want 1:1 tracking, so this frees up a slot in the modulation matrix for something more interesting! Lfo 2 and Envelope 2 are always connected to the filter, their modulation amount being controlled by dedicated parameters on the filter page. Besides this, it is up to you to route modulations to parameters. By default, the following routings are wired: Source Destination Amount Env 1 Oscillator 1 parameter 0 Env 1 Oscillator 2 parameter 0 Lfo 1 Oscillator 1 pitch 0 Lfo 1 Oscillator 2 pitch 0 Lfo 2 Oscillator 1 parameter 0 Lfo 2 Oscillator 2 parameter 0 Lfo 3 Mixer balance 0 Lfo 4 Filter cutoff 0 Seq 1 Filter cutoff 0 Seq 2 Mixer balance 0 Envelope 3 VCA gain 100% Velocity VCA gain 25% Pitch-bend Oscillator 1+2 pitch 2 semitones Lfo 4 Oscillator 1+2 fine pitch 2 semitones Let us now review the different synthesis parameters.","title":"Synthesis"},{"location":"ambika/manual/#digital-oscillators-s1","text":"Wave saw|para 0|rang 0|tune 0 wave squa|para 32|rang -12|tune 12 Each row displays the settings of an oscillator. The parameters are the following: wave (waveform) : Oscillator waveform family. Contrary to most synthesizers in which waveforms are static, the Ambika waveforms are dynamic and can be continously morphed -- this is why it is more correct to refer to \"waveform families\" instead of \"waveforms\". para (parameter) : Morphing parameter. This morphs the selected waveform into many variations. rang (range) : Oscillator pitch, from -36 semitones to 36 semitones (relative the pitch of the MIDI note played on the keyboard). tune (tune) : Oscillator fine tune, from -0.5 semitone (-64) to 0.5 semitone (+64). The following is a list of all the available waveform families, with some applications and a description of what adjusting the parameter setting actually does.","title":"Digital oscillators (S1)"},{"location":"ambika/manual/#none-silence","text":"This simply switches off the oscillator. Switching the oscillators off is useful if you want to use the sine-wave produced by the filter's self-oscillation as the sole sound source.","title":"none: silence"},{"location":"ambika/manual/#saw-sawtooth","text":"This waveform is perfect for basses and brass sounds. The parameter controls the waveshapping - when its value is increased, an increasingly large section of the waveform is shifted up. This waveform is band-limited. Thus, only a limited amount of aliasing artifacts will be heard when playing high-pitched notes.","title":"saw: sawtooth"},{"location":"ambika/manual/#square-square-wave","text":"The parameter controls the pulse-width. This waveform is perfect for simulating a clarinet, for basses, \"hollow\" sounds or Depeche Mode-like leads. This waveform is band-limited and only a limited amount of aliasing will be heard when playing high-pitched notes. You will observe that there is a slight difference in sound when moving the parameter from 0 to 1. To offer the best sound quality, the pulse width = 50% flavor is read straight from a wavetable at full sample rate, while the pulse width > 50% flavor is obtained from two dephased sawtooth waves, evaluated at half the sample rate. For bass sounds, for which aliasing is not going to be a problem, it is recommended to use pwm instead of square to get a beefier sound.","title":"square: square wave"},{"location":"ambika/manual/#triang-triangle-wave","text":"A pure waveform, which serves as a good basis for flute or soundchip-like leads. The parameter controls a kind of waveshapping, clipping the bottom of the waveform. This waveform is band-limited and will still sound fine above C5.","title":"triang: triangle wave"},{"location":"ambika/manual/#sine-sine-wave","text":"A pure and chaste sine wave lost her virginity. At some point she started listening to Nine Inch Nails.","title":"sine: sine wave"},{"location":"ambika/manual/#zsaw-phase-distortion-sawtooth-with-filter-sweep","text":"This waveform uses phase distortion to recreate a low-pass filtered sawtooth by progressively \"pinching\" the phase of a sine wave. The parameter controls the brightness of the sound: from a sine wave to a sawtooth, then from a sawtooth to a sawtooth gone through an ugly transistor amp. Good for dirty bass guitar sounds or clavinets.","title":"zsaw: phase-distortion sawtooth with filter sweep"},{"location":"ambika/manual/#lpzsaw-pkzsaw-bpzsaw-hpzsaw-resonant-filter-sweeps-on-a-sawtooth-wave","text":"This waveform family directly simulates the sound of a sawtooth wave processed by a low-pass, peaking, band-pass, or high-pass resonant filter. The parameter controls the cutoff frequency of the filter.","title":"lpzsaw, pkzsaw, bpzsaw, hpzsaw: resonant filter sweeps on a sawtooth wave."},{"location":"ambika/manual/#lpzpulse-pkzpulse-bpzpulse-hpzpulse-resonant-filter-sweeps-on-a-trapezoidal-wave","text":"This waveform family simulates the sound of a trapezoidal pulse wave processed by a low-pass, peaking, band-pass, or high-pass resonant filter. The parameter controls the cutoff frequency of the filter. pkzpulse is particularly good at recreating the dirty, saturated sound, of a sawtooth filtered by the least academic of the 2-pole analog filters.","title":"lpzpulse, pkzpulse, bpzpulse, hpzpulse: resonant filter sweeps on a trapezoidal wave."},{"location":"ambika/manual/#ztriangle-mystery","text":"This waveform vaguely evokes two hardsync'ed oscillators -- the parameter controlling their frequency ratio. It may or may not have been used in the Casio CZ-101.","title":"ztriangle: mystery..."},{"location":"ambika/manual/#pad-swarm-of-4-buzzing-detuned-sawtooth-waves","text":"As the name implies, this waveform made of four stacked sawtooth waves is useful for pads (when a copious amount of filtering is applied) or for buzzing trance leads. The parameter controls the amount of detuning between the four waves. Note that no bandlimiting is happening here, so this thing doesn't sound quite good above C5... but it's doing a perfect job in the bass range!","title":"pad: swarm of 4 buzzing detuned sawtooth waves"},{"location":"ambika/manual/#fm-minimal-2-operators-fm","text":"The parameter controls the modulation strength. This oscillator provides the base material for metallic sounds, bells, metallophones, or the next 386 DX hit. When the fm oscillator is selected, the range parameter plays a slightly different role than usual: instead of controlling the main pitch of the note, it controls the modulator frequency, and has a drastic impact on the timbre.","title":"fm: minimal 2-operators FM"},{"location":"ambika/manual/#8bits-bitwise-anarchy","text":"A palette of 8-bits sounding waveforms obtained by applying bitwise operations to a basic sawtooth wave (something now known as \"biscuiting\").","title":"8bits: bitwise anarchy"},{"location":"ambika/manual/#pwm-my-first-arduino-synth","text":"This waveform is a shamelessly naive square wave. The parameter controls the pulse-width. Contrary to square , this waveform stinks aliasing - but for notes below C2 it is not a real problem: it becomes much more aggressive and \"in your face\" than square .","title":"pwm: my first Arduino synth"},{"location":"ambika/manual/#noise-filtered-noise-generator","text":"The parameter controls the frequency of a simple 1-pole low-pass/high-pass filter in which is sent white noise. From 0 to 63, high-frequency content is progressively added. From 63 to 127, low-frequency content is progressively removed. Perfect as a raw material for percussions or sound effects.","title":"noise: filtered noise generator"},{"location":"ambika/manual/#vowel-low-tech-formant-synthesis","text":"Changing the parameter will sweep between different vocal-like sounds (14 vowels and 2 consonants).","title":"vowel: low-tech formant synthesis"},{"location":"ambika/manual/#wavetables","text":"The remaining waveform families are wavetables -- collection of single cycle waveforms, synthetic or sampled from real instruments. The parameter is used to smoothly \"scan\" the wavetable. For example, if a wavetable has 2 waveforms, parameter = 0 plays the first waveform ; parameter = 127 plays the second ; and parameter = 64 plays a mix of both. Wavetables can contain up to 16 waves. Wavetable name Description male Vocal formants, best played in the lowest octaves female Vocal formants, best played in the medium octaves choir Depeche mode-like vocal sound tampura Single cycle waveforms from an indian tampura note bowed Transwave extracted from a cello sample cello Transwave extracted from a less dramatic cello sample vibes Transwave extracted from a vibraphone sample slap Transwave extracted from a slap bass sample epiano Various single cycle waveforms extracted from electric piano samples organ Various combinations of sine waves, as produced by drawbars organs waves 16 basic waveforms, ready to be morphed into one another digital Abstract, PPG-wave style wavetable drone 1 Abstract, PPG-wave style wavetable drone 2 Abstract, PPG-wave style wavetable metallic Single cycle waveforms from classic D50 patches bell A Depeche mode classic wavquence Individually addresses each single cycle waveform The last wavetable contains all the single cycle waveforms in memory. It is not recommended to scan the parameter with LFOs or envelopes ; but rather to control this from the step sequencer or a random modulation (for the infamous a new sound at each note effect).","title":"Wavetables"},{"location":"ambika/manual/#mixer-s1","text":"Mix 32|nois 0|sub 0|wave squ1 xmod sum|amnt 31|fuzz 0|crsh 0 mix (osc mix) : Balance between oscillator 1 and 2. nois (noise) : Noise level. sub (sub osc) : Sub oscillator/transient generator level. wave (waveform) : Sub oscillator/transient generator waveform (see below). xmod (crossmod) : Cross-modulation method used to combine the sound of oscillators 1 and 2. amnt (amount) : Cross-modulation amount. fuzz : Amount of overdrive/fuzz applied to the signal. crsh (crush) : Amount of sample rate reduction (sometimes known as bitcrushing) applied to the signal. Here is a list of sub-oscillator/transient generator waveforms. The first 6 settings correspond to the sub-oscillator, which is an oscillator of its own, playing always one or two octave lower than the oscillator 1. The next settings disable the sub-oscillator and enable various flavors of transient generators, which will produce a short, clicky sound at the beginning of the note: sq1 square sub-oscillator, 1 octave below osc. 1 tr1 triangle sub-oscillator, 1 octave below osc. 1 pl1 25% pulse sub-oscillator, 1 octave below osc. 1 sq2 square sub-oscillator, 2 octaves below osc. 1 tr2 triangle sub-oscillator, 2 octaves below osc. 1 pl2 25% pulse sub-oscillator, 2 octaves below osc. 1 click produces a discrete click which can emphasizes the percussiveness of a note. glitch produces a sound similar to that of a skipping CD. blow is a burst of noise with a slow attack. metal adds a metallic sounding, high-pitched click. pop adds a low-pitched discontinuity, useful for spicing up a kick drum. The crossmod parameter controls how oscillator 1 and oscillator 2 are blended together. The different modulation modes are: Mode Description What does the xmod parameter controls? off Mixing: Oscillators 1 and 2 are mixed together nothing sync Mixing and sync: Oscillators 1 and 2 are mixed together, with oscillator 2's waveform phase-synced to oscillator 1's nothing ring Ring modulation: Oscillators 1 and 2 are mixed together, and simultaneously sent to a ring-modulator balance between the original mixed signal and the ring-modulated signal xor Xor modulation: Oscillators 1 and 2 are mixed together, and simultaneously sent to a digital XOR cross-modulator balance between the original mixed signal and the XOR signal fold Foldback distortion: Oscillators 1 and 2 are mixed together, and sent to a foldback distortion Amount of foldback distortion bits Bit reduction: Oscillators 1 and 2 are mixed together, and sent to a bit depth reducer Amount of quantization noise","title":"Mixer (S1)"},{"location":"ambika/manual/#filter-s2","text":"Freq 96|reso 0 mode lp env2 24|lfo2 0 freq (frequency) : Filter cutoff frequency. reso (resonance) : Filter resonance. mode (mode) : Filter mode (low-pass / band-pass / high-pass). Note that this setting takes effect only if the SVF filter board is installed. With the standard SMR-4 filter board, the filter is always a low-pass no matter the position of this setting! env2 (env2->vcf) : Modulation amount from envelope 2 to VCF. If you want to set a negative modulation amount, you can patch env2 to the VCF in the modulations section and ignore this parameter. lfo2 (lfo2->vcf) : Modulation amount from LFO 2 to VCF. Again, if you want to set a negative modulation amount, you can patch the LFO 2 to the VCF in the modulations section and ignore this parameter.","title":"Filter (S2)"},{"location":"ambika/manual/#envelopes-and-lfos-s3","text":"Ambika has three ADSR envelopes, three part LFOs and one voice LFO . A part LFO is shared among all voices assigned to a part and is used for creating global sweeps, tremolo effects, etc. A voice LFO is specific to each voice, and there will actually be a small amount of detuning/dephasing between them, for a richer sound. Consider the example of a guitarist playing a guitar through a tremolo pedal, and applying a vibrato on a particular note. If you want to program something similar, you will use the voice LFO for the vibrato (because it is slightly different and desynchronized for each individual note) ; and you will use a part LFO for the tremolo, since it uniformly affects all the notes. Another example: you have found the perfect combination of LFOs to create a trancey gated strings sound. The last thing you want is to have each note of the chord triggered at a slightly different instant due to difference in timings when the chord is played. You need a part LFO for the gating effect. A voice LFO is good for richness and randomness, a part LFO is good for sync'ing things up. As a result, only the voice LFO can be controlled in the modulation matrix (because it can be controlled by velocity, aftertouch, etc. -- all kind of things that might be different for each played note) ; and only the part LFOs can be synchronized to tempo. This part LFO vs voice LFO distinction sounds confusing, and there is actually little documentation about it. Most classic analog synthesizers do not have one LFO circuit per voice, so their behaviour is accurately simulated by the use of part LFOs . Some VAs, like the access Virus, use voice LFOs . On the Waldorf Blofeld, each LFO is a voice LFO by default and can be turned into a part LFO through the use of the sync setting. Lfo/eg 1|rate 24|wave tri|trig free attk 0|deca 40|sust 20|rele 60 lfo/eg : Selects the LFO / envelope generator to edit. The settings shown on the page are relative to the selected LFO / EG. If you are wondering if there is such thing as a \"filter envelope\" and \"VCA envelope\"... Yes, by default env2 is mapped to cutoff and env3 to the VCA ; but this can be changed in the modulation matrix by patching pranksters. rate : LFO rate. The first values (1/1 to 1/96) are note values relative to the global tempo (or to an external MIDI clock). For example, if set to 1/4, the LFO will play one cycle every quarter note. The other values are increasing frequencies, from 0.06 Hz (0) to 100 Hz (127). wave (waveform) : LFO waveform. A list of LFO waveforms is given below. trig (trigger) : LFO/envelope synchronization mode. free leaves the LFO free-running. env->lfo resets the phase of the LFO everytime a new note is played. lfo->env retriggers the corresponding envelope generator everytime the LFO completes a cycle. attk (attack) : Envelope attack time, from 1ms to 66s. deca (decay) : Envelope decay time (same times as for attack). sust (sustain) : Envelope sustain level. rele (release) : Envelope release time (same times as for attack). Here is a list of LFO waveforms: tri : Triangle. sqr : Square. s&h : Sample & hold (random value). ramp : Ascending ramp (use a negative modulation amount in the modulation matrix to get a descending ramp modulation). sine to stp2 : Wavetable LFOs. These LFOs are read from a wavetable containing many interesting waveshapes.","title":"Envelopes and LFOs (S3)"},{"location":"ambika/manual/#voice-lfo-s3","text":"rate 24|wave tri _ rate : LFO rate. The voice lfo cannot be synchronized to the tempo. The frequency ranges from 0.06 Hz (0) to 100 Hz (127). wave (waveform) : LFO waveform.","title":"Voice LFO (S3)"},{"location":"ambika/manual/#modulation-matrix-and-modifiers-s4","text":"Modul. 1|srce env1|dest prm1|amnt 0 modif. 1|in1 lfo1|in2 lfo2|oper off The upper part of this page allows the routing of up to 14 modulation sources to synthesis parameters. The first knob is used to select one of the 14 virtual \"modulation patchcords\", while the other knobs on the first row are respectively used to edit its source ( srce ), destination ( dest ), and the attenuation amount ( amnt ). For example, this line: Modul. 4|srce env3|dest vca|amnt 63 Indicates that the third envelope is routed to the VCA gain. The modulation sources are the following: env1 , env2 , env3 : ADSR envelopes. lfo1 , lfo2 , lfo3 : Part LFOs (bipolar). lfo4 : Voice LFO. mod1 , mod2 , mod3 , mod4 : Modifiers (see next section). seq1 , seq2 : Step sequences 1 & 2. arp : Arpeggiator gate pattern. velo : Note velocity. aftr : Note aftertouch. bend : Pitch-pend wheel (bipolar). mwhl : Modulation wheel. whl2 : Modulation wheel 2, Joystick negative Y axis or Breath controller. pdal : Expression pedal. note : MIDI note number (bipolar). gate : Keyboard gate (null when the key is released). nois : White noise sampled at 1kHz. random : Random value, updated every time a note is retriggered. [256]{style=\"text-align:center;\"} to [4]{style=\"text-align:center;\"} : Boring constant values. The modulation destinations are the following: prm1 , prm2 : Oscillator 1&2 parameters. osc1 , osc2 : Oscillator 1&2 pitch. \\~1+2 : Oscillator 1&2 coarse pitch. vibr : Oscillator 1&2 fine pitch. mix : Oscillator balance. xmod : Oscillators cross-modulation amount. This has no effect when the off or sync mixing modes are selected. nois : Noise amount. sub : Sub-oscillator amount. fuzz : Fuzz amount. crsh : Sample-rate reduction amount. freq : Filter cutoff. reso : Filter resonance. attk : Envelopes attack time. deca : Envelopes decay time. rele : Envelopes release time. lfo4 : Voice LFO rate. vca : VCA gain. One thing that requires a bit of clarification is the notion of bipolar modulation source. Let's take an example. We have a triangle LFO mapped to the filter cutoff, with a modulation amount of 30. If the cutoff is set to 80, the actual value of the cutoff will oscillate between 50 (80-30) and 110 (80+30). On the other hand, if we have an envelope mapped to the cutoff with a modulation amount of 20, the cutoff will go from 80 to 120 (80 + 2 * 20), then down to 80 after the release. This is something to remember if you want to do PWM for example. If you set the PWM modulation amount to 40, you also have to set the oscillator parameter value to 40, so it will oscillates between 40-40 = 0 and 40+40=80. Otherwise, it will spend half of the time stuck at 0. But this makes things nicer for vibrato, tremolo, wah-wah or growl effects! LFOs, pitch-bend and MIDI note number modulations are bipolar. If you are used to electronics/Modular speak, it is equivalent to say that the LFOs are always \"AC-coupled\" instead of \"DC-coupled\". Another thing worth noting is that the modulation amount of the last patch in the modulation matrix is always attenuated by the modulation wheel. Let us say that you have connected patch 14 from LFO 4 to the oscillators fine pitch (actually this is done by default in the init patch!): Modul. 14|srce lfo4|dest vibr|amnt 16 This modulation will be applied with an amount proportional to the mod-wheel position - by default it will not be active until you start moving the modulation wheel, and to get it at full strength, you will have to push the modulation wheel to the max. In the modular synth world, you would have obtained the same effect by patching the LFO at the signal input of a VCA, the joystick at the control input of the VCA, and routed the resulting signal to the exponential FM input of the VCO. Pheww! The lower page of the modulation/modifiers page allows the combination of up to 4 pairs of modulation sources to create new modulation signals. The first knob on the bottom row is used to select one of the 4 modulation modifiers, while the other knobs on the lower row are respectively used to edit the two inputs of the modulation modifier ( in1 and in2 ), and the operation ( oper ) to apply. modif. 1|in1 lfo1|in2 lfo2|oper prod In the example above, the modulation source mod 1 is defined as the product of lfo1 and lfo2 . The following operations are available: off no operation. add adds the values of the two modulation sources. prd computes the product of the two modulation sources. attn computes the product of a bipolar version of the first source, and the second source. max takes the maximum of the two sources. min takes the minimum of the two sources. xor computes the bitwise XOR of the two sources. greater or equal outputs a large value if source 1 is above soure 2, 0 otherwise. less or equal outputs a large value if source 1 is below soure 2, 0 otherwise. qtz outputs the value of in1 quantized into a number of levels defined by in2. For example, if you set a constant value (say = 4) as in2, the modulation source in1 will be quantized into 4 discrete steps, as if it was processed through a bit-reducer! This is useful for creating pseudo S&H effects. lag outputs the value of in1 filtered by a lowpass filter whose cutoff frequency is set by in2. For example, if you use a constant value (say = 4) as in2, the modulation source in1 will be strongly low-pass filtered. This is very useful for smoothing a square or S&H lfo!","title":"Modulation matrix and modifiers (S4)"},{"location":"ambika/manual/#keyboard-and-sequencing","text":"","title":"Keyboard and sequencing"},{"location":"ambika/manual/#keyboard-and-tuning-s5","text":"Volu 120|mode poly|lega off|port 0 octv 0|tune 0|sprd 0|raga equa volu (volume) : Part volume. Note that the volume attenuation is done by scaling the value of the VCA control signal - causing a potential loss of resolution in the shape of the VCA envelope. mode : Polyphony handling. When this is set to mono , all voices assigned to this part are simultaneously played in unison, and you cannot play chords (only the most recently played note is heard). When this is set to poly , the notes you play are dispatched to the voicecards. Obviously, the polyphony is limited by the number of voices assigned to the edited part! Finally, 2x unison works like the polyphony mode except that every time you play a note, it is played by 2 voices - this effectively divides the polyphony by two. lega (legato) : Legato mode on/off. This setting has an effect only in mono mode. This option specifies how the part will interpret overlapping notes. When legato is off, the envelope retriggers everytime a new note is played, and the portamento is always applied. When legato is on, the envelope retriggers only when the new note does not overlap with the previous one, and the portamento triggers only on overlapping notes. port (portamento) : Portamento time. This setting has an effect only in mono mode. octv (octave) : Octave shift. Use this to transpose a part by a given number of octaves. Note that if a note is playing when while this setting is changed, it won't be affected. tune : Part tuning. Changes the tuning of the part by +/- 1 semitones. sprd (spread) : Voice detune. Use this setting to introduce an artificial detuning between all the voices allocated to this part. This can be used to create very thick leads or basses in mono mode, or to add more depth to strings/pads sounds in poly mode. raga : Scale/keyboard mapping. The different scales/keyboard mappings are: Name Description equal Equal temperament just Just intonation (frequency ratios to C are rational numbers) pythagorean Pythagorean scale 1/4 eb E and B are 1/4 tone lower 1/4 e E is 1/4 tone lower 1/4 ea E and A are 1/4 tone lower bhaira ... rasia A bunch of ragas of the Maihar gharana . Note that it is not possible to play notes outside of the raga - if you attempt to do so, the previously played note will be retriggered. The suggested mode of operation is to find out which keys are active in the raga, and improvise with them!","title":"Keyboard and tuning (S5)"},{"location":"ambika/manual/#sequencer-and-arpeggiator-settings-s5","text":"Each part of Ambika has a sequencer / arpeggiator. The sequencer consists of: 2 step-sequences, up to 32-step long, which can be freely routed to any modulation source in the modulation matrix. 1 note pattern, up to 32-step long. All parts follow the same global clock, which can be set to a fixed BPM or synchronized to an external MIDI clock. However, since polyrythmy can be fun, each part can be synchronized to a different subdivision of the MIDI clock and use a different step-sequence / pattern length. 3 sequencing modes are available - they define how notes played on the keyboard are translated into the notes played by the voices: step seq : Only the step sequencers (modulation sources) are running. The arpeggiator and note pattern are disabled - thus only notes actually played on the keyboard are heard. arpeggio : The notes played on the keyboard are not directly heard, instead, they are arpeggiated. pattern : Holding a key triggers the note pattern programmed in the sequencer. The pattern is played at its original pitch if the held key is C4 (midi note #60). Otherwise, the pattern is transposed. A/sq step|dire up|rang 1|patt 1 grid 1/16|len1 16|len2 16|lenp 16 a/seq (arp/seq) : Arpeggiator/sequencer mode. dire (direction) : Arpeggiator direction. The available options are up, down, up and down, random, played (which follows the order in which the notes have been played on the keyboard) and chord (which retriggers the whole chord at each step). rang (range) : Arpeggiator direction. patt (pattern) : Arpeggiator rythmic pattern. grid : Step duration. The default setting, 1/16 (one sixteenth note or one semiquaver per step) corresponds to the default setting of Roland's x0x boxes. For programming a pattern in triplets, use 1/12 and set the pattern duration to 12 steps. You can also use this for programming SID-style rapid-fire arpeggios. len1 (seq1 len) : Length (in steps) of the first step sequence. len2 (seq2 len) : Length (in steps) of the second step sequence. lenp (patt len) : Length (in steps) of the note pattern. Let us now discuss the most devilish, confusing thing about Ambika sequencer: sequencer memory sharing. Ambika only has memory for 16-steps long patterns. Yet, the len1 , len2 , lenp lengths can go up to 32. How is it possible? Simply by reusing steps from one pattern into the other! For example, if you set the step sequence 1 length to 18, the last 2 steps of step sequence 1 and the first 2 steps of step sequence 2 will store the same value. If you set the step sequence 1 and 2 length to 32, the last 16 steps of step sequence 1 will be the first 2 steps of step sequence 2 and reciprocally. When you set the notes sequence length to 18, the first 4 steps of step sequence 1 will be scrambled with apparently random data from the note sequence. So remember: as soon as one of sequence 1 or sequence 2 exceeds 16 steps they will scramble each other ; and as soon as the note sequence exceeds 16 steps it will scramble the step sequences. Whether you will prudently avoid using the scrambled sequence or take creative advantage of this scrambling is up to you!","title":"Sequencer and arpeggiator settings (S5)"},{"location":"ambika/manual/#sequence-editor-s5","text":"This page shows the note pattern and the step sequences 1 & 2. | note |velocity |stepseq 1|stepseq 2 01|. C4 |. o100 |. 255 |. 0 The first column displays the step number. Use the encoder to scroll through the sequence. The second column displays the note number, editable by the first knob of the upper and lower rows. The third column displays the note velocity, editable by the second knob of the upper and lower rows. Turn the knob completely counter-clockwise to mute a step, and completely clockwise to enter a note at full velocity. Turn the knob to a middle position to enter a tie/slide. The fourth and fifth columns display the value of the step sequence 1 and 2, editable by the third and fourth knobs of the upper and lower rows. What about the dots shown in some columns? They indicate the start of the sequence. For example, if the note sequence is 16 steps long, but the step sequence 1 is only 5 steps long, you will see a dot on step 6, 11 and 15 to remind you that the step sequence 1 \"cycles\" over 5 steps only. Trivia: the longest non-repeating pattern you can build with Ambika is 20677 steps long (set sequence 1 to 23 steps ; sequence 2 to 29 steps ; and the note sequence to 31 steps). With a clock speed of 1/16 and a BPM of 86, the sequence would last for 1 hour!","title":"Sequence editor (S5)"},{"location":"ambika/manual/#multi-settings","text":"These settings are not related to a specific part. They are saved (along with each part's individual settings) in a multi.","title":"Multi settings"},{"location":"ambika/manual/#clock-settings-s6","text":"Bpm 120|groo swin|amnt 0|ltch 0 _ bpm is the master tempo, in beats per minute. Use ext to sync to an external MIDI clock source. groo (groove) : groove template. The options are swing (uneven distribution of pairs of 1/8th notes), shuffle (uneven distribution of pairs of 1/16th notes), push (push the beat), lag (sloppy drummer!), human (humanization) and monkey (humanization + shuffle). This setting only has an effect when amnt is set to a non-zero value. amnt (amount) : amount of groove to apply. ltch (latch) : clock latch release time. This parameter controls the number of beats during which the internal clock continues running after you have released all keys. This allows the internal arpeggiator or sequencer to \"keep counting\" for a while after you have released all keys from the keyboard. When this setting is set to 0 and the arpeggiator is on , every time you release the keys to play a new chord, the internal clock stops and the arpeggiator/sequencer is restarted. You might like this effect (many vintage synths work this way), but it might sound a bit strange to have the \"flow\" of the sequence broken at each chord change. When the clock latch is set to 1 beat, the \"flow\" of the clock and arpeggiator are preserved as long as your chord changes are spaced by less than 1 beat.","title":"Clock settings (S6)"},{"location":"ambika/manual/#performance-page-s7","text":"Para 0|freq 96|para 0|freq 96 env2 27|volu 120|env2 24|volu 120 This page allows 8 parameters from different pages and for different parts to be displayed together on the same page. Observe that when a parameter is edited, the part number part is shown on screen: pt 1 oscillator 1 |waveform saw wave squa|para 32|rang -12|tune 12 A particular quirk of this page is the specific function assigned to the encoder. Press it to simultaneously send a C4 note to all parts. Press it again to send a note off message to all parts. This allows Ambika to be used without a MIDI keyboard. While a note is being played through this mean, you can turn the encoder to transpose all parts up and down. To select the parameters/parts shown on the performance page, press S7 again to bring the customization page: performance page customization knob 1|part 1|oscillator 1 parameter Use the first knob to select the index of the knob you want to customize. Use the second knob to select a part number. Use the third and fourth knobs, or the encoder, to scroll through the list of parameters.","title":"Performance page (S7)"},{"location":"ambika/manual/#the-library","text":"Everything related to loading/saving patches, multi, etc. is done on this page. The data is stored on a SD card (SDHC cards are supported) formatted in FAT16 or FAT32 format, inserted at the back of Ambika. In case the SD card is incorrectly formatted, incorrectly inserted, or damaged, the following text will be displayed every time you try to display the library page: /!\\ SD card I/O error ok Press S8 to continue and try blowing on the SD card connectors. If the card is correctly inserted and formatted, the main library page will be displayed: pt 1 program .A000 junon | init|send|save|versions more|exit The first row displays the following information: pt 1 program is the current \"object\", that is to say the kind of thing you want to load/save from/to the memory card. In this case, you will be browsing the list of programs and they will be loaded into part 1. A000 indicates the bank and object number. Banks are identified by a letter from A to Z ; objects are identified by a number from 000 to 127. The dot before A000 indicates that the version in memory is different from the version stored on the card. junon is the object (here a program) name. The second row is a list of commands. Each command is associated with a switch. For example, S2 performs the init command, S3 the send command, and S8 the exit command. To quit the library page, you thus have to press S8 ( exit command).","title":"The library"},{"location":"ambika/manual/#selecting-an-object","text":"Press S1 to repeatedly cycle through the different types of items that can be loaded/written from/to the memory card: pt N patch will load/save all the sound synthesis settings, but not the sequencer/arpeggiator parameters of the Nth part. pt N sequence will load/save all the sequencer/arpeggiator settings of the Nth part. pt N program will load/save all the settings of the Nth part (synthesis, arpeggiator and sequencer). multi will load/save all the settings of all parts. Remember that you can hold S1 while turning the encoder to change the active part. Ambika can store 3328 (26 banks of 128) patches/sequences/programs/multis.","title":"Selecting an object"},{"location":"ambika/manual/#loading-programsmultissequencespatches","text":"Turn the encoder to move to the previous/next program. Remember that you can hold S8 while turning the encoder to scroll faster in the list. To change the current bank: Click the encoder. The bank letter starts blinking. Turn the encoder to select a bank. Click the encoder when you are done.","title":"Loading programs/multis/sequences/patches"},{"location":"ambika/manual/#reinitializing-programsmultissequencespatches","text":"Press S2 ( init command) to reinitialize or randomize the select object. This brings the following confirmation page: pt 1 program [ randomize ] yes | no Turn the encoder to select an action (randomize will replace all settings by random values; while initialize will replace all settings by the values they had at startup). Press S7 to confirm, or S8 to cancel the initialization.","title":"Reinitializing programs/multis/sequences/patches"},{"location":"ambika/manual/#dumping-programsmultissequencespatches-as-sysex","text":"Press S3 ( send command) on the library page to send the selected object on the MIDI output, encoded in SysEx messages. Note that programs are sent as 2 messages (1 block with synthesis settings and 1 block with part settings) ; and multi are sent as 13 messages ; so you need to set your SysEx Librarian program to receive many messages.","title":"Dumping programs/multis/sequences/patches as SysEx"},{"location":"ambika/manual/#saving-programsmultissequencespatches","text":"After having selected with S1 which object type you want to save (multi, program, etc.), press S4 ( save command). pt 1 program .A000 junon save|cancel Before saving a program/multi/sequence/patch, its bank letter, number and name must be set. Use the encoder to increment/decrement the value or letter at the cursor. To move the cursor, click the encoder, turn it to move the cursor, and click it again. When you are done, press S7 ( save command). If you want to cancel the operation, press S8 ( cancel command). A warning will be displayed in case the memory card is damaged, full, incorrectly formatted, or just needs a little blow on its connectors. Note that when a patch is overwritten, a backup copy of the previous version is kept. You can use a SD-card reader on your personal computer to remove the latest version of the patch and restore the backup copy (Sorry... Ambika does not come with its own version of Norton Commander).","title":"Saving programs/multis/sequences/patches"},{"location":"ambika/manual/#clipboard-and-version-manager","text":"Press S5 ( versions command) to bring the version manager. pt 1 program version 0 copy|swap|paste << | >> |keep|exit The following commands are available for the select object ( part 1 program in the example given above): copy ( S1 ) copies the current item to a clipboard . You can use it to temporarily hold in memory a version of a patch, or to copy a patch from one part to another. swap ( S2 ) exchanges the content of the clipboard with the current item. This allows you to quickly go back and forth between two versions of a patch. paste ( S3 ) replaces the current item by the content of the clipboard . Note that there are actually 4 clipboards, one for patches, one for multis, one for programs and one for sequences. << ( S5 ) reverts the current item to its previous content. This works like the undo function available on most computer software. For example, if you create an amazing patch, and then load by mistake a preset on top of it, you can use this function to go back in time and retrieve your creation. >> ( S6 ) works like a redo command. You can use it to cancel an undo command and move forwards in the versions list. keep ( S7 ) saves the state of the current item on the undo stack, so that you can get back to it at a later point in time. exit ( S8 ) exits the version manager.","title":"Clipboard and version manager."},{"location":"ambika/manual/#system-preferences","text":"From the library page: pt 1 program .A000 junon | init|send|save|versions more|exit Press S7 to display more commands: pt 1 program .A000 junon pref|>ini|about more|exit Press S1 to bring the system preferences page: Inpt ....|outp thru help on|snap off|leds on|auto on The following system preferences can be edited: inpt (inpt filtr) : Input filter. By default, all MIDI messages are accepted by Ambika (....). Any combination of SysEx (...s), Program changes (..p.), NRPN (.n..) or Patch editing control changes (c...) can be disabled. With all filters active (cnps) Ambika only responds to basic MIDI messages. outp (outp mode) : MIDI output mode. The following output modes are available: thru (the MIDI output forwards all incoming messages, and only those), sequencer (the MIDI output sends the note generated by the arpeggiator and sequencer), controllr (the MIDI output sends NRPN messages reproducing all editing operations performed on Ambika), full (the MIDI output sends all incoming messages along with NRPN reproducing all editing operations). help : Whether the long name of the edited parameter should be displayed. Once you are familiar with Ambika, you might find it more convenient to have the help text never shown. snap : Enables potentiometers' \"snap\" mode. This mode makes it less likely to accidentally change a parameter value when switching pages. Suppose you are tweaking the filter resonance with P2 -- you rotate it all the way down to 0. Then you switch to the oscillators page to adjust the oscillator 1 parameter. If the current value of the parameter is set to 64, you'll hear a discontinuity, since the value of the parameter will instantly jump to 0 or 1 when you start touching the pot. When snap is on, things will happen differently: rotating the pot will have no effect until the position of the pot actually reflects the current value of the parameter. After that, the parameter value will track the potentiometer's position. Another way to explain it: when snap is on you have to move the pot to \"grab\" the current parameter value before the parameter is modified. leds : Disables the voicecard LEDs, in case you consider that synths should not be used as Diwali decorations. Note that you need to reboot the unit for this setting to take effect! auto (auto backup) : Enables or disables the backup copy created on the memory card whenever an item is overwritten. Disabling it will make saving faster. It is also possible to save the current multi so that it is reloaded every time Ambika starts up. This is very useful for saving your MIDI settings and favorite split/voice allocation parameters! pt 1 program .A000 junon pref|>ini|about more|exit On this library page, press S2 to select the [ini]{style=\"text-align:right;\"} command. (?) use current multi as default? yes | no Press S7 to confirm. The unit will freeze for a few seconds to write the current multi to its non-volatile memory.","title":"System preferences"},{"location":"ambika/manual/#firmware-update","text":"","title":"Firmware update"},{"location":"ambika/manual/#firmware-update-through-the-sd-card","text":"From the library page: pt 1 program .A000 junon | init|send|save|versions more|exit Press S7 to display more commands: pt 1 program .A000 junon pref|>ini|about more|exit Press S3 to bring the about page: ambika v1.0|port 1 device 1 v1.0 upgrade |upgrade exit The first half of the screen displays the version of the OS running on the motherboard. If a firmware update file named AMBIKA.BIN is present on the memory-card, pressing S1 ( upgrade command) will load it to upgrade the main processor. Ambika contains seven ports to which devices are attached. The first 6 ports (port 1 to port 6) are used for connecting the voicecards ; the last port (port 7) is used for connecting additional controllers or I/O connectors. The second half of the screen on the about page shows the device type and OS version number for a selected port. Use the encoder to scroll through the ports. When no device is attached to a port (or when the device firmware has been corrupted), a '?' is shown in place of the device type. If a firmware update file named VOICE$.BIN (where \\$ is the port number) is present on the memory card, pressing S4 (upgrade command) will load it to upgrade the voicecard processor.","title":"Firmware update through the SD-card"},{"location":"ambika/manual/#emergency-firmware-update","text":"If for some reason Ambika is \"bricked\" -- this can happen if the SD card is damaged, if the firmware update file has been incorrectly copied to the card, or if the power has been disconnected during the firmware upgrade procedure -- there is still a way of initiating a firmware update: Press S8 while powering up Ambika to force the firmware to be reloaded from the SD-card. During loading, the unit displays the number of bytes loaded (the firmware takes up to 60kbytes): SD update... 4096 Press S7 while powering up Ambika to put the unit in MIDI firmware upgrade mode. In this mode, the unit is waiting for the firmware to be sent as SysEx blocks over MIDI. A .syx or .mid file with the latest data is available on the Mutable Instruments website. While receiving blocks of MIDI data, the unit displays the number of bytes loaded (the firmware takes up to 60kbytes): Syx update... 4096 If you want to use a dedicated SysEx transfer tool, we recommend Elektron's C6 tool available for both Windows and OS X, configured with a 250ms delay between blocks.","title":"Emergency firmware update"},{"location":"ambika/manual/#resetting-the-unit-to-factory-settings","text":"Most of the data held by Ambika is stored on the SD card, with one exception: the boot configuration , which is stored on the main processor's non-volatile memory. The boot configuration is the set of settings loaded when the unit is powered on. To restore the default factory boot configuration , keep the S1 key while powering the unit. The unit will freeze for a few seconds to retrieve and write the factory defaults.","title":"Resetting the unit to factory settings"},{"location":"ambika/manual/#dirty-technical-details","text":"","title":"Dirty technical details"},{"location":"ambika/manual/#midi-implementation","text":"","title":"MIDI implementation"},{"location":"ambika/manual/#basics","text":"A MIDI implementation chart is available here .","title":"Basics"},{"location":"ambika/manual/#program-changes","text":"Program change messages are used to load either: a program (that is to say sound synthesis settings + keyboard mapping/sequencer parameters). All parts set to listen to the channel on which the program change message is sent will load the program. a multi . In this case, all parts are affected. The MIDI banks 0-25 are used to load program banks A to Z . The MIDI banks 26-51 are used to load multi banks A to Z . For example, to load the multi 002 in the B bank, send a control change 0 (bank select) with a value of 27 to select multi bank B , and a program change 2. To load the program 120 in the D bank, send a control change 0 (bank select) with a value of 3, and a program change 120.","title":"Program changes"},{"location":"ambika/manual/#external-clock-reception","text":"Keep in mind that the tempo must be set to ext to receive an external MIDI clock! Otherwise Ambika continues running with its own internal clock.","title":"External clock reception"},{"location":"ambika/manual/#control-changes","text":"The Modulation Wheel, Breath Controller and Foot Pedal CCs ; along with aftertouch messages might not affect the sound unless they are patched to a modulation destination in the modulation matrix. If you want these sources to control the intensity of a LFO, it is recommended to do it through a modifier. Here is an example of patching: Modul. 8|srce mod1|dest mix|amnt 63 modif. 1|in1 lfo2|in2 whl2|oper attn Mod1 is defined as \"LFO2 attenuated by the modulation wheel 2\", and this modulation is applied to the oscillators balance. Please refer to the CC page of the MIDI implementation chart given above to see the list of synthesis parameters controllable by CC. Editing a synthesis parameter by CC is fool-proof: values between 0 and 127 are translated into the full range of the parameter; so that 0 always means the minimum value taken by the parameter, and 127 its maximum value. This might cause a resolution loss for parameters with a wide range above 127.","title":"Control changes"},{"location":"ambika/manual/#nrpn-patch-editing","text":"NRPN messages can be used to directly write into the Patch and PartData data structures. The NRPN number indicates the address at which a value must be written ; and the data entry / data increment messages are used to set the value. Observe that you need to send both a Data Entry MSB and a Data Entry LSB message to send a signed value, or a value above 127. Signed values are represented in 2's complement. NRPN range Mapped to Data structure declaration 0 .. 111 Patch data structure, offsets 0 .. 111 struct Patch 112 .. 192 Part data structure, offsets 0 .. 80 struct PartData Here is an example: you want to modify the part tuning to -13. The tuning byte is at offset 2 in the Part data structure, so its NRPN number is 114. In 2's complement, the value ~~13 is represented by 128~~ 13 = 115. Thus, the NPRN that needs to be sent is: 176 99 0 (NRPN MSB set to 0)` 176 98 114 (NRPN LSB set to 114)` 176 6 1 (Data Entry MSB set to 1 -- value above 127 or negative)` 176 38 115 (Data Entry LSB set to 115, because 115 - 128 = -13)`","title":"NRPN patch editing"},{"location":"ambika/manual/#sysex","text":"Ambika can receive and transmit settings in system exclusive format. The messages all share the same format: 0xf0 (SysEx) 0x00 0x21 0x02 (Mutable Instruments Manufaturer ID) 0x00 0x04 (Product ID for Ambika) Command Argument Payload Checksum 0xf7 (End of SysEx) Command indicates what the receiver should do with the data in the payload block, and argument is a byte that might contain an additional piece of information about what to do with the data. Payload is a sequence of bytes in nibblized form. For example, the sequence 0x80 0x56 0x13 is transmitted as 0x08 0x00 0x05 0x06 0x01 0x03 . Checksum is equal to the nibblized-sum, modulo 256, of the bytes. In the example above, the checksum is equal to 0x80 + 0x56 + 0x13 = 0xe9 and is transmitted as 0x0e 0x09 .","title":"SysEx"},{"location":"ambika/manual/#data-structure-dump","text":"When transfering patch/sequence/program/multi data to Ambika, command indicates the data structure being sent and argument indicates the part number the data must be loaded into. The following table summarizes the different payload types. Command Argument Affected data structure Payload size 1 Part number (0 for current part) Patch 112 bytes 2 Part number (0 for current part) PartData::sequence_data 72 bytes 4 Part number (0 for current part) PartData 84 bytes 5 Always 0 MultiData 56 bytes","title":"Data structure dump"},{"location":"ambika/manual/#data-structure-request","text":"Use this command to request one or several data blocks from Ambika. Command Argument Reply 17 Part number (0 for current part) Patch bytes for selected part 18 Part number (0 for current part) Sequencer bytes for selected part 19 Part number (0 for current part) Patch bytes + PartData bytes for selected part 20 Part number (0 for current part) PartData bytes for selected part 21 Always 0 MultiData bytes + Patch Bytes and PartData bytes for the 6 parts","title":"Data structure request"},{"location":"ambika/manual/#random-memory-read-peek","text":"Use this command to request the contents of an arbitrary block of RAM, up to 32 bytes long. Command is equal to 0x1f (31). Argument is equal to the size of the requested block. The two bytes of payload indicate the address to read (16-bit, little endian address). For example, to retrieve the 4 bytes at addresses 0x3ac .. 0x3b0, the sysex string would be: 0xf0 (SysEx) 0x00 0x21 0x02 (Mutable Instruments Manufacturer ID) 0x00 0x04 (Product ID for Ambika) 0x1f (PEEK command) 0x04 (Number of bytes to retrieve) 0x0a 0x0c (LSB of the address, here, 0xac) 0x00 0x03 (MSB of the address, here 0x03) 0x0a 0x0f (Checksum) 0xf7 (End of SysEx) 0x1f 04 0a 0c 00 03 0a 0f f7@","title":"Random memory read (PEEK)"},{"location":"ambika/manual/#random-memory-write-poke","text":"Use this command to transfer arbitrary data into Ambika's RAM. Command is equal to 0x0f (15). Argument is equal to the size of the block to transfer. The two first bytes of payload indicate the address to write to (16-bit, little endian address). The following bytes of payload contain the data. With great power comes great responsibility - this feature has the potential to create some damage that would require a factory reset! Developers can use the avr-nm tool to get a memory map and find out which datastructures are located at which addresses. For example: avr-nm build/ambika_controller/ambika_controller.elf -C -n . Addresses in RAM are prefixed by 0080. Mutable Instruments cannot guarantee that these addresses won't be subject to changes from one firmware version to the other.","title":"Random memory write (POKE)"},{"location":"ambika/manual/#memory-card-storage","text":"","title":"Memory card storage"},{"location":"ambika/manual/#filesystem-layout","text":"The Ambika firmware supports both SD and SDHC memory cards, formatted with FAT16 and FAT32 filesystems. Memory cards with long file names are not supported. Congrats to ChaN for his amazing FAT library!","title":"Filesystem layout"},{"location":"ambika/manual/#firmware-update-files","text":"/ AMBIKA.BIN Firmware update for motherboard VOICE1.BIN Firmware update for voicecard 1 ... VOICE6.BIN Firmware update for voicecard 6","title":"Firmware update files"},{"location":"ambika/manual/#patches-programs-and-sequences","text":"/PATCH /BANK /A /000.PAT Patch 000 in bank A /000.PA~ Backup version of Patch 000 in bank A ... /127.PAT Patch 127 in bank A /B /000.PAT Patch 000 in bank B ... /Z /127.PAT Patch 127 in bank Z /CLIPBRD /CLIPBRD.PAT Contents of patch clipboard /CLIPBRD.PA~ Previous contents of patch clipboard /HISTORY /0 /000.PAT Undo/redo sequence of part 1's patch /001.PAT Undo/redo sequence of part 1's patch ... /5 /000.PAT Undo/redo sequence of part 6's patch ... For programs and sequences, the directories are PROGRAM and SEQUENCE , and the file extensions are PRO and SEQ .","title":"Patches, programs and sequences"},{"location":"ambika/manual/#multis","text":"/MULTI /BANK /A /000.MUL Multi 000 in bank A /000.MU~ Backup version of Multi 000 in bank A ... /127.MUL Multi 127 in bank A /B /000.MUL Multi 000 in bank B ... /Z /127.MUL Multi 127 in bank Z /CLIPBRD /CLIPBRD.MUL Contents of multi clipboard /CLIPBRD.MU~ Previous contents of multi clipboard /HISTORY /000.MUL Undo/redo sequence of multis /001.MUL Undo/redo sequence of multis ...","title":"Multis"},{"location":"ambika/manual/#file-format","text":"All files are stored in RIFF format. The first 4 bytes of the file is the 'RIFF' string. The next 4 bytes are the total size of the file in bytes, little endian format. The next 4 bytes is the 'MBKS' string. This is followed by one or many chunks. Each chunk consists of a 4 chars identifier, a 32-bit integer indicating the size N of the \"payload\" data, and N bytes of \"payload\" data. Two types of chunk are present in a file: The name chunk is always 16 bytes long and contains the name of the object (multi, patch, program...) stored in the file. The 16th byte must be a null character ; and the name must be padded with spaces. The obj chunk contains data that will be copied into one of Ambika's internal data structures. It consists of: A byte indicating the data structure (1: Patch, 2: PartData.sequence_data, 4: MultiData, 5: PartData). A byte indicating the part number the data must be loaded into (0: current part or global, 1: part 1, etc.) 2 null bytes. The actual data.","title":"File format"},{"location":"ambika/mechanical/","text":"Bill of materials All the mechanical parts described in this section are listed here . Note that the kits come with custom 40mm spacers, which are hard to find - you can obtain the same height by stacking together a 20mm MF spacer and a 20mm FF spacer. Motherboard A few elements are directly screwed onto the motherboard: The large heatsink for the 7805 regulator is kept in place with one 6mm M3 screw and a M3 nut. Screws are not needed for the two other heatsinks which are directly clipped onto the 7908 and LM2940-8.0 regulators. The LCD module is held by four 10mm M3 screws, and 8 M3 nuts. Voicecard / motherboard assembly A 12mm M3 female/female spacer is inserted between the motherboard and the first layer of voicecards. A 12mm M3 female/male spacer is inserted between the two layers of voicecards. Case assembly Note that the voicecards are \"hanging\" from the motherboard -- they are not attached to the case. The top panel of the case is attached to the motherboard through four 10mm female/male M3 spacers. The bottom panel of the case is attached to the motherboard through twelve 40mm female/female M3 spacers. Since this is a rather unusual size, this height can be achieved with a 20mm male/female spacer and a 20mm female/female spacer.","title":"Mechanical assembly"},{"location":"ambika/mechanical/#bill-of-materials","text":"All the mechanical parts described in this section are listed here . Note that the kits come with custom 40mm spacers, which are hard to find - you can obtain the same height by stacking together a 20mm MF spacer and a 20mm FF spacer.","title":"Bill of materials"},{"location":"ambika/mechanical/#motherboard","text":"A few elements are directly screwed onto the motherboard: The large heatsink for the 7805 regulator is kept in place with one 6mm M3 screw and a M3 nut. Screws are not needed for the two other heatsinks which are directly clipped onto the 7908 and LM2940-8.0 regulators. The LCD module is held by four 10mm M3 screws, and 8 M3 nuts.","title":"Motherboard"},{"location":"ambika/mechanical/#voicecard-motherboard-assembly","text":"A 12mm M3 female/female spacer is inserted between the motherboard and the first layer of voicecards. A 12mm M3 female/male spacer is inserted between the two layers of voicecards.","title":"Voicecard / motherboard assembly"},{"location":"ambika/mechanical/#case-assembly","text":"Note that the voicecards are \"hanging\" from the motherboard -- they are not attached to the case. The top panel of the case is attached to the motherboard through four 10mm female/male M3 spacers. The bottom panel of the case is attached to the motherboard through twelve 40mm female/female M3 spacers. Since this is a rather unusual size, this height can be achieved with a 20mm male/female spacer and a 20mm female/female spacer.","title":"Case assembly"},{"location":"ambika/mobo/","text":"The motherboard supports up to 6 voicecards, and contains everything not related to sound generation: power supply, MIDI interface, audio outputs, SD card storage, user interface and the main processor. It is strongly advised to start the assembly with the motherboard. Schematics and PCB The schematics in PDF format are available here . You can find the Eagle files for this board in the source code hosted on github . If you need a reference during soldering, you can download this printout of the bottom and top sides of the board. Bill of materials Bill of materials . Some friendly notes for the self-sourcing crowd: The resistance of the potentiometer adjusting the output volume does not matter much as long as you connect Ambika to an audio interface, mixer, amp (anything with a reasonably high input impedance). You can even bypass it. Given the lead spacing and height constraint, there isn't much choice for the big electrolytics. Check the dimensions carefully when ordering from an unlisted source. C12 is not needed for now - it might be needed if additional digital peripherals/extensions drawing a lot of current on the +5V rail are added. Do not attempt to use a 7808 instead of a LM2940-8.0. Be extremely careful in your choice of LCD module. Some of them won't fit in the cutout in the PCB, so you might have to file the PCB to get them through ; or solder them above the PCB. Heatsinks are absolutely necessary! The part from digikey (HS336-ND) or Mouser (567-265-118ABH-22) has two \"legs\" that need to be cut. The 2-color LED from Mouser (604-WP937GYW) has to be mounted backwards because the Y and G LEDs are oriented differently. The 2-color LED from Reichelt is not green & yellow, but red & yellow. Assembly instructions Some equipment you'll need: Soldering iron + solder (nothing fancy, a 15 or 20W will do). Cutters. We assume you know soldering. If you don't, look first at this tutorial . DISCLAIMER: We are not responsible for anything wrong (including electric shocks, malfunctions, fires, accidents involving a soldering iron) that might happen during the assembly of the kit. Everything you do while assembling the kit is at your own risks. Resistors Resistors are not polarized, though it is a good idea to align them as on the pictures, to make your boards more \"readable\" to other people who might have to look at them. 3x 220R (red, red, black, black) and 1x 10k (brown, black, black, red) resistor for the MIDI in/out 7x 470R (yellow, purple, black, black) for output protection of the audio out op-amps 1x 10k (brown, black, black, red) or lower (down to 4.7k) 2x 100k (brown, black, black, orange) Note the bridge done with the leg of a resistor on the resistor labelled 0R. This is because the LCD module provided by Mutable Instruments does not need a current limiting resistor for its backlight. However, if your LCD module comes from Optrex (green on black, with a white frame), you need to solder a 100 ohm resistor there - otherwise the internal backlight LED of the module will be damaged. The 10k resistor just above the resistor network RN1 determines the gain of the final mixing stage. A value of 10k might cause clipping if the level of all voicecards is set to the maximum value and if all 6 voicecards are playing at the same time. To prevent this, a lower value of 6.8k or 4.7k is recommended. You can keep 10k if you do not plan to install all 6 voicecards in your Ambika. Unless you intend to solder a main on/off switch, bridge the pads labelled SW. Add a 10k resistor (brown, black, black, red) near the ATMega (it pulls up the RST line of the MCU). Add the 20 MHz crystal. \\ Add 15x 470R resistors (yellow, purple, black, black). They are used for limiting the current flowing through the LEDs. Lower values might increase the brightness of the LEDs, at the risk of damaging them. \\ Add the 10k resistor networks. The 9 pins one pulls up the switches; the 7 pins one is used for mixing the voicecards signals. The dot on the resistor network must match the 1 marking on the board. Check the photos. Add the 5k adjustable resistor used for LCD contrast adjustment (the photo shows that it is called R47, but it has been renamed R36 in later revisions of the board). Diodes The polarity of the diode is indicated by the ring (black on the 1N4148); white on the 1N4004 and 1N5819. Make sure that it matches the ring on the symbol silkscreened on the PCB. The 1N4004 is somehow overkill because Ambika does not use high-voltages - you might find a 1N4001 instead with your kit. Add 1x 1N4148 (MIDI input protection) Add 2x 1N4004s (or 1N4001s) - they rectify the input AC voltage. \\ Add 3x 1N4004 (or 1N4001) and 3x 1N5819. These diodes protect the regulators from weird things that can happen during the power on/off phases. Ceramic capacitors Ceramic capacitors (the yellow \"drops\") are not polarized. Add 1x 100pF (labelled 101) and 1x 18pF (labelled 180) capacitors. They limit the bandwidth of the op-amps and keep them stable. The TL072s don't strictly need them though. Note that 22pF capacitors (220) can be used without problem in place of 18pF. Add 2x 18pF (labelled 180) capacitors. Note that 22pF capacitors (220) can be used without problem in place of 18pF. \\ Add all the bypass 100nF capacitors (labelled 104). ICs and sockets \\ Add the DIP40, 2xDIP16 and 2x DIP8 sockets for the ATMega644p, 4050, 74hc138, 6N138 and the TL072. Some logic ICs on the top of the board are not socketed. Solder the 2x 74hc595 (shift registers for the LEDs) ; and 1x 74hc165 (shift register for reading the 8 switches). \\ Power supply Be very careful about the polarity of the electrolytic capacitors . When incorrectly polarized, they can pop and/or poop. The long lead of the capacitor indicates the positive lead, marked (+) on the PCB. A white strip on the edge of the capacitor indicates its negative lead. Add the MCP1700 3.3V regulator and the 100\u00b5F capacitor adjacent to it. I used here a short capacitor but the one that comes with the kit might be taller. Add the power connector - add enough solder to get a \"lake\" of solder forming inside the solder pad. Solder only one pin of the connector, adjust its position while keeping the solder joint hot, then solder the other pins. Add the 1uF film capacitor. Note that it is not polarized. Add the 3 regulators. The 7908 and LM2940-8.0 have a small heatsink attached to them. Insert the part into the heatsink. You might have to bend some of the metal wings to make it fit to the regulator. The 7805 gets very hot and needs a very big heatsink. Use a 6mm M3 screw and a nut to keep the heatsink in place, and make sure that the metal tab of the 7805 is touching the heatsink. Check that the heatsink is not shorting the three leads of the 7805. Add the two big capacitors (2200\u00b5F and 4700\u00b5F) used in the rectifier. Check and double-check their polarity. Add the 3x 100\u00b5F capacitors stabilizing the regulators. Connectors Add the SD card connector. This is fortunately the only surface-mount soldering you will have to do here. A friendly note: it is not a big deal if you mess up the 3 smaller pins on the right. They are not used on Ambika. Add the 2x MIDI connectors and all the voicecard connectors (6x 1x6 female headers). If you intend to hack the firmware and send your own code to the motherboard, add a 2x3 male connector for an AVR ISP programmer. Add 7x audio connectors. LCD module and LEDs Solder the 2x8 connector to the top of the LCD module. Insert the LCD module through the board, and add 2x nuts + 1x 10mm screw on each corner to keep it in place. Solder the LCD module to the PCB. \\ Add the 15 LEDs. The LED symbol printed on the PCB has a round edge and a flat edge. The shortest lead of the LED goes on the same side as the flat edge ; and the long lead is on the same side as the round edge. Note that soldering a LED backwards will make it shine with the wrong color. Controls Add the 8x 10k linear pots, the encoder, and the 8x switches. Add the 100k audio taper pot ; or bridge its middle and right pins if you think this pot is breaking some symmetry... Getting ready for voicecards \\ Add 12x male/female spacers (with a 6mm M3 screw on the other side of the board) to welcome the voicecards. Hooray! We're done! Testing Power supply testing For now, do not insert any IC Before powering Ambika, check that there is no short between one of the colored points and ground ; and no short between any pair of those points. Plug the +9V AC wall transformer. Check that the voltages are: +5V on the green point +3.3V on the yellow point +8V on the red point -8V on the blue point You can now power off the unit, and safely insert the 6N137, the TL072, the 4050, the 74hc138 and the ATMega644p. LCD adjustment and UI test Power the unit back on. LED9 should be lit in green. The first LED of the part indicator (block of 6) should be lit in green. Adjust the LCD contrast with the R36 trimmer. Press the first switch to go to the oscillators page and test that the 8 knobs are modifying values. Click the encoder and turn it left/right to check that it modifies values. Press the 8 switches one by one and check that all pages are reached, with the corresponding LED lighting up. Insert a FAT32 formatted SD card with the contents of the following archive . Press the last switch. You should be able to load presets from the card (you should see A000 Junon). If there is a problem with the SD card circuitry, an error message is displayed. If the card is simply blank, (empty) is shown in place of the preset name. Connect a MIDI source to the MIDI in. A note icon should be displayed in the top left of the screen whenever you play a note. Different symbols are shown when the pitch bend lever or the modulation wheels are touched. A first voicecard! Never attempt to connect a voicecard while the motherboard is powered on. Make sure that spacers are present before stacking voicecards - you don't want the bottom of the voicecard to touch any bit of circuitry below it. Make sure that the two layer jumpers are set to A if the voicecard is stacked directly on top of the motherboard ; or to B if the voicecard is stacked on top of another voicecard. Connect your first voicecard to Port 1 and power Ambika on. The orange LED on the voicecard should light up - indicating that it receives data from the motherboard. During tests, it is recommended to temporarily set the first part to mono - this way, whatever you play, the first voicecard will always receive the note. To do so, go to the keyboard and tuning page (by pressing S5), and change the second setting to mono : Volu 120|mode mono|lega off|port 0 octv 0|tune 0|sprd 0|raga equa Play some notes and check that a green LED lights up on the voicecard every time it receives a note. Check the mix audio output and the first individual out. License This circuit and PCB layout is made available under a cc-by-sa-3.0 license. Kudos Todd Bailey, Neil Johnson and Yves Usson for useful board layout reviews! Releases v0.8 Original release.","title":"Motherboard"},{"location":"ambika/mobo/#schematics-and-pcb","text":"The schematics in PDF format are available here . You can find the Eagle files for this board in the source code hosted on github . If you need a reference during soldering, you can download this printout of the bottom and top sides of the board.","title":"Schematics and PCB"},{"location":"ambika/mobo/#bill-of-materials","text":"Bill of materials . Some friendly notes for the self-sourcing crowd: The resistance of the potentiometer adjusting the output volume does not matter much as long as you connect Ambika to an audio interface, mixer, amp (anything with a reasonably high input impedance). You can even bypass it. Given the lead spacing and height constraint, there isn't much choice for the big electrolytics. Check the dimensions carefully when ordering from an unlisted source. C12 is not needed for now - it might be needed if additional digital peripherals/extensions drawing a lot of current on the +5V rail are added. Do not attempt to use a 7808 instead of a LM2940-8.0. Be extremely careful in your choice of LCD module. Some of them won't fit in the cutout in the PCB, so you might have to file the PCB to get them through ; or solder them above the PCB. Heatsinks are absolutely necessary! The part from digikey (HS336-ND) or Mouser (567-265-118ABH-22) has two \"legs\" that need to be cut. The 2-color LED from Mouser (604-WP937GYW) has to be mounted backwards because the Y and G LEDs are oriented differently. The 2-color LED from Reichelt is not green & yellow, but red & yellow.","title":"Bill of materials"},{"location":"ambika/mobo/#assembly-instructions","text":"Some equipment you'll need: Soldering iron + solder (nothing fancy, a 15 or 20W will do). Cutters. We assume you know soldering. If you don't, look first at this tutorial . DISCLAIMER: We are not responsible for anything wrong (including electric shocks, malfunctions, fires, accidents involving a soldering iron) that might happen during the assembly of the kit. Everything you do while assembling the kit is at your own risks.","title":"Assembly instructions"},{"location":"ambika/mobo/#resistors","text":"Resistors are not polarized, though it is a good idea to align them as on the pictures, to make your boards more \"readable\" to other people who might have to look at them. 3x 220R (red, red, black, black) and 1x 10k (brown, black, black, red) resistor for the MIDI in/out 7x 470R (yellow, purple, black, black) for output protection of the audio out op-amps 1x 10k (brown, black, black, red) or lower (down to 4.7k) 2x 100k (brown, black, black, orange) Note the bridge done with the leg of a resistor on the resistor labelled 0R. This is because the LCD module provided by Mutable Instruments does not need a current limiting resistor for its backlight. However, if your LCD module comes from Optrex (green on black, with a white frame), you need to solder a 100 ohm resistor there - otherwise the internal backlight LED of the module will be damaged. The 10k resistor just above the resistor network RN1 determines the gain of the final mixing stage. A value of 10k might cause clipping if the level of all voicecards is set to the maximum value and if all 6 voicecards are playing at the same time. To prevent this, a lower value of 6.8k or 4.7k is recommended. You can keep 10k if you do not plan to install all 6 voicecards in your Ambika. Unless you intend to solder a main on/off switch, bridge the pads labelled SW. Add a 10k resistor (brown, black, black, red) near the ATMega (it pulls up the RST line of the MCU). Add the 20 MHz crystal. \\ Add 15x 470R resistors (yellow, purple, black, black). They are used for limiting the current flowing through the LEDs. Lower values might increase the brightness of the LEDs, at the risk of damaging them. \\ Add the 10k resistor networks. The 9 pins one pulls up the switches; the 7 pins one is used for mixing the voicecards signals. The dot on the resistor network must match the 1 marking on the board. Check the photos. Add the 5k adjustable resistor used for LCD contrast adjustment (the photo shows that it is called R47, but it has been renamed R36 in later revisions of the board).","title":"Resistors"},{"location":"ambika/mobo/#diodes","text":"The polarity of the diode is indicated by the ring (black on the 1N4148); white on the 1N4004 and 1N5819. Make sure that it matches the ring on the symbol silkscreened on the PCB. The 1N4004 is somehow overkill because Ambika does not use high-voltages - you might find a 1N4001 instead with your kit. Add 1x 1N4148 (MIDI input protection) Add 2x 1N4004s (or 1N4001s) - they rectify the input AC voltage. \\ Add 3x 1N4004 (or 1N4001) and 3x 1N5819. These diodes protect the regulators from weird things that can happen during the power on/off phases.","title":"Diodes"},{"location":"ambika/mobo/#ceramic-capacitors","text":"Ceramic capacitors (the yellow \"drops\") are not polarized. Add 1x 100pF (labelled 101) and 1x 18pF (labelled 180) capacitors. They limit the bandwidth of the op-amps and keep them stable. The TL072s don't strictly need them though. Note that 22pF capacitors (220) can be used without problem in place of 18pF. Add 2x 18pF (labelled 180) capacitors. Note that 22pF capacitors (220) can be used without problem in place of 18pF. \\ Add all the bypass 100nF capacitors (labelled 104).","title":"Ceramic capacitors"},{"location":"ambika/mobo/#ics-and-sockets","text":"\\ Add the DIP40, 2xDIP16 and 2x DIP8 sockets for the ATMega644p, 4050, 74hc138, 6N138 and the TL072. Some logic ICs on the top of the board are not socketed. Solder the 2x 74hc595 (shift registers for the LEDs) ; and 1x 74hc165 (shift register for reading the 8 switches). \\","title":"ICs and sockets"},{"location":"ambika/mobo/#power-supply","text":"Be very careful about the polarity of the electrolytic capacitors . When incorrectly polarized, they can pop and/or poop. The long lead of the capacitor indicates the positive lead, marked (+) on the PCB. A white strip on the edge of the capacitor indicates its negative lead. Add the MCP1700 3.3V regulator and the 100\u00b5F capacitor adjacent to it. I used here a short capacitor but the one that comes with the kit might be taller. Add the power connector - add enough solder to get a \"lake\" of solder forming inside the solder pad. Solder only one pin of the connector, adjust its position while keeping the solder joint hot, then solder the other pins. Add the 1uF film capacitor. Note that it is not polarized. Add the 3 regulators. The 7908 and LM2940-8.0 have a small heatsink attached to them. Insert the part into the heatsink. You might have to bend some of the metal wings to make it fit to the regulator. The 7805 gets very hot and needs a very big heatsink. Use a 6mm M3 screw and a nut to keep the heatsink in place, and make sure that the metal tab of the 7805 is touching the heatsink. Check that the heatsink is not shorting the three leads of the 7805. Add the two big capacitors (2200\u00b5F and 4700\u00b5F) used in the rectifier. Check and double-check their polarity. Add the 3x 100\u00b5F capacitors stabilizing the regulators.","title":"Power supply"},{"location":"ambika/mobo/#connectors","text":"Add the SD card connector. This is fortunately the only surface-mount soldering you will have to do here. A friendly note: it is not a big deal if you mess up the 3 smaller pins on the right. They are not used on Ambika. Add the 2x MIDI connectors and all the voicecard connectors (6x 1x6 female headers). If you intend to hack the firmware and send your own code to the motherboard, add a 2x3 male connector for an AVR ISP programmer. Add 7x audio connectors.","title":"Connectors"},{"location":"ambika/mobo/#lcd-module-and-leds","text":"Solder the 2x8 connector to the top of the LCD module. Insert the LCD module through the board, and add 2x nuts + 1x 10mm screw on each corner to keep it in place. Solder the LCD module to the PCB. \\ Add the 15 LEDs. The LED symbol printed on the PCB has a round edge and a flat edge. The shortest lead of the LED goes on the same side as the flat edge ; and the long lead is on the same side as the round edge. Note that soldering a LED backwards will make it shine with the wrong color.","title":"LCD module and LEDs"},{"location":"ambika/mobo/#controls","text":"Add the 8x 10k linear pots, the encoder, and the 8x switches. Add the 100k audio taper pot ; or bridge its middle and right pins if you think this pot is breaking some symmetry...","title":"Controls"},{"location":"ambika/mobo/#getting-ready-for-voicecards","text":"\\ Add 12x male/female spacers (with a 6mm M3 screw on the other side of the board) to welcome the voicecards. Hooray! We're done!","title":"Getting ready for voicecards"},{"location":"ambika/mobo/#testing","text":"","title":"Testing"},{"location":"ambika/mobo/#power-supply-testing","text":"For now, do not insert any IC Before powering Ambika, check that there is no short between one of the colored points and ground ; and no short between any pair of those points. Plug the +9V AC wall transformer. Check that the voltages are: +5V on the green point +3.3V on the yellow point +8V on the red point -8V on the blue point You can now power off the unit, and safely insert the 6N137, the TL072, the 4050, the 74hc138 and the ATMega644p.","title":"Power supply testing"},{"location":"ambika/mobo/#lcd-adjustment-and-ui-test","text":"Power the unit back on. LED9 should be lit in green. The first LED of the part indicator (block of 6) should be lit in green. Adjust the LCD contrast with the R36 trimmer. Press the first switch to go to the oscillators page and test that the 8 knobs are modifying values. Click the encoder and turn it left/right to check that it modifies values. Press the 8 switches one by one and check that all pages are reached, with the corresponding LED lighting up. Insert a FAT32 formatted SD card with the contents of the following archive . Press the last switch. You should be able to load presets from the card (you should see A000 Junon). If there is a problem with the SD card circuitry, an error message is displayed. If the card is simply blank, (empty) is shown in place of the preset name. Connect a MIDI source to the MIDI in. A note icon should be displayed in the top left of the screen whenever you play a note. Different symbols are shown when the pitch bend lever or the modulation wheels are touched.","title":"LCD adjustment and UI test"},{"location":"ambika/mobo/#a-first-voicecard","text":"Never attempt to connect a voicecard while the motherboard is powered on. Make sure that spacers are present before stacking voicecards - you don't want the bottom of the voicecard to touch any bit of circuitry below it. Make sure that the two layer jumpers are set to A if the voicecard is stacked directly on top of the motherboard ; or to B if the voicecard is stacked on top of another voicecard. Connect your first voicecard to Port 1 and power Ambika on. The orange LED on the voicecard should light up - indicating that it receives data from the motherboard. During tests, it is recommended to temporarily set the first part to mono - this way, whatever you play, the first voicecard will always receive the note. To do so, go to the keyboard and tuning page (by pressing S5), and change the second setting to mono : Volu 120|mode mono|lega off|port 0 octv 0|tune 0|sprd 0|raga equa Play some notes and check that a green LED lights up on the voicecard every time it receives a note. Check the mix audio output and the first individual out.","title":"A first voicecard!"},{"location":"ambika/mobo/#license","text":"This circuit and PCB layout is made available under a cc-by-sa-3.0 license.","title":"License"},{"location":"ambika/mobo/#kudos","text":"Todd Bailey, Neil Johnson and Yves Usson for useful board layout reviews!","title":"Kudos"},{"location":"ambika/mobo/#releases","text":"","title":"Releases"},{"location":"ambika/mobo/#v08","text":"Original release.","title":"v0.8"},{"location":"ambika/smr4/","text":"Assembly instructions DISCLAIMER: We are not responsible for anything wrong (including electric shocks, malfunctions, fires, accidents involving a soldering iron) that might happen during the assembly of the kit. Everything you do while assembling the kit is at your own risks. Given the relatively small size of this board, we do not build it functional unit by functional unit - we just work our way from the shortest to the tallest component. Resistors, first decade Add 9x 220R resistors (red, red, black, black, brown). Add 2x 470R resistors (yellow, purple, black, black, brown). Resistors are not polarized - but it helps to solder them with the same orientation as on these photos, it will make it easier for you to spot mistakes in case the board does not work! Resistors, second decade Add 2x 1.0k resistors (brown, black, black, brown, brown) ; 3x 2.2k resistors (red, red, black, brown, brown) ; and 4x 4.7k resistors (yellow, purple, black, brown, brown). Resistors, third decade Add 13x 10k resistors (brown, black, black, red, brown) ; 3x 18k resistors (brown, grey, black, red, brown) ; and one 47k resistor (yellow, purple, black, red, brown). Do not mix the 18k and 10k resistors - check the photo carefully. Resistors, last decade Add one 150k resistor (brown, green, black, orange, brown) and one 330k resistor (orange, orange, black, orange, brown). Miscellaneous short parts Add the 4.7V zener diode. It is polarized, the black ring of the diode must be on the same side as the ring printed on the circuit board. Solder the 20MHz quartz. It is not polarized. Ceramic capacitors Ceramic capacitors are not polarized. Add 2x 18pF ceramic capacitors (marked 180 = \"18 with 0 extra zero pF = 18pF\") in positions C26 and C27. Similar values like 20pF or 22pF are also tolerated - they must be chosen according to the quartz' specifications actually. Don't worry, no difference in sound will be noticed if you get a different value, and the quartz is rather tolerant to a +/- 20% deviation. Add 2x 100pF ceramic capacitors (marked 101 = \"10 with 1 extra zero pF = 100pF\") in positions C4 and C10. Add 13x 100nF ceramic capacitors (marked 104 = \"10 with 4 extra zeros pF = 100,000pF = 100nF\"). Note: the parts used in the kit have a very small marking on them. If you cannot read the value of a ceramic capacitor, if it has very long legs, and if it does not come attached to a strip, it is a 100nF ceramic capacitor! Add 2x 220nF ceramic capacitors (marked 224) in positions C14 and C22. Trimmer and LEDs Add the 20k trimmer. It is used to adjust the response of the filter. Add the two LEDs. the DATA LED is orange ; and the NOTE LED is green. The LED is polarized, its orientation is defined by its long and short legs. Insert the two LEDs just as shown on the picture. The flat side of the LED symbol printed on the board actually indicates the cathode (short lead). The round side is the anode (long lead). Solder and cut the leads. IC sockets Make sure that the notch of IC sockets is oriented on the same side as the notch on the PCB symbol. This does not change anything electrically, but having the notch in the right position is a helpful hint for correctly inserting the IC in the next steps! Add 2x DIP8 sockets in positions IC5, IC6. Add 1x DIP14 socket in position IC1. Add 3x DIP16 sockets in positions IC2, IC3, IC4. Add 1x DIP28 socket in position IC7. Electrolytic capacitors The 3x 100\u00b5F capacitors (C11, C20, C28) are polarized. The white stripe indicates the -, and this should match the symbol printed on the PCB. The 2x 4.7\u00b5F capacitors (C1, C21) that come with the kit are dedicated to audio applications (AC coupling) and are not polarized. If you use polarized capacitors instead, follow the +/- symbol printed on the PCB. Film capacitors Add 4x 1nF capacitors in positions C5, C15, C7, C17. These are not polarized. There are three holes in the PCB because these capacitors are available in two packages: 2.54mm pitch (WIMA, red): They need to be soldered as on the photo - leaving the outer hole unconnected. 5.08mm pitch (other manufacturers, grey or blue): the hole in the middle is not connected. Transistors Add the 4x 2N3906 transistors. These parts are polarized - the shape of the symbol printed on the board must match the round/flat sides of the transistor. Connectors and IC Add the 2x 1x6 female headers, and the 2x 1x3 male headers. Do not trim the leads of the board stacking connectors. The voicecard is stacked on top of the motherboard or of another voicecard, so the 6 leads of the 1x6 connectors should be kept long. This is the same stacking approach as the Arduino \"shields\". Insert the ICs in their sockets. Setup Layer jumpers A voicecard can either be inserted into the Ambika motherboard ; or stacked on top of another voicecard. In the former case, the two jumpers must be set to the A position. In the later case, the two jumpers must be set to the B position. The first jumper determines where the voicecard is sending its audio signal. You might exploit this to route the two voicecards in the stack to the same individual audio output (passive mixing), though this is not recommended. The second jumper is used to assign a unique CS line to each voicecard. When the master MCU wants to talk to a voicecard, for example to make it play a note, it sets the CS (chip select) line of the voicecard to a voltage of 0V. It is thus very important that no two voicecards are addressed through the same CS line! For this reason, check and double check that the two voicecards in the stack have their second jumper set to A and B respectively. VCF tuning All boards have a V/Oct trimmer to tune to a correct musical scale the tone emitted by the filter when it reaches self-oscillation. To do this adjustment, start from a blank patch. It greatly helps to assign the voicecard being tuned (and no other voicecard) to part 1. Set all oscillators to none, kill all modulations on the filter cutoff \u2014 env2> and lfo> modulation amounts to 0 \u2014 and set cutoff and resonance to 63. You should hear the self-oscillation tone. Adjust the V/Oct trimmer so that the intervals are respected \u2013 that is to say, when you play C3 then C4, you should hear two notes, maybe not C3s and C4s, but they must be one octave apart. If you do not have a good sense of pitch, you can try a software tuner like Tuna Pitch on OS X. If the filter is correctly tuned, you should be able to play the filter \"self oscillation tone\" across roughly 4 octaves with correct tuning. Note that tuning might vary a bit with temperature, so there is no need to spend too much time on this! As far as the digital oscillators are concerned, they are always in tune and do not need any calibration! Technical documentation This filter uses the same topology as the Shruthi SMR4mkII , with the following change: OTA / op-amp integrator cells are replaced by OTA-C-Darlington buffer cells. This saves a quad op-amp which wouldn't have fit on the board. The difference can be heard when increasing the resonance. The schematics in PDF format are available here . You can find the Eagle files for this board in the source code hosted on github . If you need a reference during assembly, you can download this printout of the top side of the board and print it at a 2:1 scale. Bill of materials Licence and credits This circuit and PCB layout are made available under a cc-by-sa-3.0 license. The firmware is released under a GPL3.0 license.","title":"SMR-4 voicecard"},{"location":"ambika/smr4/#assembly-instructions","text":"DISCLAIMER: We are not responsible for anything wrong (including electric shocks, malfunctions, fires, accidents involving a soldering iron) that might happen during the assembly of the kit. Everything you do while assembling the kit is at your own risks. Given the relatively small size of this board, we do not build it functional unit by functional unit - we just work our way from the shortest to the tallest component.","title":"Assembly instructions"},{"location":"ambika/smr4/#resistors-first-decade","text":"Add 9x 220R resistors (red, red, black, black, brown). Add 2x 470R resistors (yellow, purple, black, black, brown). Resistors are not polarized - but it helps to solder them with the same orientation as on these photos, it will make it easier for you to spot mistakes in case the board does not work!","title":"Resistors, first decade"},{"location":"ambika/smr4/#resistors-second-decade","text":"Add 2x 1.0k resistors (brown, black, black, brown, brown) ; 3x 2.2k resistors (red, red, black, brown, brown) ; and 4x 4.7k resistors (yellow, purple, black, brown, brown).","title":"Resistors, second decade"},{"location":"ambika/smr4/#resistors-third-decade","text":"Add 13x 10k resistors (brown, black, black, red, brown) ; 3x 18k resistors (brown, grey, black, red, brown) ; and one 47k resistor (yellow, purple, black, red, brown). Do not mix the 18k and 10k resistors - check the photo carefully.","title":"Resistors, third decade"},{"location":"ambika/smr4/#resistors-last-decade","text":"Add one 150k resistor (brown, green, black, orange, brown) and one 330k resistor (orange, orange, black, orange, brown).","title":"Resistors, last decade"},{"location":"ambika/smr4/#miscellaneous-short-parts","text":"Add the 4.7V zener diode. It is polarized, the black ring of the diode must be on the same side as the ring printed on the circuit board. Solder the 20MHz quartz. It is not polarized.","title":"Miscellaneous short parts"},{"location":"ambika/smr4/#ceramic-capacitors","text":"Ceramic capacitors are not polarized. Add 2x 18pF ceramic capacitors (marked 180 = \"18 with 0 extra zero pF = 18pF\") in positions C26 and C27. Similar values like 20pF or 22pF are also tolerated - they must be chosen according to the quartz' specifications actually. Don't worry, no difference in sound will be noticed if you get a different value, and the quartz is rather tolerant to a +/- 20% deviation. Add 2x 100pF ceramic capacitors (marked 101 = \"10 with 1 extra zero pF = 100pF\") in positions C4 and C10. Add 13x 100nF ceramic capacitors (marked 104 = \"10 with 4 extra zeros pF = 100,000pF = 100nF\"). Note: the parts used in the kit have a very small marking on them. If you cannot read the value of a ceramic capacitor, if it has very long legs, and if it does not come attached to a strip, it is a 100nF ceramic capacitor! Add 2x 220nF ceramic capacitors (marked 224) in positions C14 and C22.","title":"Ceramic capacitors"},{"location":"ambika/smr4/#trimmer-and-leds","text":"Add the 20k trimmer. It is used to adjust the response of the filter. Add the two LEDs. the DATA LED is orange ; and the NOTE LED is green. The LED is polarized, its orientation is defined by its long and short legs. Insert the two LEDs just as shown on the picture. The flat side of the LED symbol printed on the board actually indicates the cathode (short lead). The round side is the anode (long lead). Solder and cut the leads.","title":"Trimmer and LEDs"},{"location":"ambika/smr4/#ic-sockets","text":"Make sure that the notch of IC sockets is oriented on the same side as the notch on the PCB symbol. This does not change anything electrically, but having the notch in the right position is a helpful hint for correctly inserting the IC in the next steps! Add 2x DIP8 sockets in positions IC5, IC6. Add 1x DIP14 socket in position IC1. Add 3x DIP16 sockets in positions IC2, IC3, IC4. Add 1x DIP28 socket in position IC7.","title":"IC sockets"},{"location":"ambika/smr4/#electrolytic-capacitors","text":"The 3x 100\u00b5F capacitors (C11, C20, C28) are polarized. The white stripe indicates the -, and this should match the symbol printed on the PCB. The 2x 4.7\u00b5F capacitors (C1, C21) that come with the kit are dedicated to audio applications (AC coupling) and are not polarized. If you use polarized capacitors instead, follow the +/- symbol printed on the PCB.","title":"Electrolytic capacitors"},{"location":"ambika/smr4/#film-capacitors","text":"Add 4x 1nF capacitors in positions C5, C15, C7, C17. These are not polarized. There are three holes in the PCB because these capacitors are available in two packages: 2.54mm pitch (WIMA, red): They need to be soldered as on the photo - leaving the outer hole unconnected. 5.08mm pitch (other manufacturers, grey or blue): the hole in the middle is not connected.","title":"Film capacitors"},{"location":"ambika/smr4/#transistors","text":"Add the 4x 2N3906 transistors. These parts are polarized - the shape of the symbol printed on the board must match the round/flat sides of the transistor.","title":"Transistors"},{"location":"ambika/smr4/#connectors-and-ic","text":"Add the 2x 1x6 female headers, and the 2x 1x3 male headers. Do not trim the leads of the board stacking connectors. The voicecard is stacked on top of the motherboard or of another voicecard, so the 6 leads of the 1x6 connectors should be kept long. This is the same stacking approach as the Arduino \"shields\". Insert the ICs in their sockets.","title":"Connectors and IC"},{"location":"ambika/smr4/#setup","text":"","title":"Setup"},{"location":"ambika/smr4/#layer-jumpers","text":"A voicecard can either be inserted into the Ambika motherboard ; or stacked on top of another voicecard. In the former case, the two jumpers must be set to the A position. In the later case, the two jumpers must be set to the B position. The first jumper determines where the voicecard is sending its audio signal. You might exploit this to route the two voicecards in the stack to the same individual audio output (passive mixing), though this is not recommended. The second jumper is used to assign a unique CS line to each voicecard. When the master MCU wants to talk to a voicecard, for example to make it play a note, it sets the CS (chip select) line of the voicecard to a voltage of 0V. It is thus very important that no two voicecards are addressed through the same CS line! For this reason, check and double check that the two voicecards in the stack have their second jumper set to A and B respectively.","title":"Layer jumpers"},{"location":"ambika/smr4/#vcf-tuning","text":"All boards have a V/Oct trimmer to tune to a correct musical scale the tone emitted by the filter when it reaches self-oscillation. To do this adjustment, start from a blank patch. It greatly helps to assign the voicecard being tuned (and no other voicecard) to part 1. Set all oscillators to none, kill all modulations on the filter cutoff \u2014 env2> and lfo> modulation amounts to 0 \u2014 and set cutoff and resonance to 63. You should hear the self-oscillation tone. Adjust the V/Oct trimmer so that the intervals are respected \u2013 that is to say, when you play C3 then C4, you should hear two notes, maybe not C3s and C4s, but they must be one octave apart. If you do not have a good sense of pitch, you can try a software tuner like Tuna Pitch on OS X. If the filter is correctly tuned, you should be able to play the filter \"self oscillation tone\" across roughly 4 octaves with correct tuning. Note that tuning might vary a bit with temperature, so there is no need to spend too much time on this! As far as the digital oscillators are concerned, they are always in tune and do not need any calibration!","title":"VCF tuning"},{"location":"ambika/smr4/#technical-documentation","text":"This filter uses the same topology as the Shruthi SMR4mkII , with the following change: OTA / op-amp integrator cells are replaced by OTA-C-Darlington buffer cells. This saves a quad op-amp which wouldn't have fit on the board. The difference can be heard when increasing the resonance. The schematics in PDF format are available here . You can find the Eagle files for this board in the source code hosted on github . If you need a reference during assembly, you can download this printout of the top side of the board and print it at a 2:1 scale. Bill of materials","title":"Technical documentation"},{"location":"ambika/smr4/#licence-and-credits","text":"This circuit and PCB layout are made available under a cc-by-sa-3.0 license. The firmware is released under a GPL3.0 license.","title":"Licence and credits"},{"location":"ambika/technotes/","text":"Overall design Ambika consists of one motherboard and up to 6 voicecards - each of them containing a complete sound synthesis voice under the control of the motherboard. The main motivation behind this design was the choice of the low performance 8-bit AVR as a platform for the digital oscillators code. At the time Ambika was designed, this was the only through-hole part with a well-supported, easily available open-source toolchain based on gcc - the fact that the Shruthi-1 codebase was already proven on this platform was a plus. This required one MCU per voice, and it was thus decided to keep each voicecard as close as possible to a simple standalone synth. An advantage of this is that it suits well the \"mix and match different filters/voicecards\". The inconvenient is that a multi-processor system is always more difficult to troubleshoot than a single processor system! Motherboard Power supply Earlier versions of Ambika used a single +9V supply for the analog section with a virtual ground; but the noise floor was higher (it required a lot of bypassing on the virtual ground). Thus, a proper +/- 8V symmetric supply was chosen. The advantage of 8V is that there exists fixed output positive and negative regulators for this voltage; and that it is relatively close to +5V -- a lot of current is drawn on the +5V rail, so there's an incentive to use an input voltage which is not too high, to avoid having to dissipate too much power on the +5V regulator. The requirements for a fully loaded unit with SMR4 voicecards are the following: 310mA for the +5V; and 130mA for the +/- 8V rails. We decided to work from an AC wallwart (which is really just a step down transformer) to keep builders away from anything dealing with mains voltage. The big inconvenient of those is that they do not have a center tap, so a full-wave rectification input stage is not possible. Half-wave rectification is what is used on the Ambika power supply. It requires fairly large input capacitors and/or will cause quite some ripple at the rectification stage. Our original design used a 4700uF cap for positive rectification, and 7805 / 7808 / 7908 regulators. When powered with 12V AC, the 7805 was getting too hot; when powered with 9V AC, the ripple on the rectified positive input of the 7808 was dipping below 10.5V and caused ripple on the output. We thus replaced the 7808 with a LDO (LM2940-8.0) more tolerant to the ripple (it would have required more than 10000u of caps in the rectifier to make the ripple go away). It is still possible to run Ambika on 12V AC if a switching-mode pin-compatible 7805 replacement is used such as the PT78ST105H - this is indeed the best solution to minimize heating inside the case. Input supply +8V regulator +5V regulator Observations +9V AC LM2940-8 7805 Recommended +12V AC 7808 PT78ST105H Recommended +9V AC 7808 7805 50Hz Hum on audio output when too many voicecards are installed +12V AC 7808 7805 Works, but 7805 heatsink gets very hot MIDI input Note that the pull-up resistor on the 6N137 has an unusually high value of 10k. This softens the edges of the MIDI signal, since some DIP ATMega644p running at 20 MHz suffer from a bug causing random memory corruption when sharp spikes are injected on the UART input (this is apparently a rarer instance of this problem ). SD card The SD card is the only part of Ambika running on +3.3V. It has its own small (TO92) regulator, an MCP1700. Level translation from +5V to +3.3V is handled by a 4050N. There is no level translation from +3.3V to +5V as the ATMega has a logic threshold below +3.3V. Audio output The audio output of each voicecard is connected to the corresponding individual output jack through a 470R resistor which serves as extra short circuit protection. When the jack is not inserted, the signal is routed to an inverting mixer with a gain of 1, then through the volume pot, then through an inverting mixer with a gain of 1 (to get the original phase) - this yields the \"mixed\" output. This realizes the same behavior as drum machines like the 808, in which plugging a jack in an individual output removes the corresponding instrument from the global mix. User interface The 8 switches are read into a parallel-in / serial-out shift register (165). The 15 LEDs are addressed by two daisy-chained parallel-out / serial-in shift registers (595). The LEDs are bicolor (green or orange depending on the polarity). The 16th output of the 595s chain is used to either source/sink current into the LEDs, controlling their colors. This works because the 595 can source/sink up to 10mA. For example, to light the first LED in green, the bit pattern is: 10000000 00000000. To light the first LED in orange, the bit pattern is: 01111111 11111111. 00000000 00000000 or 11111111 11111111 switches off all LEDs. To allow different brightness levels and the simultaneous display of green and orange, we alternate between displaying the green field (with 16 brightness levels achieved through software PWM); and the orange field. The LCD module is a HD44780 compatible device, it is refreshed using the same approach as on the Shruthi. The 8 pots are directly connected to the MCU's ADC inputs without external hardware multiplexing. The rotary encoder is directly connected to the MCU and is debounced / decoded in software. SPI bus The SPI bus is used in a 1-master / 8-slave configuration. The slaves are the 6 voicecards (address 0 to 5); an expansion port used for future peripherals/controllers (address 6) and the SD card (address 7). Slave selection is done by a 3 to 8 decoder (74hc138), whose output pins are hooked to the SS pin of each slave. The hardware SPI module of the 644p is used, to allow fast communications - 10 MHz when communicating with the SD card; 2.5 MHz when communicating with a voicecard (this is because the ATMega's SPI receiver needs the clock to be strictly slower than Fclk / 4). The SS pin of the ATMega SPI unit enables/disables the 74hc138 - one just has to write the address of the peripheral we want to talk to to the 74hc138, and do a transaction using the ATMega644p SPI module as if there was only one slave! Voicecard connectors Each voicecard connector can be used to stack two voicecards. The lower layer directly connected to the motherboard is called \"Layer A\", the upper layer is called \"Layer B\". Here is the pinout of the voicecards connector: The physical audio outputs 1, 3, 5 are playing the signals from the layer A voicecards audio outs. The physical audio outputs 2, 4, 6 are playing the signals from the layer B voicecards. At the exception of the audio output and the SS line, all signals are common to the two voicecards in the stack. Jumpers are present on the voicecard to indicate whether it will \"respond\" to SS A or SS B; and to indicate whether it will output its signal to the Audio A or Audio B line. Note that it might be possible to design a \"dual\" voicecard responsing to both SS A and SS B; and producing audio on both Audio A and Audio B. Voicecard SPI bus The MISO/MOSI/SCK lines of the SPI bus are connected to the voicecard MCU through 220R resistors. This has little impact on signal integrity; and this allows the ISP programmer (which uses the same pins as the hardware SPI module) to be isolated from the SPI bus during programming (see AVR910). The SS A / SS B lines are connected to a 3 pins header + jumper to assign the voicecard to a layer. One of them is hooked to the SS pin of the ATMega328p's hardware SPI receiver. Note that the voicecard MCU does not use interrupts for SPI reception ( some exploration here ). Instead, it polls the SPI peripheral. Normally, the polling is done sparsely (every time an audio sample is written to the DAC); though it can temporarily enter a busy loop when the master MCU sends a large block of patch data. VCA compensation The SVF voicecard uses an exponential VCA whose response curve needs to be linearized in software. To allow the same firmware to be used on all voicecards, a pin of the ATMega328p (pin 14) is tied to ground on the SVF voicecard to instruct the firmware to do the compensation. On the other voicecards, this pin is unconnected (internally pulled-up), and no correction is applied. Output signals/CV A voicecard needs to generate at least 4 control signals: oscillators mix, VCF CV, VCA CV and resonance CV. We have chosen an external 12-bits dual DAC for the oscillators mix and VCA CV; and 8-bits PWM for the others. The DAC eliminates some of the weird low frequency tones obtained on the Shruthi-1 when the filter self-oscillation starts interacting with the 39kHz PWM carrier. The bandwidth constraint on the VCF and Q CVs is lower and 1-pole filtering can be applied to them to eliminate the PWM carrier. In any case, any remain of the PWM carrier in those CV does not show up in the audio signal. The DAC (MCP4822) has a SPI interface. Since the SPI module of the ATMega328p is already used for communication with the master MCU; what is used for communicating with the DAC is the USART in SPI mode. It is actually more convenient to talk to the DAC through the USART in SPI mode, since it has a 4-byte buffer. Digital control of filter routing The SVF voicecard uses a digitally controlled switch (4052) to route the various filter nodes to the VCA. Because the 4052 is powered by +/- 8V, it needs some level translation to correctly be switched from +5V outputs (Vishay DG405x series have +5V compatible inputs, but they are harder to find). This is done with simple MOSFET inverters. Signaling The meaning of the LEDs patterns is as follows LED pattern Status Orange on Voicecard is normally refreshed by master Green on Voicecard is playing a note Green and Orange blink simultaneously Voicecard has failed to boot successfully, either due to a corrupted firmware update, or to a power supply disruption during boot. It is now locked in firmware upgrade mode, and is waiting for the master to send an upgraded firmware from the SD card Green and Orange blink in turns Voicecard firmware has been successfully upgraded Firmware update and initialization sequence check Firmware update is triggered by the master, which sends a dedicated command to the voicecard. Upon reception of this command, the voicecard writes a value in internal EEPROM, resets itself, and lands into its bootloader. The bootloader checks this value in EEPROM, and enters the firmware update mode accordingly. This design works well but does not handle the following situation: after a failed firmware update, the voicecard is left with a non-bootable firmware, and thus it cannot receive the firmware update command from the master! To solve this, the bootloader always set a flag in internal EEPROM during boot -- flag which is cleared in the main firmware after a successful initialization. During the next boot, the bootloader checks this flag. If it has not been cleared, it means that the main firmware could not complete the initialization sequence, and this is interpreted as a sign of crash and/or corrupted firmware. Thus, the bootloader will force the voicecard into firmware update mode even if not instructed to do so by the master. What this means is that if for any reason a voicecard does not complete its initialization (for example, if it is disconnected or removed during the boot process), it will lock itself into firmware update mode. Master <-> voicecard communication protocol During a SPI transaction, the master and the voicecard exchange a byte of data. Except when noted otherwise, the voicecard only sends 0xff to the master - as communication is mostly done in the master -> slave direction. 0x00 PATCH SEND This command is followed by an 8-bit integer N indicating the size of the data block sent in bulk. Then, N bytes follow. These bytes are copied into the patch data structure of the voicecard. Please refer to the patch data structure . 0x10 TRIGGER NOTE / 0x11 TRIGGER NOTE LEGATO This command is followed by 3 bytes: the MSB of the note pitch, the LSB of the note pitch, and the velocity. The pitch is represented by a 14-bit integer, the 7 MSB being the MIDI note number. The velocity is represented by an 8-bit integer, twice the MIDI velocity value. The LSB of the command indicates whether the note is played legato. Whether this should actually retrigger the envelopes or not is a function of the legato mode setting of the patch. 0x20 WRITE PATCH DATA This command is followed by an address byte and a value byte; and writes data into the patch data structure . 0x30 WRITE PART DATA This command is followed by an address byte and a value byte; and writes data into the part data structure 0x40 WRITE MODULATION SOURCE This command is followed by a modulation source index and its value. The modulation sources are listed here . At the exception of envelopes, LFO4, operators and noise (which are internally generated), all modulation sources values come from the master MCU. 0x50 / 0x51 / 0x52 WRITE LFO This command is followed by a byte, and sets the value of the LFO indexed by the lower nybble of the command byte (0x50 writes LFO1, 0x51 writes LFO2 etc.). The same thing could have been achieved with a 0x40 command, but this command is shorter; and thus allows a faster refresh rate of the LFOs. 0x60 RELEASE This command releases all envelopes. 0x70 KILL ALL SOUND This command releases and sets to zero all envelopes. 0x80 / 0x81 / 0x82 RETRIGGER ENVELOPE This command retriggers the envelope indexed by the lower nybble of the command byte (0x80 for envelope 1; 0x81 for envelope 2; 0x82 for envelope 3). 0xf8 RESET ALL CONTROLLERS This command resets to their default position the pitch bend, aftertouch, modulation wheels and expression pedal controllers. 0xf9 RESET This command stops all sound and resets the voicecard to a blank (silent) patch. 0xfa LIGHTS OUT This command instructs a voicecard that it should stop blinking its LEDs 0xfb START FIRMWARE UPGRADE This command instructs a voicecard to resets into its bootloader so that its firmware can be upgraded. The voicecard is expected to reply with the size of a flash memory block divided by 16. It is followed by a 100ms pause; then this command is repeated 250 times. The master then sends the firmware nibble by nibble; and finally an 0xfb is issued to indicate that the transmission of the firmware is over. 0xfc GET SLAVE ID This command instructs a voicecard to send (during the next transaction), its slave id. The slave id is 0x01 for a sound synthesis voice. 0xfd GET VERSION ID This command instructs a voicecard to send (during the next transaction), its firmware version id. The higher nybble is the major version number; the lower nybble is the minor version number. 0xff SYNC This command can be used in three contexts: Receive a byte from a previously issued command. A long string of 0xff messages can be used to resynchronize the state of a voicecard's protocol decoder in case it has skipped a byte. When a voicecard boots, it waits for a first SPI message to decide whether it should boot into the normal code, or enter the firmware upgrade mode. Receiving a 0xff SYNC message makes it boot into the normal code; while receiving a 0xfb START FIRMWARE UGPRADE message makes it stay in bootloader land for firmware upgrade.","title":"Technical notes"},{"location":"ambika/technotes/#overall-design","text":"Ambika consists of one motherboard and up to 6 voicecards - each of them containing a complete sound synthesis voice under the control of the motherboard. The main motivation behind this design was the choice of the low performance 8-bit AVR as a platform for the digital oscillators code. At the time Ambika was designed, this was the only through-hole part with a well-supported, easily available open-source toolchain based on gcc - the fact that the Shruthi-1 codebase was already proven on this platform was a plus. This required one MCU per voice, and it was thus decided to keep each voicecard as close as possible to a simple standalone synth. An advantage of this is that it suits well the \"mix and match different filters/voicecards\". The inconvenient is that a multi-processor system is always more difficult to troubleshoot than a single processor system!","title":"Overall design"},{"location":"ambika/technotes/#motherboard","text":"","title":"Motherboard"},{"location":"ambika/technotes/#power-supply","text":"Earlier versions of Ambika used a single +9V supply for the analog section with a virtual ground; but the noise floor was higher (it required a lot of bypassing on the virtual ground). Thus, a proper +/- 8V symmetric supply was chosen. The advantage of 8V is that there exists fixed output positive and negative regulators for this voltage; and that it is relatively close to +5V -- a lot of current is drawn on the +5V rail, so there's an incentive to use an input voltage which is not too high, to avoid having to dissipate too much power on the +5V regulator. The requirements for a fully loaded unit with SMR4 voicecards are the following: 310mA for the +5V; and 130mA for the +/- 8V rails. We decided to work from an AC wallwart (which is really just a step down transformer) to keep builders away from anything dealing with mains voltage. The big inconvenient of those is that they do not have a center tap, so a full-wave rectification input stage is not possible. Half-wave rectification is what is used on the Ambika power supply. It requires fairly large input capacitors and/or will cause quite some ripple at the rectification stage. Our original design used a 4700uF cap for positive rectification, and 7805 / 7808 / 7908 regulators. When powered with 12V AC, the 7805 was getting too hot; when powered with 9V AC, the ripple on the rectified positive input of the 7808 was dipping below 10.5V and caused ripple on the output. We thus replaced the 7808 with a LDO (LM2940-8.0) more tolerant to the ripple (it would have required more than 10000u of caps in the rectifier to make the ripple go away). It is still possible to run Ambika on 12V AC if a switching-mode pin-compatible 7805 replacement is used such as the PT78ST105H - this is indeed the best solution to minimize heating inside the case. Input supply +8V regulator +5V regulator Observations +9V AC LM2940-8 7805 Recommended +12V AC 7808 PT78ST105H Recommended +9V AC 7808 7805 50Hz Hum on audio output when too many voicecards are installed +12V AC 7808 7805 Works, but 7805 heatsink gets very hot","title":"Power supply"},{"location":"ambika/technotes/#midi-input","text":"Note that the pull-up resistor on the 6N137 has an unusually high value of 10k. This softens the edges of the MIDI signal, since some DIP ATMega644p running at 20 MHz suffer from a bug causing random memory corruption when sharp spikes are injected on the UART input (this is apparently a rarer instance of this problem ).","title":"MIDI input"},{"location":"ambika/technotes/#sd-card","text":"The SD card is the only part of Ambika running on +3.3V. It has its own small (TO92) regulator, an MCP1700. Level translation from +5V to +3.3V is handled by a 4050N. There is no level translation from +3.3V to +5V as the ATMega has a logic threshold below +3.3V.","title":"SD card"},{"location":"ambika/technotes/#audio-output","text":"The audio output of each voicecard is connected to the corresponding individual output jack through a 470R resistor which serves as extra short circuit protection. When the jack is not inserted, the signal is routed to an inverting mixer with a gain of 1, then through the volume pot, then through an inverting mixer with a gain of 1 (to get the original phase) - this yields the \"mixed\" output. This realizes the same behavior as drum machines like the 808, in which plugging a jack in an individual output removes the corresponding instrument from the global mix.","title":"Audio output"},{"location":"ambika/technotes/#user-interface","text":"The 8 switches are read into a parallel-in / serial-out shift register (165). The 15 LEDs are addressed by two daisy-chained parallel-out / serial-in shift registers (595). The LEDs are bicolor (green or orange depending on the polarity). The 16th output of the 595s chain is used to either source/sink current into the LEDs, controlling their colors. This works because the 595 can source/sink up to 10mA. For example, to light the first LED in green, the bit pattern is: 10000000 00000000. To light the first LED in orange, the bit pattern is: 01111111 11111111. 00000000 00000000 or 11111111 11111111 switches off all LEDs. To allow different brightness levels and the simultaneous display of green and orange, we alternate between displaying the green field (with 16 brightness levels achieved through software PWM); and the orange field. The LCD module is a HD44780 compatible device, it is refreshed using the same approach as on the Shruthi. The 8 pots are directly connected to the MCU's ADC inputs without external hardware multiplexing. The rotary encoder is directly connected to the MCU and is debounced / decoded in software.","title":"User interface"},{"location":"ambika/technotes/#spi-bus","text":"The SPI bus is used in a 1-master / 8-slave configuration. The slaves are the 6 voicecards (address 0 to 5); an expansion port used for future peripherals/controllers (address 6) and the SD card (address 7). Slave selection is done by a 3 to 8 decoder (74hc138), whose output pins are hooked to the SS pin of each slave. The hardware SPI module of the 644p is used, to allow fast communications - 10 MHz when communicating with the SD card; 2.5 MHz when communicating with a voicecard (this is because the ATMega's SPI receiver needs the clock to be strictly slower than Fclk / 4). The SS pin of the ATMega SPI unit enables/disables the 74hc138 - one just has to write the address of the peripheral we want to talk to to the 74hc138, and do a transaction using the ATMega644p SPI module as if there was only one slave!","title":"SPI bus"},{"location":"ambika/technotes/#voicecard-connectors","text":"Each voicecard connector can be used to stack two voicecards. The lower layer directly connected to the motherboard is called \"Layer A\", the upper layer is called \"Layer B\". Here is the pinout of the voicecards connector: The physical audio outputs 1, 3, 5 are playing the signals from the layer A voicecards audio outs. The physical audio outputs 2, 4, 6 are playing the signals from the layer B voicecards. At the exception of the audio output and the SS line, all signals are common to the two voicecards in the stack. Jumpers are present on the voicecard to indicate whether it will \"respond\" to SS A or SS B; and to indicate whether it will output its signal to the Audio A or Audio B line. Note that it might be possible to design a \"dual\" voicecard responsing to both SS A and SS B; and producing audio on both Audio A and Audio B.","title":"Voicecard connectors"},{"location":"ambika/technotes/#voicecard","text":"","title":"Voicecard"},{"location":"ambika/technotes/#spi-bus_1","text":"The MISO/MOSI/SCK lines of the SPI bus are connected to the voicecard MCU through 220R resistors. This has little impact on signal integrity; and this allows the ISP programmer (which uses the same pins as the hardware SPI module) to be isolated from the SPI bus during programming (see AVR910). The SS A / SS B lines are connected to a 3 pins header + jumper to assign the voicecard to a layer. One of them is hooked to the SS pin of the ATMega328p's hardware SPI receiver. Note that the voicecard MCU does not use interrupts for SPI reception ( some exploration here ). Instead, it polls the SPI peripheral. Normally, the polling is done sparsely (every time an audio sample is written to the DAC); though it can temporarily enter a busy loop when the master MCU sends a large block of patch data.","title":"SPI bus"},{"location":"ambika/technotes/#vca-compensation","text":"The SVF voicecard uses an exponential VCA whose response curve needs to be linearized in software. To allow the same firmware to be used on all voicecards, a pin of the ATMega328p (pin 14) is tied to ground on the SVF voicecard to instruct the firmware to do the compensation. On the other voicecards, this pin is unconnected (internally pulled-up), and no correction is applied.","title":"VCA compensation"},{"location":"ambika/technotes/#output-signalscv","text":"A voicecard needs to generate at least 4 control signals: oscillators mix, VCF CV, VCA CV and resonance CV. We have chosen an external 12-bits dual DAC for the oscillators mix and VCA CV; and 8-bits PWM for the others. The DAC eliminates some of the weird low frequency tones obtained on the Shruthi-1 when the filter self-oscillation starts interacting with the 39kHz PWM carrier. The bandwidth constraint on the VCF and Q CVs is lower and 1-pole filtering can be applied to them to eliminate the PWM carrier. In any case, any remain of the PWM carrier in those CV does not show up in the audio signal. The DAC (MCP4822) has a SPI interface. Since the SPI module of the ATMega328p is already used for communication with the master MCU; what is used for communicating with the DAC is the USART in SPI mode. It is actually more convenient to talk to the DAC through the USART in SPI mode, since it has a 4-byte buffer.","title":"Output signals/CV"},{"location":"ambika/technotes/#digital-control-of-filter-routing","text":"The SVF voicecard uses a digitally controlled switch (4052) to route the various filter nodes to the VCA. Because the 4052 is powered by +/- 8V, it needs some level translation to correctly be switched from +5V outputs (Vishay DG405x series have +5V compatible inputs, but they are harder to find). This is done with simple MOSFET inverters.","title":"Digital control of filter routing"},{"location":"ambika/technotes/#signaling","text":"The meaning of the LEDs patterns is as follows LED pattern Status Orange on Voicecard is normally refreshed by master Green on Voicecard is playing a note Green and Orange blink simultaneously Voicecard has failed to boot successfully, either due to a corrupted firmware update, or to a power supply disruption during boot. It is now locked in firmware upgrade mode, and is waiting for the master to send an upgraded firmware from the SD card Green and Orange blink in turns Voicecard firmware has been successfully upgraded","title":"Signaling"},{"location":"ambika/technotes/#firmware-update-and-initialization-sequence-check","text":"Firmware update is triggered by the master, which sends a dedicated command to the voicecard. Upon reception of this command, the voicecard writes a value in internal EEPROM, resets itself, and lands into its bootloader. The bootloader checks this value in EEPROM, and enters the firmware update mode accordingly. This design works well but does not handle the following situation: after a failed firmware update, the voicecard is left with a non-bootable firmware, and thus it cannot receive the firmware update command from the master! To solve this, the bootloader always set a flag in internal EEPROM during boot -- flag which is cleared in the main firmware after a successful initialization. During the next boot, the bootloader checks this flag. If it has not been cleared, it means that the main firmware could not complete the initialization sequence, and this is interpreted as a sign of crash and/or corrupted firmware. Thus, the bootloader will force the voicecard into firmware update mode even if not instructed to do so by the master. What this means is that if for any reason a voicecard does not complete its initialization (for example, if it is disconnected or removed during the boot process), it will lock itself into firmware update mode.","title":"Firmware update and initialization sequence check"},{"location":"ambika/technotes/#master-voicecard-communication-protocol","text":"During a SPI transaction, the master and the voicecard exchange a byte of data. Except when noted otherwise, the voicecard only sends 0xff to the master - as communication is mostly done in the master -> slave direction.","title":"Master &lt;-&gt; voicecard communication protocol"},{"location":"ambika/technotes/#0x00-patch-send","text":"This command is followed by an 8-bit integer N indicating the size of the data block sent in bulk. Then, N bytes follow. These bytes are copied into the patch data structure of the voicecard. Please refer to the patch data structure .","title":"0x00 PATCH SEND"},{"location":"ambika/technotes/#0x10-trigger-note-0x11-trigger-note-legato","text":"This command is followed by 3 bytes: the MSB of the note pitch, the LSB of the note pitch, and the velocity. The pitch is represented by a 14-bit integer, the 7 MSB being the MIDI note number. The velocity is represented by an 8-bit integer, twice the MIDI velocity value. The LSB of the command indicates whether the note is played legato. Whether this should actually retrigger the envelopes or not is a function of the legato mode setting of the patch.","title":"0x10 TRIGGER NOTE / 0x11 TRIGGER NOTE LEGATO"},{"location":"ambika/technotes/#0x20-write-patch-data","text":"This command is followed by an address byte and a value byte; and writes data into the patch data structure .","title":"0x20 WRITE PATCH DATA"},{"location":"ambika/technotes/#0x30-write-part-data","text":"This command is followed by an address byte and a value byte; and writes data into the part data structure","title":"0x30 WRITE PART DATA"},{"location":"ambika/technotes/#0x40-write-modulation-source","text":"This command is followed by a modulation source index and its value. The modulation sources are listed here . At the exception of envelopes, LFO4, operators and noise (which are internally generated), all modulation sources values come from the master MCU.","title":"0x40 WRITE MODULATION SOURCE"},{"location":"ambika/technotes/#0x50-0x51-0x52-write-lfo","text":"This command is followed by a byte, and sets the value of the LFO indexed by the lower nybble of the command byte (0x50 writes LFO1, 0x51 writes LFO2 etc.). The same thing could have been achieved with a 0x40 command, but this command is shorter; and thus allows a faster refresh rate of the LFOs.","title":"0x50 / 0x51 / 0x52 WRITE LFO"},{"location":"ambika/technotes/#0x60-release","text":"This command releases all envelopes.","title":"0x60 RELEASE"},{"location":"ambika/technotes/#0x70-kill-all-sound","text":"This command releases and sets to zero all envelopes.","title":"0x70 KILL ALL SOUND"},{"location":"ambika/technotes/#0x80-0x81-0x82-retrigger-envelope","text":"This command retriggers the envelope indexed by the lower nybble of the command byte (0x80 for envelope 1; 0x81 for envelope 2; 0x82 for envelope 3).","title":"0x80 / 0x81 / 0x82 RETRIGGER ENVELOPE"},{"location":"ambika/technotes/#0xf8-reset-all-controllers","text":"This command resets to their default position the pitch bend, aftertouch, modulation wheels and expression pedal controllers.","title":"0xf8 RESET ALL CONTROLLERS"},{"location":"ambika/technotes/#0xf9-reset","text":"This command stops all sound and resets the voicecard to a blank (silent) patch.","title":"0xf9 RESET"},{"location":"ambika/technotes/#0xfa-lights-out","text":"This command instructs a voicecard that it should stop blinking its LEDs","title":"0xfa LIGHTS OUT"},{"location":"ambika/technotes/#0xfb-start-firmware-upgrade","text":"This command instructs a voicecard to resets into its bootloader so that its firmware can be upgraded. The voicecard is expected to reply with the size of a flash memory block divided by 16. It is followed by a 100ms pause; then this command is repeated 250 times. The master then sends the firmware nibble by nibble; and finally an 0xfb is issued to indicate that the transmission of the firmware is over.","title":"0xfb START FIRMWARE UPGRADE"},{"location":"ambika/technotes/#0xfc-get-slave-id","text":"This command instructs a voicecard to send (during the next transaction), its slave id. The slave id is 0x01 for a sound synthesis voice.","title":"0xfc GET SLAVE ID"},{"location":"ambika/technotes/#0xfd-get-version-id","text":"This command instructs a voicecard to send (during the next transaction), its firmware version id. The higher nybble is the major version number; the lower nybble is the minor version number.","title":"0xfd GET VERSION ID"},{"location":"ambika/technotes/#0xff-sync","text":"This command can be used in three contexts: Receive a byte from a previously issued command. A long string of 0xff messages can be used to resynchronize the state of a voicecard's protocol decoder in case it has skipped a byte. When a voicecard boots, it waits for a first SPI message to decide whether it should boot into the normal code, or enter the firmware upgrade mode. Receiving a 0xff SYNC message makes it boot into the normal code; while receiving a 0xfb START FIRMWARE UGPRADE message makes it stay in bootloader land for firmware upgrade.","title":"0xff SYNC"},{"location":"ambika/voicecards/","text":"These voicecards can synthesize one voice of sound, using a hybrid synthesis engine derived from the Shruthi and three different flavors of analog filters (2-pole multimode SVF ; 4-pole OTA-C ; and 4-pole VC integrator based on a SSM2164). You can listen to a comparison of those (in order: SMR4, SVF LP, SVF BP, SVF HP, 4P). General comments The following observations apply to all the voicecards Layer jumpers A voicecard can either be inserted into the Ambika motherboard ; or stacked on top of another voicecard. In the former case, the two jumpers must be set to the A position. In the later case, the two jumpers must be set to the B position. The first jumper determines where the voicecard is sending its audio signal. You might exploit this to route the two voicecards in the stack to the same individual audio output (passive mixing), though this is not recommended. The second jumper is used to assign a unique CS line to each voicecard. When the master MCU wants to talk to a voicecard, for example to make it play a note, it sets the CS (chip select) line of the voicecard to a voltage of 0V. It is thus very important that no two voicecards are addressed through the same CS line! For this reason, check and double check that the two voicecards in the stack have their second jumper set to A and B respectively. Board layout The lower part of the board is the digital section, containing an ATmega-328p MCU responsible for the sound and control signal generation, and a MCP4822 dual DAC converting the oscillators and VCA CVs into analog signals. VCF and resonance CVs are generated directly by the ATMega328p using PWM. The upper part is the analog filter and VCA - emplying a different circuit for each voicecard in this family. Board assembly Work in the following order: Resistors and diodes Ceramic capacitors, crystal IC sockets, LEDs, trimmer Film and electrolytic capacitors ISP connector And finally, solder the pair of 6x1 header for board stacking. Do not trim the leads of the board stacking connectors . You might have gotten this habit if you have built Shruthi-1s... Don't do it! The voicecard is stacked on top of the motherboard, so the 6 leads of the 1x6 connectors should be kept. This is the same stacking approach as the Arduino \"shields\". Keep in mind that the boards are spaced by 12mm vertically. This might be of importance if you use styroflex caps on the SVF or 4P boards - you have to make sure that their leads won't touch the board above it. VCF tuning All boards have a V/Oct trimmer to tune to a correct musical scale the tone emitted by the filter when it reaches self-oscillation. To do this adjustment, start from a blank patch. It greatly helps to assign the voicecard being tuned (and no other voicecard) to part 1. Set all oscillators to none , kill all modulations on the filter cutoff -- env2> and lfo2> modulation amounts to 0 -- and set cutoff and resonance to 63. You should hear the self-oscillation tone. Adjust the V/Oct trimmer so that the intervals are respected \u2013 that is to say, when you play C3 then C4, you should hear two notes, maybe not C3s and C4s, but they must be one octave apart. If you do not have a good sense of pitch, you can try a software tuner like Tuna Pitch on OS X. If the filter is correctly tuned, you should be able to play the filter \"self oscillation tone\" across roughly 4 octaves with correct tuning. Note that tuning might vary a bit with temperature, so there is no need to spend too much time on this! As far as the digital oscillators are concerned, they are always in tune and do not need any calibration! Parts sourcing Each board has 3 low-profile 100uF capacitors that serve as local bypassing of the +5V, +8V and -8V rails. Panasonic makes some which are easy to find. Check the dimensions carefully when ordering from other sources. 10mm is the maximum allowed height. The connector used for stacking the voicecards is often labelled as an \"Arduino stackable header\" or \"Arduino shield header\". This is the part you need, though it is often sold at exorbitant prices for what it is. Schematics and PCB SVF voicecard This filter circuit is documented here . A digitally controlled SPQT switch (half 4052) commutes the 3 modes (LP, HP and BP). \\ The schematics in PDF format are available here . You can find the Eagle files for this board in the source code hosted on github . If you need a reference during assembly, you can download this printout of the top side of the board and print it at a 2:1 scale. Bill of materials. The DAC output goes straight to an SSM2164 expo gain cell. This does not mean that the VCA has an exponential response. It is linearized in software. This costs a bit of resolution. C19 smoothes the filter CV. A value of 68nF is recommended. The original design (hence the silkscreen on the board) used 33nF which gives snappier, \"clickier\" filter envelopes. I usually build this board in 4 steps - one with resistors, one with ceramic capacitors, one with IC sockets, and one with everything else! \\ \\ \\ SMR4 voicecard This filter uses the same topology as the SMR4mkII , with the following change: OTA / op-amp integrator cells are replaced by OTA-C-Darlington buffer cells. This saves a quad op-amp which wouldn't have fit on the board. The difference can be heard when increasing the resonance. \\ The schematics in PDF format are available here . You can find the Eagle files for this board in the source code hosted on github . If you need a reference during assembly, you can download this printout of the top side of the board and print it at a 2:1 scale. Bill of materials. 4P voicecard This filter uses the same core as the 4-Pole Mission Shruthi-1 filter board , but only provides the LP4 output. \\ The schematics in PDF format are available here . You can find the Eagle files for this board in the source code hosted on github . If you need a reference during assembly, you can download this printout of the top side of the board and print it at a 2:1 scale. Bill of materials. License These circuits and PCB layouts are made available under a cc-by-sa-3.0 license.","title":"Other voicecards"},{"location":"ambika/voicecards/#general-comments","text":"The following observations apply to all the voicecards","title":"General comments"},{"location":"ambika/voicecards/#layer-jumpers","text":"A voicecard can either be inserted into the Ambika motherboard ; or stacked on top of another voicecard. In the former case, the two jumpers must be set to the A position. In the later case, the two jumpers must be set to the B position. The first jumper determines where the voicecard is sending its audio signal. You might exploit this to route the two voicecards in the stack to the same individual audio output (passive mixing), though this is not recommended. The second jumper is used to assign a unique CS line to each voicecard. When the master MCU wants to talk to a voicecard, for example to make it play a note, it sets the CS (chip select) line of the voicecard to a voltage of 0V. It is thus very important that no two voicecards are addressed through the same CS line! For this reason, check and double check that the two voicecards in the stack have their second jumper set to A and B respectively.","title":"Layer jumpers"},{"location":"ambika/voicecards/#board-layout","text":"The lower part of the board is the digital section, containing an ATmega-328p MCU responsible for the sound and control signal generation, and a MCP4822 dual DAC converting the oscillators and VCA CVs into analog signals. VCF and resonance CVs are generated directly by the ATMega328p using PWM. The upper part is the analog filter and VCA - emplying a different circuit for each voicecard in this family.","title":"Board layout"},{"location":"ambika/voicecards/#board-assembly","text":"Work in the following order: Resistors and diodes Ceramic capacitors, crystal IC sockets, LEDs, trimmer Film and electrolytic capacitors ISP connector And finally, solder the pair of 6x1 header for board stacking. Do not trim the leads of the board stacking connectors . You might have gotten this habit if you have built Shruthi-1s... Don't do it! The voicecard is stacked on top of the motherboard, so the 6 leads of the 1x6 connectors should be kept. This is the same stacking approach as the Arduino \"shields\". Keep in mind that the boards are spaced by 12mm vertically. This might be of importance if you use styroflex caps on the SVF or 4P boards - you have to make sure that their leads won't touch the board above it.","title":"Board assembly"},{"location":"ambika/voicecards/#vcf-tuning","text":"All boards have a V/Oct trimmer to tune to a correct musical scale the tone emitted by the filter when it reaches self-oscillation. To do this adjustment, start from a blank patch. It greatly helps to assign the voicecard being tuned (and no other voicecard) to part 1. Set all oscillators to none , kill all modulations on the filter cutoff -- env2> and lfo2> modulation amounts to 0 -- and set cutoff and resonance to 63. You should hear the self-oscillation tone. Adjust the V/Oct trimmer so that the intervals are respected \u2013 that is to say, when you play C3 then C4, you should hear two notes, maybe not C3s and C4s, but they must be one octave apart. If you do not have a good sense of pitch, you can try a software tuner like Tuna Pitch on OS X. If the filter is correctly tuned, you should be able to play the filter \"self oscillation tone\" across roughly 4 octaves with correct tuning. Note that tuning might vary a bit with temperature, so there is no need to spend too much time on this! As far as the digital oscillators are concerned, they are always in tune and do not need any calibration!","title":"VCF tuning"},{"location":"ambika/voicecards/#parts-sourcing","text":"Each board has 3 low-profile 100uF capacitors that serve as local bypassing of the +5V, +8V and -8V rails. Panasonic makes some which are easy to find. Check the dimensions carefully when ordering from other sources. 10mm is the maximum allowed height. The connector used for stacking the voicecards is often labelled as an \"Arduino stackable header\" or \"Arduino shield header\". This is the part you need, though it is often sold at exorbitant prices for what it is.","title":"Parts sourcing"},{"location":"ambika/voicecards/#schematics-and-pcb","text":"","title":"Schematics and PCB"},{"location":"ambika/voicecards/#svf-voicecard","text":"This filter circuit is documented here . A digitally controlled SPQT switch (half 4052) commutes the 3 modes (LP, HP and BP). \\ The schematics in PDF format are available here . You can find the Eagle files for this board in the source code hosted on github . If you need a reference during assembly, you can download this printout of the top side of the board and print it at a 2:1 scale. Bill of materials. The DAC output goes straight to an SSM2164 expo gain cell. This does not mean that the VCA has an exponential response. It is linearized in software. This costs a bit of resolution. C19 smoothes the filter CV. A value of 68nF is recommended. The original design (hence the silkscreen on the board) used 33nF which gives snappier, \"clickier\" filter envelopes. I usually build this board in 4 steps - one with resistors, one with ceramic capacitors, one with IC sockets, and one with everything else! \\ \\ \\","title":"SVF voicecard"},{"location":"ambika/voicecards/#smr4-voicecard","text":"This filter uses the same topology as the SMR4mkII , with the following change: OTA / op-amp integrator cells are replaced by OTA-C-Darlington buffer cells. This saves a quad op-amp which wouldn't have fit on the board. The difference can be heard when increasing the resonance. \\ The schematics in PDF format are available here . You can find the Eagle files for this board in the source code hosted on github . If you need a reference during assembly, you can download this printout of the top side of the board and print it at a 2:1 scale. Bill of materials.","title":"SMR4 voicecard"},{"location":"ambika/voicecards/#4p-voicecard","text":"This filter uses the same core as the 4-Pole Mission Shruthi-1 filter board , but only provides the LP4 output. \\ The schematics in PDF format are available here . You can find the Eagle files for this board in the source code hosted on github . If you need a reference during assembly, you can download this printout of the top side of the board and print it at a 2:1 scale. Bill of materials.","title":"4P voicecard"},{"location":"ambika/voicecards/#license","text":"These circuits and PCB layouts are made available under a cc-by-sa-3.0 license.","title":"License"},{"location":"anushri/build/","text":"Anushri is made of two circuit boards. The first board (main board) is holding the power supply, the whole analog synthesis signal chain, the MIDI interface and the main processor. The second board (control board) contains all the controls (switches, pots, LEDs, and connectors). A consequence of that is that builders with a love for panel-mounted controls can build the main board and just wire all the controls to it. We don't recommend that unless you have some insane passion to show. Schematics and PCB Main board schematics in PDF format. Control board schematics in PDF format. Main board top and bottom part placement. Control board part placement . You can find the Eagle files for this board in the source code hosted on github . Bill of materials Bill of Materials . Some friendly notes for the self-sourcing crowd: Digikey resistor values might be a bit different due to strict adherence to the E-series. This is not a problem. A J112 can be used as a substitute for the 2N5458. A BF245 can also be used, but it needs to be mounted backwards because of a different pinout. The TS912 is an unusual - but justified here - choice of op-amp. Look for +/- 5V operation and true rail to rail I/O if you want to source a substitute. Voltage references (LM4040) are available in different precision grades identified by letters A, B, C, D. For integration into a modular setup and precise CV in/out, it is recommended to use the A or B grades. C grade is fine for standalone use. If pots with center-detent are hard to find, you can use a standard part. When it matters, the software scanning the pot will still apply a \"virtual notch\" to the center of the pot. Building for Eurorack If you want to build Anushri as an Eurorack module: Do not solder the input/output connectors at the back of the unit (MIDI, audio IN/OUT, on/off switch, DC power). Do not insert the LT1054 DC-DC converter in its socket. Solder a 2x5 power connector (-12V, ground, ground, ground, +12V) on the edge of the main board. The rack-mounting kit contains a spare panel that can be used to relocate the MIDI I/O and the 6.35mm audio output to the front panel. Assembly instructions Some equipment you'll need: Soldering iron + solder (nothing fancy, a 15 or 20W will do). Cutters. We assume you know soldering. If you don't, look first at this tutorial . DISCLAIMER: We are not responsible for anything wrong (including electric shocks, malfunctions, fires, accidents involving a soldering iron) that might happen during the assembly of the kit. Everything you do while assembling the kit is at your own risks. Resistors The assembly starts with the main board. All resistors have a 1% tolerance so their last ring is always brown (if it isn't, you are looking at it backwards). It is recommended to test the value of one resistor from each strip before stuffing them in the board. Start with the 100's decade: 4x 220R resistors (red, red, black, black) at positions R1, R3, R4, R13. 11x 470R resistors (yellow, purple, black, black) at positions R5, R6, R9, R10, R21, R22, R27, R51, R55, R57, R62. The 1k's decade: 7x 4.7k resistors (yellow, purple, black, brown) at positions R25, R38, R39, R45, R50, R52, R53. The 10k's decade: 9x 10k (brown, black, black, red) at positions R2, R29, R37, R49, R63, R64, R70, R73, R77. 1x 12k (brown, red, black, red) at position R28. 3x 15k (brown, green, black, red) at positions R18, R30, R35. 10x 22k (red, red, black, red) at positions R11, R14, R23, R26, R36, R40, R43, R44, R46, R47. 1x 27k (red, purple, black, red) at position R72. 9x 33k (orange, orange, black, red) at positions R12, R16, R17, R19, R20, R24, R31, R54, R67. 1x 39k (orange, white, black, red) at position R71. 1x 49.9k (yellow, white, white, red) at position R68. 1x 62k (blue, red, black, red) at position R66. 2x 68k (blue, grey, black, red) at positions R56, R59. The 100k's decade: 9x 100k (brown, black, black, orange) at positions R7, R8, R33, R34, R41, R42, R48, R60, R61. 1x 150k (brown, green, black, orange) at position R32. 4x 200k (red, black, black, orange) at positions R15, R58, R65, R69. Diodes Diodes are polarized, and their polarity is indicated by a ring. This should match the ring/stripe printed on the circuit board. 3x 1N4148 (1N4148 printed on the body of the diode) at positions D1, D5, D6. 2x 3.6V Zener (1N5227B or BZX79 C3V6) at positions D3 and D4. 1x 1N400x (large, power supply protection diode) at position D2. 1N4001, 1N4002, 1N4003, 1N4004 only differ by their current/voltage ratings, all are fine for this project. You can also add at this stage the quartz crystal at position Q3. It is not polarized. Ceramic capacitors Ceramic capacitors look like yellow or blue \"drops\". They are not polarized. 2x 10pF (100) at positions C20, C51. 2x 18pF (180) at positions C54, C55. 1x 100pF (101) at position C12. 5x 560pF (561) at positions C8, C17, C30, C32, C35. 33x 100nF (104). IC sockets Add the IC sockets. It is strongly recommended to align the notch of the IC socket with the notch on the symbol printed on the PCB. 9x DIP8. 3x DIP14. 7x DIP16. 1x DIP28. Transistors, special resistors and capacitors Add: 3x trimmers. The adjustment screws should be on the same side as on the symbol printed on the board. 3x LM4040 voltage references, 1x 2N3906 transistor and 1x 2N5485. Check the symbol printed on the board for their alignment. 1x 22nF film capacitor (C4). 2x 220pF styroflex capacitor (C14, C28). 1x 2.2nF styroflex capacitor (C9). You can solder it to pins 1 3 (leaving the middle pin) or to pins to 2 3 (leaving the left pin) depending on the size of the part. See the image below. 1x 1.6 10k resistor network. See the image below for orientation: the dot on the resistor network should be on the same side as the 1 printed on the board. Electrolytic and tantalum capacitors Add 4x 4.7uF non-polarized capacitors. Just ignore the +/- printed on the board - these parts are not polarized. Add 5x 100uF electrolytic capacitors. These parts are polarized, the +/- is printed on the PCB. The negative lead is identified by a white stripe and a shorter lead. Add 1x 10uF tantalum capacitor. The positive lead is identified by a stripe on the capacitor. Power supply Add the two voltage regulators (LM7805 and LM7905). These are two different parts, don't mix them up even if they look similar. Add the DC jack and power switch. You don't have to solder the power switch if you intend to mount the unit behind a Euro panel. Connectors Add the main audio in/out connectors - unless you intend to mount the unit behind a panel for your Eurorack setup of course. Add the 2x3 ISP connector (unless you don't have an AVR programmer or are not interested in firmware development). Solder the 4x male 2x8 connectors used to connect the two boards. Note that they are on the other side of the board. \\ Finally, add the MIDI connectors That's it! You can insert the IC. Note that the TS912 used in the first batch of kits is now replaced by the more modern TLV2372. Here's how the finished board looks like: Now, let's move to the control board. Add the 6x 220R resistors (red, red, black, black). Add the 6x switches. Add the 6x LEDs. Note that they are polarized. The symbol printed on the board shows a round side (+) and a flat edge (~~). The long lead of the LED is the (+), the short one the (~~). See the image below for reference. Add the 4x 2x8 female connectors on the other side of the board. Anushri uses three different kinds of pots. Don't mix them up! Add the 12x jack connectors. It is recommended to solder only one leg (the middle one) of all of them first, so that their position can be easily tweaked for optimal alignment. Once you are satisfied with their alignment, solder the two remaining legs. Add the 2x DPDT and 2x SPDT switches. Add the 2x 100k pots with audio taper (resonance and main volume). An A is printed on the pot symbol on the PCB; and to identify the right part you can read \"FA 100K\" under the pot. If you are unsure which pot is which, check the resistance between the first and third lead before soldering them. Add the 3x 10k pots with center detent. A \"CD\" label is printed on the pot symbol on the PCB; and to identify the right part you can try turning the pot and check for the click/detent at 12'o'clock. These are used for the pulse-width, and LFO/ENV pitch and PWM modulation where the central position of the pot corresponds to a neutral setting. Add the remaining 16 10k pots. Here is how it looks like with switches and knobs (not really necessary at this stage...) in place. Test and calibration VCO calibration VCO calibration is needed only if you plan to use the CV in/out for accurate pitch control. Otherwise, you can let the software tune the unit by holding the \"hold\" button and pressing \"run/stop\". You should hear a low-volume arpeggio (played by the unit to measure the pitch produced by the VCO for a few test voltages). When the unit is software-tuned, the VCO will react incorrectly to external VCO CV signals, and will produce VCO CV signals which are slightly off (since they have the compensation of software-tuning built into them). The calibration procedure consists in the following steps: Power the unit on and leave it on for a few minutes. Make sure that oscillators sync is disabled. The sync switch must be to the low position. Hold the \"hold\" button and press \"rec\" to disable software correction of tuning. Set the pot labelled \"2\" to its minimal position. Adjust the two VCO trimmers (offset and scale) until the synth plays in tune in the C1 - C4 range. Note that tuning accuracy starts to degrade below 50 Hz due to some internal resistance on the SSM2164 inputs (which are not true virtual grounds), and above 2kHz due to integrator reset time compensation through R25 falling apart, and deviation from exponential response from the SS2164. VCF calibration Dial a patch in which the oscillators are silent. This can be achieved by enabling sync and setting the oscillators pitch to a very low value. Disable the envelope / LFO modulation on filter cutoff. Set cutoff to a middle value. Set resonance to a maximum value. You should hear the self-oscillation tone. Adjust the V/Oct trimmer so that the intervals are respected \u2013 that is to say, when you play C3 then C4, you should hear two notes, maybe not C3s and C4s, but they must be one octave apart. If you do not have a good sense of pitch, you can try a software tuner like Tuna Pitch on OS X. If the filter is correctly tuned, you should be able to play the filter \"self oscillation tone\" across roughly 4 octaves with correct tuning. Note that VCF tuning might vary a bit with temperature, so there is no need to spend too much time on this! Mechanical assembly The following mechanical parts are used to hold the boards and the case together: Note that a newer revision of the case has 10 holes, not 4, on its bottom panel. It is recommended to do the assembly from the inner to the outer - start by assembling the two boards together... ... Then screw the top and bottom case panels to them, and finish the assembly of the case with the left, right, front and back panels. Troubleshooting Power distribution You can click on the image to open larger versions. blue points : ground (can be used as a reference point for voltage measurements). 1 : Input DC voltage, should be in the 7.5V..12V range, preferably with little ripple. 2 : Input DC voltage post protection diode - a voltage drop of a few hundred mV should be observed. 3 : Output of voltage inverter. Should be close to the voltage at point 2 in absolute value, but negative. red points : +5V, \u00b12%. green points : -5V, \u00b12%. purple points : +4.1V, \u00b11%. cyan point : -4.1V, \u00b11%. Signal path Use one of the GND pads as a reference for voltage measurements. If you don't have a scope, the verification of audio signals can be done by connecting the signal to a high-impedance amplifier (mixer or sound-card input, if possible switched to \"high-Z\" mode). A : VCO CV. With default patch, C3 = 2.048V, 0.5 V/Oct. Affected by ENV or LFO VCO modulations, mod-wheel... Might be scaled or offset if software tuning is used. B : VCF modulations CV. Centered at 2.048V, 0.25 V/Oct. By default, should track with keyboard, and affected by envelope and LFO modulations. C : VCA CV. 0V at rest; 4.1V at full amplitude. D : PWM modulation CV. 0V at rest, goes up to 4.1V when a LFO or ENV modulation is applied at full amount. E : VCO reset pulse. 0V, with a short pulse close to +5V at each period of the VCO. F : VCO sawtooth core signal. 0 to 2.5V, ramping up. G : VCO sawtooth core signal, DC offset largely removed, ramping down. H : VCO square signal derived from the sawtooth. I , J : sub-oscillator -1 octave and -2 octaves signals. K : mixer output. L : SSM2164 VCF control CV. Near 0V when the filter is fully opened ; near 2.4V when the filter is fully closed. M : VCF highpass output. N : VCF bandpass output. O : VCF lowpass output. P : Distortion/fuzz output. Q : VCA input signal (BP / HP / LP, with or without fuzz according to the 2 switches in the filter section). R : Final output signal. S : Drum section signal. T : Drum section signal sent to the final input (should be the same as S, unless a patchcord is inserted in the corresponding jack in the control board). U : DCO signal (square, 0V to 5V, should track pitch of MIDI note). V : VCO tuning feedback signal. Square, should not go below ground. MCU An oscilloscope is required for these checks. 10 : Pot scanner signal. This is a sequence of 14 steps, each about 1.6ms wide, their amplitude equal to the position of each potentiometer. Moving a pot should change the height of a step in the sequence. 11 : DAC clock signal. Bursts of two sequences of 8 steps at 10 MHz. 12 : DCO output signal. 13 : DAC1 selection signal. Pulse at 2.4kHz. 14 : DAC2 selection signal. Pulse at 2.4kHz. 15 : VCO square output, sent back to the MCU for tuning. 16 : Drums PWM signal. Carrier at 39kHz. 17 : MIDI in signal. +5V at rest, dips at 0V when MIDI data is received. License This circuit and PCB layout is made available under a cc-by-sa-3.0 license. Releases revC Original release.","title":"Build instructions"},{"location":"anushri/build/#schematics-and-pcb","text":"Main board schematics in PDF format. Control board schematics in PDF format. Main board top and bottom part placement. Control board part placement . You can find the Eagle files for this board in the source code hosted on github .","title":"Schematics and PCB"},{"location":"anushri/build/#bill-of-materials","text":"Bill of Materials . Some friendly notes for the self-sourcing crowd: Digikey resistor values might be a bit different due to strict adherence to the E-series. This is not a problem. A J112 can be used as a substitute for the 2N5458. A BF245 can also be used, but it needs to be mounted backwards because of a different pinout. The TS912 is an unusual - but justified here - choice of op-amp. Look for +/- 5V operation and true rail to rail I/O if you want to source a substitute. Voltage references (LM4040) are available in different precision grades identified by letters A, B, C, D. For integration into a modular setup and precise CV in/out, it is recommended to use the A or B grades. C grade is fine for standalone use. If pots with center-detent are hard to find, you can use a standard part. When it matters, the software scanning the pot will still apply a \"virtual notch\" to the center of the pot.","title":"Bill of materials"},{"location":"anushri/build/#building-for-eurorack","text":"If you want to build Anushri as an Eurorack module: Do not solder the input/output connectors at the back of the unit (MIDI, audio IN/OUT, on/off switch, DC power). Do not insert the LT1054 DC-DC converter in its socket. Solder a 2x5 power connector (-12V, ground, ground, ground, +12V) on the edge of the main board. The rack-mounting kit contains a spare panel that can be used to relocate the MIDI I/O and the 6.35mm audio output to the front panel.","title":"Building for Eurorack"},{"location":"anushri/build/#assembly-instructions","text":"Some equipment you'll need: Soldering iron + solder (nothing fancy, a 15 or 20W will do). Cutters. We assume you know soldering. If you don't, look first at this tutorial . DISCLAIMER: We are not responsible for anything wrong (including electric shocks, malfunctions, fires, accidents involving a soldering iron) that might happen during the assembly of the kit. Everything you do while assembling the kit is at your own risks.","title":"Assembly instructions"},{"location":"anushri/build/#resistors","text":"The assembly starts with the main board. All resistors have a 1% tolerance so their last ring is always brown (if it isn't, you are looking at it backwards). It is recommended to test the value of one resistor from each strip before stuffing them in the board. Start with the 100's decade: 4x 220R resistors (red, red, black, black) at positions R1, R3, R4, R13. 11x 470R resistors (yellow, purple, black, black) at positions R5, R6, R9, R10, R21, R22, R27, R51, R55, R57, R62. The 1k's decade: 7x 4.7k resistors (yellow, purple, black, brown) at positions R25, R38, R39, R45, R50, R52, R53. The 10k's decade: 9x 10k (brown, black, black, red) at positions R2, R29, R37, R49, R63, R64, R70, R73, R77. 1x 12k (brown, red, black, red) at position R28. 3x 15k (brown, green, black, red) at positions R18, R30, R35. 10x 22k (red, red, black, red) at positions R11, R14, R23, R26, R36, R40, R43, R44, R46, R47. 1x 27k (red, purple, black, red) at position R72. 9x 33k (orange, orange, black, red) at positions R12, R16, R17, R19, R20, R24, R31, R54, R67. 1x 39k (orange, white, black, red) at position R71. 1x 49.9k (yellow, white, white, red) at position R68. 1x 62k (blue, red, black, red) at position R66. 2x 68k (blue, grey, black, red) at positions R56, R59. The 100k's decade: 9x 100k (brown, black, black, orange) at positions R7, R8, R33, R34, R41, R42, R48, R60, R61. 1x 150k (brown, green, black, orange) at position R32. 4x 200k (red, black, black, orange) at positions R15, R58, R65, R69.","title":"Resistors"},{"location":"anushri/build/#diodes","text":"Diodes are polarized, and their polarity is indicated by a ring. This should match the ring/stripe printed on the circuit board. 3x 1N4148 (1N4148 printed on the body of the diode) at positions D1, D5, D6. 2x 3.6V Zener (1N5227B or BZX79 C3V6) at positions D3 and D4. 1x 1N400x (large, power supply protection diode) at position D2. 1N4001, 1N4002, 1N4003, 1N4004 only differ by their current/voltage ratings, all are fine for this project. You can also add at this stage the quartz crystal at position Q3. It is not polarized.","title":"Diodes"},{"location":"anushri/build/#ceramic-capacitors","text":"Ceramic capacitors look like yellow or blue \"drops\". They are not polarized. 2x 10pF (100) at positions C20, C51. 2x 18pF (180) at positions C54, C55. 1x 100pF (101) at position C12. 5x 560pF (561) at positions C8, C17, C30, C32, C35. 33x 100nF (104).","title":"Ceramic capacitors"},{"location":"anushri/build/#ic-sockets","text":"Add the IC sockets. It is strongly recommended to align the notch of the IC socket with the notch on the symbol printed on the PCB. 9x DIP8. 3x DIP14. 7x DIP16. 1x DIP28.","title":"IC sockets"},{"location":"anushri/build/#transistors-special-resistors-and-capacitors","text":"Add: 3x trimmers. The adjustment screws should be on the same side as on the symbol printed on the board. 3x LM4040 voltage references, 1x 2N3906 transistor and 1x 2N5485. Check the symbol printed on the board for their alignment. 1x 22nF film capacitor (C4). 2x 220pF styroflex capacitor (C14, C28). 1x 2.2nF styroflex capacitor (C9). You can solder it to pins 1 3 (leaving the middle pin) or to pins to 2 3 (leaving the left pin) depending on the size of the part. See the image below. 1x 1.6 10k resistor network. See the image below for orientation: the dot on the resistor network should be on the same side as the 1 printed on the board.","title":"Transistors, special resistors and capacitors"},{"location":"anushri/build/#electrolytic-and-tantalum-capacitors","text":"Add 4x 4.7uF non-polarized capacitors. Just ignore the +/- printed on the board - these parts are not polarized. Add 5x 100uF electrolytic capacitors. These parts are polarized, the +/- is printed on the PCB. The negative lead is identified by a white stripe and a shorter lead. Add 1x 10uF tantalum capacitor. The positive lead is identified by a stripe on the capacitor.","title":"Electrolytic and tantalum capacitors"},{"location":"anushri/build/#power-supply","text":"Add the two voltage regulators (LM7805 and LM7905). These are two different parts, don't mix them up even if they look similar. Add the DC jack and power switch. You don't have to solder the power switch if you intend to mount the unit behind a Euro panel.","title":"Power supply"},{"location":"anushri/build/#connectors","text":"Add the main audio in/out connectors - unless you intend to mount the unit behind a panel for your Eurorack setup of course. Add the 2x3 ISP connector (unless you don't have an AVR programmer or are not interested in firmware development). Solder the 4x male 2x8 connectors used to connect the two boards. Note that they are on the other side of the board. \\ Finally, add the MIDI connectors That's it! You can insert the IC. Note that the TS912 used in the first batch of kits is now replaced by the more modern TLV2372. Here's how the finished board looks like: Now, let's move to the control board. Add the 6x 220R resistors (red, red, black, black). Add the 6x switches. Add the 6x LEDs. Note that they are polarized. The symbol printed on the board shows a round side (+) and a flat edge (~~). The long lead of the LED is the (+), the short one the (~~). See the image below for reference. Add the 4x 2x8 female connectors on the other side of the board. Anushri uses three different kinds of pots. Don't mix them up! Add the 12x jack connectors. It is recommended to solder only one leg (the middle one) of all of them first, so that their position can be easily tweaked for optimal alignment. Once you are satisfied with their alignment, solder the two remaining legs. Add the 2x DPDT and 2x SPDT switches. Add the 2x 100k pots with audio taper (resonance and main volume). An A is printed on the pot symbol on the PCB; and to identify the right part you can read \"FA 100K\" under the pot. If you are unsure which pot is which, check the resistance between the first and third lead before soldering them. Add the 3x 10k pots with center detent. A \"CD\" label is printed on the pot symbol on the PCB; and to identify the right part you can try turning the pot and check for the click/detent at 12'o'clock. These are used for the pulse-width, and LFO/ENV pitch and PWM modulation where the central position of the pot corresponds to a neutral setting. Add the remaining 16 10k pots. Here is how it looks like with switches and knobs (not really necessary at this stage...) in place.","title":"Connectors"},{"location":"anushri/build/#test-and-calibration","text":"","title":"Test and calibration"},{"location":"anushri/build/#vco-calibration","text":"VCO calibration is needed only if you plan to use the CV in/out for accurate pitch control. Otherwise, you can let the software tune the unit by holding the \"hold\" button and pressing \"run/stop\". You should hear a low-volume arpeggio (played by the unit to measure the pitch produced by the VCO for a few test voltages). When the unit is software-tuned, the VCO will react incorrectly to external VCO CV signals, and will produce VCO CV signals which are slightly off (since they have the compensation of software-tuning built into them). The calibration procedure consists in the following steps: Power the unit on and leave it on for a few minutes. Make sure that oscillators sync is disabled. The sync switch must be to the low position. Hold the \"hold\" button and press \"rec\" to disable software correction of tuning. Set the pot labelled \"2\" to its minimal position. Adjust the two VCO trimmers (offset and scale) until the synth plays in tune in the C1 - C4 range. Note that tuning accuracy starts to degrade below 50 Hz due to some internal resistance on the SSM2164 inputs (which are not true virtual grounds), and above 2kHz due to integrator reset time compensation through R25 falling apart, and deviation from exponential response from the SS2164.","title":"VCO calibration"},{"location":"anushri/build/#vcf-calibration","text":"Dial a patch in which the oscillators are silent. This can be achieved by enabling sync and setting the oscillators pitch to a very low value. Disable the envelope / LFO modulation on filter cutoff. Set cutoff to a middle value. Set resonance to a maximum value. You should hear the self-oscillation tone. Adjust the V/Oct trimmer so that the intervals are respected \u2013 that is to say, when you play C3 then C4, you should hear two notes, maybe not C3s and C4s, but they must be one octave apart. If you do not have a good sense of pitch, you can try a software tuner like Tuna Pitch on OS X. If the filter is correctly tuned, you should be able to play the filter \"self oscillation tone\" across roughly 4 octaves with correct tuning. Note that VCF tuning might vary a bit with temperature, so there is no need to spend too much time on this!","title":"VCF calibration"},{"location":"anushri/build/#mechanical-assembly","text":"The following mechanical parts are used to hold the boards and the case together: Note that a newer revision of the case has 10 holes, not 4, on its bottom panel. It is recommended to do the assembly from the inner to the outer - start by assembling the two boards together... ... Then screw the top and bottom case panels to them, and finish the assembly of the case with the left, right, front and back panels.","title":"Mechanical assembly"},{"location":"anushri/build/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"anushri/build/#power-distribution","text":"You can click on the image to open larger versions. blue points : ground (can be used as a reference point for voltage measurements). 1 : Input DC voltage, should be in the 7.5V..12V range, preferably with little ripple. 2 : Input DC voltage post protection diode - a voltage drop of a few hundred mV should be observed. 3 : Output of voltage inverter. Should be close to the voltage at point 2 in absolute value, but negative. red points : +5V, \u00b12%. green points : -5V, \u00b12%. purple points : +4.1V, \u00b11%. cyan point : -4.1V, \u00b11%.","title":"Power distribution"},{"location":"anushri/build/#signal-path","text":"Use one of the GND pads as a reference for voltage measurements. If you don't have a scope, the verification of audio signals can be done by connecting the signal to a high-impedance amplifier (mixer or sound-card input, if possible switched to \"high-Z\" mode). A : VCO CV. With default patch, C3 = 2.048V, 0.5 V/Oct. Affected by ENV or LFO VCO modulations, mod-wheel... Might be scaled or offset if software tuning is used. B : VCF modulations CV. Centered at 2.048V, 0.25 V/Oct. By default, should track with keyboard, and affected by envelope and LFO modulations. C : VCA CV. 0V at rest; 4.1V at full amplitude. D : PWM modulation CV. 0V at rest, goes up to 4.1V when a LFO or ENV modulation is applied at full amount. E : VCO reset pulse. 0V, with a short pulse close to +5V at each period of the VCO. F : VCO sawtooth core signal. 0 to 2.5V, ramping up. G : VCO sawtooth core signal, DC offset largely removed, ramping down. H : VCO square signal derived from the sawtooth. I , J : sub-oscillator -1 octave and -2 octaves signals. K : mixer output. L : SSM2164 VCF control CV. Near 0V when the filter is fully opened ; near 2.4V when the filter is fully closed. M : VCF highpass output. N : VCF bandpass output. O : VCF lowpass output. P : Distortion/fuzz output. Q : VCA input signal (BP / HP / LP, with or without fuzz according to the 2 switches in the filter section). R : Final output signal. S : Drum section signal. T : Drum section signal sent to the final input (should be the same as S, unless a patchcord is inserted in the corresponding jack in the control board). U : DCO signal (square, 0V to 5V, should track pitch of MIDI note). V : VCO tuning feedback signal. Square, should not go below ground.","title":"Signal path"},{"location":"anushri/build/#mcu","text":"An oscilloscope is required for these checks. 10 : Pot scanner signal. This is a sequence of 14 steps, each about 1.6ms wide, their amplitude equal to the position of each potentiometer. Moving a pot should change the height of a step in the sequence. 11 : DAC clock signal. Bursts of two sequences of 8 steps at 10 MHz. 12 : DCO output signal. 13 : DAC1 selection signal. Pulse at 2.4kHz. 14 : DAC2 selection signal. Pulse at 2.4kHz. 15 : VCO square output, sent back to the MCU for tuning. 16 : Drums PWM signal. Carrier at 39kHz. 17 : MIDI in signal. +5V at rest, dips at 0V when MIDI data is received.","title":"MCU"},{"location":"anushri/build/#license","text":"This circuit and PCB layout is made available under a cc-by-sa-3.0 license.","title":"License"},{"location":"anushri/build/#releases","text":"revC Original release.","title":"Releases"},{"location":"anushri/manual/","text":"Getting started Overview Congratulations for having successfully built Anushri! Anushri is a monophonic synthesizer with an all-analog signal path, paired with a lo-fi digital drum synthesizer. These two sections are controlled by an on-board sequencer/arpeggiator, featuring generative drum pattern sequencing. Anushri is open to the modular world thanks to its analog patching area. Panels and controls A . The upper group of knobs and switches controls the analog sound synthesis. The signal \"flows\" from left to right: VCO, mixer, VCF. Most of these knobs are directly interacting with the analog audio signal (no latency, no stepping... but no MIDI control). B . The lower group of 10 knobs can serve multiple functions: Editing the remaining parameters of the synth. Setting sequencer/arp/MIDI keyboard options. Controlling the drum synth and drum sequencer. These 3 different \"pages\" can be activated by the first column of buttons labelled Synth , Clk/Kbd and Drums . One of the three LEDs in the vertical column indicates the current page. Note that if you intend to play Anushri as a synth, without the drum machine and without experimenting with its sequencer, you can leave it on the Synth page forever and enjoy a \"1 knob per function\" layout. Even if you are using the sequencer and drum machine, you'll notice that you rarely switch pages. C . Output volume control. D . Additional CV/Gate/Audio I/O for modular systems. E . Indicator LEDs. The purpose of the LEDs is shown below: LFO . The brightness of this LED reflects the LFO value. Gate . This LED is lit when a key is held or when the gate input is high. Beat . This LED is lit when the steps 1, 5, 9, 13... of the step sequencer are active. The 3 remaining LEDs indicate the active page, and thus the function of the lower group of knobs. F . Switches. The first column of 3 switches is used to select the active page. The second column of 3 switches controls the sequencer. The Hold button serves a few additional functions when held and used as a \"shift\" key - this will be revealed throughout this documentation. G , H . MIDI in and MIDI out. I , J . Audio out and Audio in. The input signal goes through the VCF and VCA. K . On/Off switch. L . Power supply connector. A 7.5V or 9V DC supply must be used, with a current rating above 200mA. The connector has a 2.1mm barrel, with a positive center tip polarity. Most universal power supplies allow the polarity to be selected \u2014 the polarity being often represented by a diagram like this: \u2013 (o , or by the indication tip: . Anushri's power supply circuitry has a reverse polarity protection and can handle voltages up to 12V. Above this, one of the chip inside the unit could be destroyed by overvoltage. Monophonic analog synthesizer This section documents Anushri's analog synthesis section. Anushri follows the classic subtractive synthesis scheme: a VCO producing a rich waveform is filtered/colored by a VCF , and the level of the resulting sound is controlled by a VCA . One particularity of Anushri is that it also includes an additional digital square wave generator. Even if this terminology is inaccurate, it'll be referred to as the DCO in the rest of the documentation (For the sake of accuracy: the square wave comes from a programmable interval timer on the main MCU). This second source can be used to achieve sounds traditionally reserved to dual oscillator synthesizers, such as FM, hard-sync, or rich detuned sounds. Anushri has 3 envelope generators: an AD envelope used for VCO and PWM control; an ADSR1 envelope used for VCF control; and an ADSR2 envelope used for VCA control. However, the user interface does not allow individual editing of these envelopes: the AD and ADSR1 envelope share the same attack and decay settings; and ADSR2 is controlled through a morphing parameter which gives it the shape of ADSR1 , or an increasingly rigid shape resembling a Gate signal. Anushri has 2 LFOs: a main LFO, syncable to tempo, with 8 different waveforms; and a vibrato/growl triangle LFO, the amplitude of which is controlled by the modulation wheel. All the synthesis parameters can be accessed from the front panel by pressing the Synth button. Oscillator section FM controls by which amount the DCO signal modulates the frequency of the VCO. This modulation is linear FM. Dissonant and metallic timbres can be achieved by setting FM to a high value, and by detuning the DCO and VCO with the VCO range or VCO detune knobs. VCO mod controls which modulation is applied to the VCO. In central position (the potentiometer has a detent at 12 o'clock), no modulation is applied to the VCO. When turning the knob clockwise, an increasing amount of LFO modulation is applied. When turning the knob counter-clockwise, an increasing amount of AD envelope modulation is applied. PW adjusts the pulse-width of the square waveform. In central position (the potentiometer has a detent at 12 o'clock), the output signal is a square waveform. PW mod controls the modulation applied to pulse-width. In central position (the potentiometer has a detent at 12 o'clock), no modulation is applied to the pulse width. When turning the knob clockwise, an increasing amount of LFO modulation is applied. When turning the knob counter-clockwise, an increasing amount of AD envelope modulation is applied. Sync resets the cycle of the VCO every time the DCO completes a full cycle. This works particularly well when the VCO is set to a higher pitch than the DCO (high value of the VCO range pot), and when an envelope or LFO modulation is applied to the VCO, for this ewwwwww sound. Note that when the VCO has a lower pitch than the DCO, no sound can be heard. This is a useful trick if you want to disable the VCO for external signal processing! Glide adjusts the portamento time between consecutive notes. This causes the pitch of the previous note to slowly slide towards the pitch of the next note. VCO range adjusts the pitch of the VCO relatively to the note played on the keyboard, from -12 semitones to +36 semitones. This potentiometer is deliberately \"steppy\", with one step for each semitones, and a dead-band at octaves (-12, 0, 12, 24, 36 semitones). VCO detune adjusts the VCO pitch on a fine scale, to create a slight detuning effect between the VCO and the DCO. Mix controls the balance of the sawtooth and square waveshapers. In center position, both waveshapes are mixed together. Fully turned clock-wise, only the square wave can be heard. Fully turned counter-clock-wise, only the sawtooth wave can be heard. Sub level controls the level of an additional signal added to the mix. This signal is selected with the Sub switch, from one of these 3 sources: The DCO. A square sub-oscillator running one octave below the VCO. A square sub-oscillator running two octaves below the VCO. Note that any pitch modulation applied to the VCO will also be applied to the sub-oscillator; but due to the way the sub-oscillator synchronizes its pitch to the VCO, interesting sync-like or quantization/arpeggiation effects can be heard. Filter section Anushri's filter is a 2-pole multimode filter based on the State-Variable topology - a circuit made famous in the synth world by the Oberheim SEM. The filter can self-oscillates smoothly when resonance is set to high values. Cutoff adjusts the filter cutoff frequency, from 18 Hz to 22kHz. Note that by default, filter cutoff frequency tracks the note played by the keyboard (this can be disabled by sending a specific CC message to Anushri). Resonance adjusts the filter resonance, progressively emphasizing the frequencies in the vicinity of the cutoff frequency. VCF env mod controls the amount of ADSR1 modulation applied to filter cutoff. VCF LFO mod controls the amount of LFO modulation applied to filter cutoff. VCF mode selects the filter mode: low-pass, band-pass, or high-pass. The audio input at the back of Anushri (6.35 jack) is routed to the filter input, allowing external signals to be processed through the filter, fuzz and VCA. Fuzz The signal produced by the VCF can be sent to a fuzz circuit before getting into the VCA. Switch the Fuzz control on for a nasty overdriven sound. LFO LFO shape selects the waveform of the main LFO. The following shapes are available: Triangle. Square. Ramp up. Ramp down. Sample and hold. The LFO periodically takes a random value. Bernouilli process. The LFO randomly switches between a high and low value. The rate of transition is affected by the rate parameter. Smooth random process. A continuous random waveform made of lines with a randomly selected slope is generated. The higher the rate, the higher the digital manic pixie dream cat tweaks the knobs. Noise. The LFO output is a white noise signal. In this case, the rate parameter of the LFO has no effect. LFO rate adjusts the speed of the LFO. The LFO frequency ranges from 0.06 Hz (a full cycle takes 16s) to 100 Hz. Note that when the rate setting is set to its minimum value, the LFO locks itself to the sequencer/arpeggiator clock, so that the LFO accomplishes a full cycle over a period of 4 beats. This synchronization is achieved through a PLL - it might take a few beats before the LFO effectively locks to the sequence. Envelopes Attack and Decay adjust the envelopes attack and decay time. These settings affect both the AD envelope (VCO and PWM modulation) and the VCF ADSR envelope. They might affect the VCA ADSR envelope too. Sustain and Release adjust the envelopes sustain level and release time. These settings affect the VCF ADSR envelope, and might affect the VCA ADSR envelope too. VCA env controls the shape of the VCA envelope. When this setting is set to 0, the VCA envelope is the same as the VCF envelope - exactly matching the A, D, S, R settings dialed on the four knobs. When this knob is set to a middle position, the VCA envelope has a null attack, a 75% sustain, and half the decay and release times dialed on the Decay and Release knobs. Finally, when this knob is set to the maximum value, the VCA envelope gets turned into a \"gate\" signal, with no attack, no decay and release, and a sustain at full level. Inbetween, some \"morphing\" between the shapes is applied. Refer to the following illustration: One can think of this setting as a \"VCA envelope solidity\" parameter. Note that when this control is set to the most extreme \"gate\" setting, the envelope actually has a non-null but tiny release time (exaggerated on the drawing). This prevents clicks when a note is released. Technical note: the LFOs and Envelopes are digitally generated, using a 2.45kHz refresh rate and a 12-bit resolution DAC (with 16-bit internal computations). VCO tuning Anushri's saw-core VCO uses a temperature compensation scheme (published by Osamu Hoshuyama) which makes it quite stable once the inside temperature of the case has plateaued. A reset-time compensation scheme (De Franco resistor) attenuates the flat detuning in the higher octaves, allowing the VCO to track well over the 55 .. 1760 Hz range. However, to reach these performances, the VCO needs calibration through a set of two trimmers (Offset and V/Oct) at the back of the board. To spare you this lengthy process, a software compensation can be enabled that will instantly bias Anushri's internal CV conversion stage to reach the right tuning. To enable this correction: Make sure that the Sync switch is at the Off position. Hold the Hold button and press Run/stop . A short, faint arpeggio will be heard - this is the sound of Anushri trying to play several notes through the VCO and measuring their frequency in order to evaluate the VCO accuracy. After that, the VCO will be tuned. You can repeat this operation if the unit has been subjected to large changes of temperature, or if you don't want to wait for the warm-up period and want to start playing in tune immediately. Enabling this software compensation has two side-effects: The VCO will be off-tune when triggered from external CV signals. The CV output will be \"tailored\" for Anushri's own VCO and won't strictly adhere to the V/Oct standard. If you intend to use Anushri with a modular setup where accurate V/Oct compliance is necessary, it is recommended to disable software tuning correction and take the time to trim the VCO. To disable software tuning correction, hold the Hold button and press Rec . Interfacing with modular equipment Twelve 3.5 I/O jacks are present on the front-panel to interface Anushri's signal processing chain with the outside world. Note that Anushri's internal signals are 5V pp, to allow low-power battery operation - thus, the signals at some audio outputs might need amplification to reach the levels commonly found in modular equipment. However, given that all external signal inputs are fed to virtual grounds through resistors, there is no constraint on the input voltage ranges (well, don't try sending mains voltage there of course!). Aux Audio in is an additional input for external signal processing. It is activated by setting the Sub switch to the DCO position, and can be attenuated by the Sub level control. The input impedance is 100k\u03a9. Audio out is Anushri's final audio output, unaffected by the volume control. VCA CV in is added to the other VCA modulation sources (envelope and velocity). This input has an impedance of 22k\u03a9. Drums out is an individual output with the digital drum synth's signal. Plugging a cable in this connector will remove this signal from the global audio output. PW CV in is a CV input for pulse-width modulation. A signal applied here overrides the setting of the PW knob on the front panel. This input has an impedance of 15k\u03a9. VCF CV in gets added to all the other modulation sources for cutoff frequency. The scale is 1V/Oct. This input has an impedance of 200k\u03a9. VCO CV in gets added to all the other modulation sources for VCO frequency. The scale is 1V/Oct if the VCO has been correctly manually calibrated. This input has an impedance of 200k\u03a9. VCO CV out is the CV value produced by Anushri's internal MIDI->CV converter. This CV value incorporates all the arpeggiation, detuning, transpositions, LFO and envelope modulations applied to VCO pitch. The scale is 1V/Oct if software VCO compensation is disabled. Gate in triggers the attack of the envelopes on raising edges, and triggers the release of the envelopes on falling edges. Gate out raises to +5V when the envelopes are triggered, and falls to ground level when the envelopes are released (either as a consequence of Gate in triggering or from MIDI note on/off messages). Clock in can be used to tick Anushri's clock (used for the arpeggiator, sequencer and drum machine) when it is set to external sync. Pulses on this input are expected to have a +5V high level, and last at least 2ms. The clock resolution can be set to either 24ppqn, 8ppqn, or 4ppqn. See the System configuration section. Clock out outputs a train of 2 ms-long pulses (+5V high level) at each tick of the clock (be it the internal clock, an external MIDI clock, or external triggers through the Clock in input). A few words about saving and memory... Anushri does not have a load/save function or presets. All settings from the front panel are saved in internal memory and restored when the unit boots. Because saving takes time - half a second during which the unit freezes, and we don't want this to happen during a performance! - the settings are written to persistent memory only after 15s of inactivity. Thus, it is recommended to leave Anushri alone for this amount of time before switching it off. When the settings are saved to persistent memory, the column of 3 LEDs flashes. If for any reason you want to revert Anushri to its factory settings, power the unit on while holding the Run/stop button. Sequencer, arpeggiator and advanced synthesis features Using the built-in sequencer Anushri is equipped with a sequencer with step-by-step recording, mostly inspired by Roland's classic SH-101 and JX3-P sequencers. A sequence can contain up to 128 steps. The duration of a step is one sixteenth note (4 steps per beat). Each step can either contain: A note , with optional accent and slide. A rest , which indicates that this step is silent. A tie , which indicates that the note triggered at the previous step is not stopped, but rather prolonged, during this step. To start recording a sequence, press the Rec button. The column of 3 LEDs lights up to indicate that the recording mode is active. The row of 3 LEDs will indicate the current step, as previously illustrated. Press a note on the MIDI keyboard to add it to the sequence. Press Drums to input a rest in the sequence. Press Hold to input a tie in the sequence. Move the pitch bend lever (the position doesn't matter) before recording a note, and this note will be slid. Move the mod wheel up (the position doesn't matter) before recording a note, and this note will be accented (boost of filter envelope modulation and velocity). Finally, press Rec when you are done. To play the sequence, press the Run/stop button. To stop playback, press Run/stop again. When the unit is configured to use an external clock, the sequencer can also be started/stopped by sending the corresponding MIDI messages. While a sequence is playing, the MIDI notes played on the keyboard will transpose the sequence. C3 (MIDI note #60) will bring back the sequence to its original tonality. Arpeggiator and advanced synthesis features Additional synthesis settings, along with arpeggiator and sequencer options can be accessed by pressing the Clk/Kbd button. The following parameters are now assigned to the knobs: But first, one word of caution... Inadvertently changing some of these parameters can have a drastic and disastrous effect during a performance. Thus, when entering this page, the knobs are locked: the parameter will not change until the position of the potentiometer actually matches the current value of the setting it controls. Let us take an example. The sequencer is currently running at 120 BPM. Because you were tweaking the slide parameter in the synth section, the first knob is currently at its minimal position. If you press Kbd/Clk and start turning the first knob, the tempo won't immediately jump to its minimal setting. Instead, Anushri will wait until the position of the knob matches 120 BPM (middle position), and from then, it will start having an effect. A few other machines (including other Mutable Instruments products such as Shruthi and Ambika) have a similar feature and call this the snap mode . When a pot is locked, the left or right LED in the row of 3 indicates in which direction you have to turn the pot to unlock it. Now back to the actual settings! Tempo controls the tempo of the sequencer/arpeggiator, from 40 to 240 BPM. When set to its minimal value, the internal clock is disabled and an external clock is used. The external clock can come either from the MIDI in, or from pulses on the Clock in jack. Swing controls the swing of the internal clock. Swing cannot be applied to an external clock. Arp mode controls the mode and range of the arpeggiator. The options are: OFF - arpeggiator is disabled. Up 1 octave. Up 2 octaves. Down 1 octave. Down 2 octaves. Up & down 1 octave. Up & down 2 octaves. Random 1 octave. Random 2 octaves. Arp pattern controls the rhythmic pattern of the arpeggiator. 6 patterns are available. When this control is at its minimum position, a basic eighth note pattern is used. Arp acidity spices up the arpeggiator pattern by adding slides and accents at strategic times, with a well-balanced amount of randomness. The higher setting, the more likely slides/accents will be added. Octave acts as a global octave range control for both the VCO and DCO. Master tune acts as a global fine tune control (with a range of +/- 1 semitones) for both the VCO and DCO. Vibrato rate controls the speed of the vibrato LFO. The amplitude of this LFO is directly controlled by the modulation wheel of the MIDI keyboard. Vibrato destination controls the destination of the vibrato LFO. When this control is set to its minimum value, the vibrato LFO affects the pitch (actual vibrato). When this control is set to its maximum value, the vibrato LFO affects the cutoff frequency (\"growl\" or \"wah-wah\" effect). In the middle position, both the VCO and VCF are affected. Velocity destination indicates how MIDI note velocity affects the sound. When this control is set to its minimum value, velocity affects cutoff frequency (the harder the key is pressed, the more open the filter is). When this control is set to its maximum value, velocity affects VCA level (the harder the key is pressed, the louder the sound is). In the middle position, velocity has no effect on sound. Latch and hold, jamming without MIDI keyboard While some keys are pressed on the MIDI keyboard, press the Hold button to keep them held. LEDs will be temporarily dimmed. Press Hold again to release them. This can be used as a \"latch\" function for the arpeggiator, freeing your hands to tweak the knobs while an arpeggio is being held... or simply to create a drone tone. The Hold function hides another mystery... Even if Anushri has been designed as a MIDI synth module, it is still possible to play it without an external keyboard or sequencer. Hold the Hold button for 2 seconds. A note starts playing. Turn the 5 knobs on the last row to step through scales. Press the Hold button again to leave this mode. This \"knob jamming\" mode can even be triggered while the sequencer is recording, and provides a fun way of letting your toddlers, pets or significant other input random but musically coherent (or not) sequences. Drum synth and generative drum machine Overview Anushri has a built-in drum synth and generative drum sequencer which can be played along with the synth section and its arpeggiator/sequencer. The drum synth comprises three parts, for bass drum (BD), snare drum (SD), and closed high-hat (HH). The bass drum and snare drum sounds are generated digitally, using a pitch and amplitude modulated digital oscillator and a noise source. The high-hat uses sample playback with variable speed, and an amplitude envelope. The drum machine is playing when the sequencer is running. If you want to play freely (or with the arpeggiator) on top of the drum machine, record an empty sequence - Rec , Rec - and press Run/stop to start the drum machine. Understanding the generative sequencer The sequencer controlling the drum section is unlike anything else. It is neither based on x0x-style step programming, nor on presets. It is mostly played by knobs. How does it work? Let us introduce two concepts. Style map One sleepless night, you have the crazy idea of tiling the floor of your apartment with your CD collection. You start taking the CDs and putting them on the floor, and then, come up with the idea of grouping them \"stylistically\"... Wouldn't it be great if CDs of bands that sound similar would be laid out close to each other? All the old-school Techno up north, hip-hop south, with maybe some big-beat of trip-hop in the middle, and an island of jazz on the east. What's great with this arrangement, where objects physically close to each other are sonically related to each other, is that tracing a path through the space would leave a continuous playlist with interesting transitions from one artist to the other... Now imagine doing the same thing with the collection of drum loops on your hard-drive... All variants of the Amen break would be clustered together, farther apart from the 909 house loops. There are indeed mathematical techniques to do this kind of arrangements and this is exactly how Anushri stores and organizes drum patterns. In the darkness of the Mutable Instruments labs, we have compiled many drum patterns, tiled them into a 2D map so that nearby patterns occupy nearby cells. What's the point of doing this? It allows an efficient way of \"nagivating\" through a large collection of rhythms with just two parameters: the X and Y coordinates on the map. Each rhythm from the original set is referenced by an X and Y position, and changing the coordinates transitions progressively to different, but still related sounding rhythms. It has nothing to do with the incongruous \"jumps\" one would hear by scrolling through a bank of presets or a list of drum loops files. It allows efficient data compression too - since many similar patterns end up in clusters at the same coordinates, we can pick one single representative in the group and ditch the others... Note addition/removal lists and event density From the previous section, you have learnt that Anushri stores a map of drum patterns, organized by similarity, and addressed by X and Y coordinates. What is stored is indeed more complicated than a x0x-like pattern with on and off LEDs... I'm sure you have already done this... Switch on your 808 (or clone), add a kick on the first step. Then on the 9th. Then on the 5th and 13th to get a four-to-the-floor pattern. Then on the 15th or 16th to add some more variations at the end of the bar... And then the snare... It starts with a simple hit on the 5th or 13th step (or both)... And then maybe a more complex pattern with the 2nd and 8th steps involved to add a syncopated feel. By analyzing such \"build-ups\" we can make a list of steps by order of importance. For the kick in a techno/house rhythm, the first beat is important, it shouldn't be missing... Closely followed by the 9th and 5th and 13th, and then maybe the 15th or 16th... Experts might or might not agree, but we don't need their opinion... By collecting a large dataset of rhythms, it is possible to compile statistics to answer the following question: \"given this drum pattern, if we were to add a bass drum note to it, what would be the most logical position where it would appear\"? We can do the operation the other way round: \"Given this drum pattern, if we were to remove a bass drum note from it, which one would it be?\". This question is easily answered by statistics: take a database of MIDI drum loops, take a pattern, and search for all the occurrences of drum patterns that differ by only one note. What has been added or removed? By iterating the process, we can build the list of steps, sorted by priority, which should be added to a pattern to enrich it - or removed from it to simplify it. This is the second ingredient! Anushri stores a 2D map of such note addition/removal lists. The X and Y coordinates on the map identify an overall \"genre\" in which the drum pattern will be performed. Then, by stepping through the note addition/removal lists for BD, SD and HH, we can make the drum pattern more dense or more sparse for each of those instruments. This is expressed by 3 parameters called BD, SD and HH density. When these parameters are increased, we zip through the note addition list to make the pattern richer and richer. When these parameters are decreased, we go backwards through the note removal list, to make the pattern sparser and sparser. It's a bit like creating a simple drum pattern in your sequencer, then micro-polishing it to hell with ghost notes and variations... and then stepping through the undo and redo commands to move back and forth between its simpler self and the drill'n'bass monster it has become. A last thing: representing drum patterns with note addition/removal lists allows very easily to add meaningful random variations. Play a drum pattern. You want to spice things up a bit? Just look for the next entry (or pair of entries) in the note addition list - it'll tell you where to add this extra snare roll or kick hit. Anushri's drum sequencer has this randomness built-in - it never really repeats itself! Let's summarize all of this. Anushri generates drum patterns and put you in control of the: The sparsity/density of the BD, SD and HH tracks, allowing immediate simplification or elaboration of the pattern played by each drum instrument. X, Y coordinates of the base \"pattern\", with many drum patterns organized by similarity in a 2D map. These patterns are not actual \"presets\" or x0x type grids, but rather note addition/removal lists for the sparsity/density controls. If this all sounds complicated to you, here is a final analogy: Anushri's approach of sculpting drum patterns is to a x0x what subtractive synthesis is to additive synthesis. Instead of building everything from scratch, you enrich or simplify/filter basic drum patterns, just like you filter rich waveforms on a subtractive synth instead of building them up from scratch with harmonics. Drum machine controls Map X and Map Y control the coordinates of the drum pattern on the style map. BD density , SD density and HH density indicate how sparse/dense the pattern is in terms of these elements. BD / SD adjusts the relative level of the BD and SD+HH sound generators. When turned left, the BD dominates; when turned right, the SD and HH dominate. BD tone controls the tone of the bass drum, by morphing through the following sounds: subdued 808-like kick, stronger 909-like kick, deeper 909-like kick, long decay 808-like kick, noisy industrial kick. SD tone controls the tone of the snare drum, by morphing through the following sounds: short 606-like snare, snappy 909-like snare, higher and higher pitched 808-like snare, zap! HH tone controls the tone of the high-hat, by increasing the pitch of the sound, and increasing, then lowering the decay time. Bandwidth controls the sample rate of the drum synth. Think of it as an 8-bit poor man's filter... Note that the tone generator is quite lo-fi! Since it uses 8-bit precision with PWM conversion, the BD signal exhibits significant noise when the amplitude decreases (a Mirage or an Amiga did it, too), and the noise floor is quite high. External processing of this signal through EQ, filters or noise gates is recommended, and is facilitated by the individual drums output on the front panel. It is worth observing that if the drum machine section is not used, Anushri's noise floor can be significantly improved by plugging a jack into the Drums out output to take out of the mix some of the background noise coming out of the processor. Advanced topics System configuration MIDI channel selection To select which MIDI channel Anushri will respond to, hold Hold and press the Synth button, then play a note on the MIDI channel you want it to respond to. Note that the active MIDI channel is indicated by a combination of LEDs: MIDI out message filter Hold Hold and press the Kbd/Clk button to select the messages that Anushri sends to the MIDI out. The LED temporarily displays the message types which are enabled/disabled for transmission. Pressing the switches activates or deactivates those messages. When the Thru LED is lit, incoming MIDI messages are forwarded to the MIDI out. When the Arp/Seq LED is lit, the note events generated by the sequencer and arpeggiator are sent to the MIDI out (for example to trigger external gear using Anushri's arpeggiator and sequencer). When the Drums LED is lit, the note events generated by the drum pattern generator are sent to the MIDI out, on channel 10 (for example to trigger an external drum module). When the Clock LED is lit, the start/stop and clock events driving Anushri's sequencer are sent to the MIDI out. Clock resolution Hold Hold and press the Drums button to change the resolution of Anushri's clock system. 24 ppqn is the resolution of the MIDI standard and is the recommended setting - unless you are interfacing through the Clock in and Clock out ports with modular systems which have different resolutions. Summary: Hold + key special functions Hold + Synth : MIDI channel learn. Hold + Clk/Kbd : MIDI output filters. Hold + Drums : Sequencer resolution. Hold + Rec : Disable software tuning correction. Hold + Run/stop : Enable software tuning and tune VCO. Hold held for a long time: Play drone note and enable scales on lower row of knobs. Hidden MIDI functions Advanced sound editing A handful of synth settings unavailable on the front panel can still be edited by CC : Simultaneous envelope and LFO modulation on the VCO (CC 16 and 17). Simultaneous envelope and LFO modulation on PWM (CC 18 and 19). VCF keyboard tracking amount (CC 23). The value 64 gives 1:1 tracking and is the default. More importantly, the individual parameters of the drum synth can be edited through CCs 16 to 30 on channel 10. Please refer to the last column of the CC Map . Manual triggering of the drum synth The drum synth responds to MIDI notes 36, 38 and 42 (respectively BD, SD, and closed HH in the General MIDI standard) on channel 10. x0x-style programming of the drum machine If maps and densities are not your thing, there is still a way of entirely overriding the generative drum machine and program x0x patterns into it! This is done through a MIDI keyboard sending notes on MIDI channel 16. The lowest C# key (on a 61 notes keyboard) is used to enable or disable the generative drum machine, with the programmed x0x pattern taking over. The D# key clears the pattern programmed for the current instrument. The F# / G# / A# keys select the instrument to program. Finally the white keys are used for activating/deactivating notes at each of the 16 steps. SysEx Backup Hold Run/stop for a few seconds to request a SysEx dump of all internal settings. The resulting data (or chunks of it) can be be sent to Anushri at later time to restore its settings. Firmware update Keep the Hold key pressed while Anushri is powered on to put it into firmware update mode. Every second LED will be lit. The unit is now ready to receive the update data, which can be sent as a SysEx file (with a 250ms or more delay between packets) or as a MIDIfile. The LEDs blink on every received packet. The update takes about 1 minute, and can be restarted in case of accidental interruption. Upon reception of the last packet, the unit immediately boots with the new firmware. If you want to use a dedicated SysEx transfer tool rather than a sequencer, we recommend Elektron's C6 tool available for both Windows and OS X, with the following timing settings: Factory reset Keep the Run/stop key pressed while Anushri is powered on to revert all synthesis and system settings (including tuning compensation!) to their default values. MIDI implementation Basics A MIDI implementation chart is available here . SysEx Anushri can receive and transmit settings in system exclusive format. The messages all share the same format: 0xf0 (SysEx) 0x00 0x21 0x02 (Mutable Instruments Manufaturer ID) 0x00 0x08 (Product ID for Anushri) Command Argument Payload Checksum 0xf7 (End of SysEx) Command indicates what the receiver should do with the data in the payload block, and argument is a byte that might contain an additional piece of information about what to do with the data. Payload is a sequence of bytes in nibblized form. For example, the sequence 0x80 0x56 0x13 is transmitted as 0x08 0x00 0x05 0x06 0x01 0x03 . Checksum is equal to the nibblized-sum, modulo 256, of the bytes. In the example above, the checksum is equal to 0x80 + 0x56 + 0x13 = 0xe9 and is transmitted as 0x0e 0x09 . Data structure dump When transfering patch/sequence/program/multi data to Anushri, command is always 0x01 and argument indicates the data structure being sent. The following table summarizes the different payload types. Argument Affected data structure Payload size 0 SystemSettingsData 15 bytes 1 Patch 28 bytes 2 SequencerSettings 24 bytes 3 Sequence (first part) 128 bytes 4 Sequence (second part) 33 bytes Bulk dump request When Anushri receives a SysEx block with command equal to 0x11, argument equal to 0x00, and an empty payload, it spits a full SysEx dump of its memory, made of five SysEx packets (command/argument equal to 0x01 0x00, 0x01 0x01, 0x01 0x02, 0x01 0x03 and 0x01 0x04).","title":"Manual"},{"location":"anushri/manual/#getting-started","text":"","title":"Getting started"},{"location":"anushri/manual/#overview","text":"Congratulations for having successfully built Anushri! Anushri is a monophonic synthesizer with an all-analog signal path, paired with a lo-fi digital drum synthesizer. These two sections are controlled by an on-board sequencer/arpeggiator, featuring generative drum pattern sequencing. Anushri is open to the modular world thanks to its analog patching area.","title":"Overview"},{"location":"anushri/manual/#panels-and-controls","text":"A . The upper group of knobs and switches controls the analog sound synthesis. The signal \"flows\" from left to right: VCO, mixer, VCF. Most of these knobs are directly interacting with the analog audio signal (no latency, no stepping... but no MIDI control). B . The lower group of 10 knobs can serve multiple functions: Editing the remaining parameters of the synth. Setting sequencer/arp/MIDI keyboard options. Controlling the drum synth and drum sequencer. These 3 different \"pages\" can be activated by the first column of buttons labelled Synth , Clk/Kbd and Drums . One of the three LEDs in the vertical column indicates the current page. Note that if you intend to play Anushri as a synth, without the drum machine and without experimenting with its sequencer, you can leave it on the Synth page forever and enjoy a \"1 knob per function\" layout. Even if you are using the sequencer and drum machine, you'll notice that you rarely switch pages. C . Output volume control. D . Additional CV/Gate/Audio I/O for modular systems. E . Indicator LEDs. The purpose of the LEDs is shown below: LFO . The brightness of this LED reflects the LFO value. Gate . This LED is lit when a key is held or when the gate input is high. Beat . This LED is lit when the steps 1, 5, 9, 13... of the step sequencer are active. The 3 remaining LEDs indicate the active page, and thus the function of the lower group of knobs. F . Switches. The first column of 3 switches is used to select the active page. The second column of 3 switches controls the sequencer. The Hold button serves a few additional functions when held and used as a \"shift\" key - this will be revealed throughout this documentation. G , H . MIDI in and MIDI out. I , J . Audio out and Audio in. The input signal goes through the VCF and VCA. K . On/Off switch. L . Power supply connector. A 7.5V or 9V DC supply must be used, with a current rating above 200mA. The connector has a 2.1mm barrel, with a positive center tip polarity. Most universal power supplies allow the polarity to be selected \u2014 the polarity being often represented by a diagram like this: \u2013 (o , or by the indication tip: . Anushri's power supply circuitry has a reverse polarity protection and can handle voltages up to 12V. Above this, one of the chip inside the unit could be destroyed by overvoltage.","title":"Panels and controls"},{"location":"anushri/manual/#monophonic-analog-synthesizer","text":"This section documents Anushri's analog synthesis section. Anushri follows the classic subtractive synthesis scheme: a VCO producing a rich waveform is filtered/colored by a VCF , and the level of the resulting sound is controlled by a VCA . One particularity of Anushri is that it also includes an additional digital square wave generator. Even if this terminology is inaccurate, it'll be referred to as the DCO in the rest of the documentation (For the sake of accuracy: the square wave comes from a programmable interval timer on the main MCU). This second source can be used to achieve sounds traditionally reserved to dual oscillator synthesizers, such as FM, hard-sync, or rich detuned sounds. Anushri has 3 envelope generators: an AD envelope used for VCO and PWM control; an ADSR1 envelope used for VCF control; and an ADSR2 envelope used for VCA control. However, the user interface does not allow individual editing of these envelopes: the AD and ADSR1 envelope share the same attack and decay settings; and ADSR2 is controlled through a morphing parameter which gives it the shape of ADSR1 , or an increasingly rigid shape resembling a Gate signal. Anushri has 2 LFOs: a main LFO, syncable to tempo, with 8 different waveforms; and a vibrato/growl triangle LFO, the amplitude of which is controlled by the modulation wheel. All the synthesis parameters can be accessed from the front panel by pressing the Synth button.","title":"Monophonic analog synthesizer"},{"location":"anushri/manual/#oscillator-section","text":"FM controls by which amount the DCO signal modulates the frequency of the VCO. This modulation is linear FM. Dissonant and metallic timbres can be achieved by setting FM to a high value, and by detuning the DCO and VCO with the VCO range or VCO detune knobs. VCO mod controls which modulation is applied to the VCO. In central position (the potentiometer has a detent at 12 o'clock), no modulation is applied to the VCO. When turning the knob clockwise, an increasing amount of LFO modulation is applied. When turning the knob counter-clockwise, an increasing amount of AD envelope modulation is applied. PW adjusts the pulse-width of the square waveform. In central position (the potentiometer has a detent at 12 o'clock), the output signal is a square waveform. PW mod controls the modulation applied to pulse-width. In central position (the potentiometer has a detent at 12 o'clock), no modulation is applied to the pulse width. When turning the knob clockwise, an increasing amount of LFO modulation is applied. When turning the knob counter-clockwise, an increasing amount of AD envelope modulation is applied. Sync resets the cycle of the VCO every time the DCO completes a full cycle. This works particularly well when the VCO is set to a higher pitch than the DCO (high value of the VCO range pot), and when an envelope or LFO modulation is applied to the VCO, for this ewwwwww sound. Note that when the VCO has a lower pitch than the DCO, no sound can be heard. This is a useful trick if you want to disable the VCO for external signal processing! Glide adjusts the portamento time between consecutive notes. This causes the pitch of the previous note to slowly slide towards the pitch of the next note. VCO range adjusts the pitch of the VCO relatively to the note played on the keyboard, from -12 semitones to +36 semitones. This potentiometer is deliberately \"steppy\", with one step for each semitones, and a dead-band at octaves (-12, 0, 12, 24, 36 semitones). VCO detune adjusts the VCO pitch on a fine scale, to create a slight detuning effect between the VCO and the DCO. Mix controls the balance of the sawtooth and square waveshapers. In center position, both waveshapes are mixed together. Fully turned clock-wise, only the square wave can be heard. Fully turned counter-clock-wise, only the sawtooth wave can be heard. Sub level controls the level of an additional signal added to the mix. This signal is selected with the Sub switch, from one of these 3 sources: The DCO. A square sub-oscillator running one octave below the VCO. A square sub-oscillator running two octaves below the VCO. Note that any pitch modulation applied to the VCO will also be applied to the sub-oscillator; but due to the way the sub-oscillator synchronizes its pitch to the VCO, interesting sync-like or quantization/arpeggiation effects can be heard.","title":"Oscillator section"},{"location":"anushri/manual/#filter-section","text":"Anushri's filter is a 2-pole multimode filter based on the State-Variable topology - a circuit made famous in the synth world by the Oberheim SEM. The filter can self-oscillates smoothly when resonance is set to high values. Cutoff adjusts the filter cutoff frequency, from 18 Hz to 22kHz. Note that by default, filter cutoff frequency tracks the note played by the keyboard (this can be disabled by sending a specific CC message to Anushri). Resonance adjusts the filter resonance, progressively emphasizing the frequencies in the vicinity of the cutoff frequency. VCF env mod controls the amount of ADSR1 modulation applied to filter cutoff. VCF LFO mod controls the amount of LFO modulation applied to filter cutoff. VCF mode selects the filter mode: low-pass, band-pass, or high-pass. The audio input at the back of Anushri (6.35 jack) is routed to the filter input, allowing external signals to be processed through the filter, fuzz and VCA.","title":"Filter section"},{"location":"anushri/manual/#fuzz","text":"The signal produced by the VCF can be sent to a fuzz circuit before getting into the VCA. Switch the Fuzz control on for a nasty overdriven sound.","title":"Fuzz"},{"location":"anushri/manual/#lfo","text":"LFO shape selects the waveform of the main LFO. The following shapes are available: Triangle. Square. Ramp up. Ramp down. Sample and hold. The LFO periodically takes a random value. Bernouilli process. The LFO randomly switches between a high and low value. The rate of transition is affected by the rate parameter. Smooth random process. A continuous random waveform made of lines with a randomly selected slope is generated. The higher the rate, the higher the digital manic pixie dream cat tweaks the knobs. Noise. The LFO output is a white noise signal. In this case, the rate parameter of the LFO has no effect. LFO rate adjusts the speed of the LFO. The LFO frequency ranges from 0.06 Hz (a full cycle takes 16s) to 100 Hz. Note that when the rate setting is set to its minimum value, the LFO locks itself to the sequencer/arpeggiator clock, so that the LFO accomplishes a full cycle over a period of 4 beats. This synchronization is achieved through a PLL - it might take a few beats before the LFO effectively locks to the sequence.","title":"LFO"},{"location":"anushri/manual/#envelopes","text":"Attack and Decay adjust the envelopes attack and decay time. These settings affect both the AD envelope (VCO and PWM modulation) and the VCF ADSR envelope. They might affect the VCA ADSR envelope too. Sustain and Release adjust the envelopes sustain level and release time. These settings affect the VCF ADSR envelope, and might affect the VCA ADSR envelope too. VCA env controls the shape of the VCA envelope. When this setting is set to 0, the VCA envelope is the same as the VCF envelope - exactly matching the A, D, S, R settings dialed on the four knobs. When this knob is set to a middle position, the VCA envelope has a null attack, a 75% sustain, and half the decay and release times dialed on the Decay and Release knobs. Finally, when this knob is set to the maximum value, the VCA envelope gets turned into a \"gate\" signal, with no attack, no decay and release, and a sustain at full level. Inbetween, some \"morphing\" between the shapes is applied. Refer to the following illustration: One can think of this setting as a \"VCA envelope solidity\" parameter. Note that when this control is set to the most extreme \"gate\" setting, the envelope actually has a non-null but tiny release time (exaggerated on the drawing). This prevents clicks when a note is released. Technical note: the LFOs and Envelopes are digitally generated, using a 2.45kHz refresh rate and a 12-bit resolution DAC (with 16-bit internal computations).","title":"Envelopes"},{"location":"anushri/manual/#vco-tuning","text":"Anushri's saw-core VCO uses a temperature compensation scheme (published by Osamu Hoshuyama) which makes it quite stable once the inside temperature of the case has plateaued. A reset-time compensation scheme (De Franco resistor) attenuates the flat detuning in the higher octaves, allowing the VCO to track well over the 55 .. 1760 Hz range. However, to reach these performances, the VCO needs calibration through a set of two trimmers (Offset and V/Oct) at the back of the board. To spare you this lengthy process, a software compensation can be enabled that will instantly bias Anushri's internal CV conversion stage to reach the right tuning. To enable this correction: Make sure that the Sync switch is at the Off position. Hold the Hold button and press Run/stop . A short, faint arpeggio will be heard - this is the sound of Anushri trying to play several notes through the VCO and measuring their frequency in order to evaluate the VCO accuracy. After that, the VCO will be tuned. You can repeat this operation if the unit has been subjected to large changes of temperature, or if you don't want to wait for the warm-up period and want to start playing in tune immediately. Enabling this software compensation has two side-effects: The VCO will be off-tune when triggered from external CV signals. The CV output will be \"tailored\" for Anushri's own VCO and won't strictly adhere to the V/Oct standard. If you intend to use Anushri with a modular setup where accurate V/Oct compliance is necessary, it is recommended to disable software tuning correction and take the time to trim the VCO. To disable software tuning correction, hold the Hold button and press Rec .","title":"VCO tuning"},{"location":"anushri/manual/#interfacing-with-modular-equipment","text":"Twelve 3.5 I/O jacks are present on the front-panel to interface Anushri's signal processing chain with the outside world. Note that Anushri's internal signals are 5V pp, to allow low-power battery operation - thus, the signals at some audio outputs might need amplification to reach the levels commonly found in modular equipment. However, given that all external signal inputs are fed to virtual grounds through resistors, there is no constraint on the input voltage ranges (well, don't try sending mains voltage there of course!). Aux Audio in is an additional input for external signal processing. It is activated by setting the Sub switch to the DCO position, and can be attenuated by the Sub level control. The input impedance is 100k\u03a9. Audio out is Anushri's final audio output, unaffected by the volume control. VCA CV in is added to the other VCA modulation sources (envelope and velocity). This input has an impedance of 22k\u03a9. Drums out is an individual output with the digital drum synth's signal. Plugging a cable in this connector will remove this signal from the global audio output. PW CV in is a CV input for pulse-width modulation. A signal applied here overrides the setting of the PW knob on the front panel. This input has an impedance of 15k\u03a9. VCF CV in gets added to all the other modulation sources for cutoff frequency. The scale is 1V/Oct. This input has an impedance of 200k\u03a9. VCO CV in gets added to all the other modulation sources for VCO frequency. The scale is 1V/Oct if the VCO has been correctly manually calibrated. This input has an impedance of 200k\u03a9. VCO CV out is the CV value produced by Anushri's internal MIDI->CV converter. This CV value incorporates all the arpeggiation, detuning, transpositions, LFO and envelope modulations applied to VCO pitch. The scale is 1V/Oct if software VCO compensation is disabled. Gate in triggers the attack of the envelopes on raising edges, and triggers the release of the envelopes on falling edges. Gate out raises to +5V when the envelopes are triggered, and falls to ground level when the envelopes are released (either as a consequence of Gate in triggering or from MIDI note on/off messages). Clock in can be used to tick Anushri's clock (used for the arpeggiator, sequencer and drum machine) when it is set to external sync. Pulses on this input are expected to have a +5V high level, and last at least 2ms. The clock resolution can be set to either 24ppqn, 8ppqn, or 4ppqn. See the System configuration section. Clock out outputs a train of 2 ms-long pulses (+5V high level) at each tick of the clock (be it the internal clock, an external MIDI clock, or external triggers through the Clock in input).","title":"Interfacing with modular equipment"},{"location":"anushri/manual/#a-few-words-about-saving-and-memory","text":"Anushri does not have a load/save function or presets. All settings from the front panel are saved in internal memory and restored when the unit boots. Because saving takes time - half a second during which the unit freezes, and we don't want this to happen during a performance! - the settings are written to persistent memory only after 15s of inactivity. Thus, it is recommended to leave Anushri alone for this amount of time before switching it off. When the settings are saved to persistent memory, the column of 3 LEDs flashes. If for any reason you want to revert Anushri to its factory settings, power the unit on while holding the Run/stop button.","title":"A few words about saving and memory..."},{"location":"anushri/manual/#sequencer-arpeggiator-and-advanced-synthesis-features","text":"","title":"Sequencer, arpeggiator and advanced synthesis features"},{"location":"anushri/manual/#using-the-built-in-sequencer","text":"Anushri is equipped with a sequencer with step-by-step recording, mostly inspired by Roland's classic SH-101 and JX3-P sequencers. A sequence can contain up to 128 steps. The duration of a step is one sixteenth note (4 steps per beat). Each step can either contain: A note , with optional accent and slide. A rest , which indicates that this step is silent. A tie , which indicates that the note triggered at the previous step is not stopped, but rather prolonged, during this step. To start recording a sequence, press the Rec button. The column of 3 LEDs lights up to indicate that the recording mode is active. The row of 3 LEDs will indicate the current step, as previously illustrated. Press a note on the MIDI keyboard to add it to the sequence. Press Drums to input a rest in the sequence. Press Hold to input a tie in the sequence. Move the pitch bend lever (the position doesn't matter) before recording a note, and this note will be slid. Move the mod wheel up (the position doesn't matter) before recording a note, and this note will be accented (boost of filter envelope modulation and velocity). Finally, press Rec when you are done. To play the sequence, press the Run/stop button. To stop playback, press Run/stop again. When the unit is configured to use an external clock, the sequencer can also be started/stopped by sending the corresponding MIDI messages. While a sequence is playing, the MIDI notes played on the keyboard will transpose the sequence. C3 (MIDI note #60) will bring back the sequence to its original tonality.","title":"Using the built-in sequencer"},{"location":"anushri/manual/#arpeggiator-and-advanced-synthesis-features","text":"Additional synthesis settings, along with arpeggiator and sequencer options can be accessed by pressing the Clk/Kbd button. The following parameters are now assigned to the knobs: But first, one word of caution... Inadvertently changing some of these parameters can have a drastic and disastrous effect during a performance. Thus, when entering this page, the knobs are locked: the parameter will not change until the position of the potentiometer actually matches the current value of the setting it controls. Let us take an example. The sequencer is currently running at 120 BPM. Because you were tweaking the slide parameter in the synth section, the first knob is currently at its minimal position. If you press Kbd/Clk and start turning the first knob, the tempo won't immediately jump to its minimal setting. Instead, Anushri will wait until the position of the knob matches 120 BPM (middle position), and from then, it will start having an effect. A few other machines (including other Mutable Instruments products such as Shruthi and Ambika) have a similar feature and call this the snap mode . When a pot is locked, the left or right LED in the row of 3 indicates in which direction you have to turn the pot to unlock it. Now back to the actual settings! Tempo controls the tempo of the sequencer/arpeggiator, from 40 to 240 BPM. When set to its minimal value, the internal clock is disabled and an external clock is used. The external clock can come either from the MIDI in, or from pulses on the Clock in jack. Swing controls the swing of the internal clock. Swing cannot be applied to an external clock. Arp mode controls the mode and range of the arpeggiator. The options are: OFF - arpeggiator is disabled. Up 1 octave. Up 2 octaves. Down 1 octave. Down 2 octaves. Up & down 1 octave. Up & down 2 octaves. Random 1 octave. Random 2 octaves. Arp pattern controls the rhythmic pattern of the arpeggiator. 6 patterns are available. When this control is at its minimum position, a basic eighth note pattern is used. Arp acidity spices up the arpeggiator pattern by adding slides and accents at strategic times, with a well-balanced amount of randomness. The higher setting, the more likely slides/accents will be added. Octave acts as a global octave range control for both the VCO and DCO. Master tune acts as a global fine tune control (with a range of +/- 1 semitones) for both the VCO and DCO. Vibrato rate controls the speed of the vibrato LFO. The amplitude of this LFO is directly controlled by the modulation wheel of the MIDI keyboard. Vibrato destination controls the destination of the vibrato LFO. When this control is set to its minimum value, the vibrato LFO affects the pitch (actual vibrato). When this control is set to its maximum value, the vibrato LFO affects the cutoff frequency (\"growl\" or \"wah-wah\" effect). In the middle position, both the VCO and VCF are affected. Velocity destination indicates how MIDI note velocity affects the sound. When this control is set to its minimum value, velocity affects cutoff frequency (the harder the key is pressed, the more open the filter is). When this control is set to its maximum value, velocity affects VCA level (the harder the key is pressed, the louder the sound is). In the middle position, velocity has no effect on sound.","title":"Arpeggiator and advanced synthesis features"},{"location":"anushri/manual/#latch-and-hold-jamming-without-midi-keyboard","text":"While some keys are pressed on the MIDI keyboard, press the Hold button to keep them held. LEDs will be temporarily dimmed. Press Hold again to release them. This can be used as a \"latch\" function for the arpeggiator, freeing your hands to tweak the knobs while an arpeggio is being held... or simply to create a drone tone. The Hold function hides another mystery... Even if Anushri has been designed as a MIDI synth module, it is still possible to play it without an external keyboard or sequencer. Hold the Hold button for 2 seconds. A note starts playing. Turn the 5 knobs on the last row to step through scales. Press the Hold button again to leave this mode. This \"knob jamming\" mode can even be triggered while the sequencer is recording, and provides a fun way of letting your toddlers, pets or significant other input random but musically coherent (or not) sequences.","title":"Latch and hold, jamming without MIDI keyboard"},{"location":"anushri/manual/#drum-synth-and-generative-drum-machine","text":"","title":"Drum synth and generative drum machine"},{"location":"anushri/manual/#overview_1","text":"Anushri has a built-in drum synth and generative drum sequencer which can be played along with the synth section and its arpeggiator/sequencer. The drum synth comprises three parts, for bass drum (BD), snare drum (SD), and closed high-hat (HH). The bass drum and snare drum sounds are generated digitally, using a pitch and amplitude modulated digital oscillator and a noise source. The high-hat uses sample playback with variable speed, and an amplitude envelope. The drum machine is playing when the sequencer is running. If you want to play freely (or with the arpeggiator) on top of the drum machine, record an empty sequence - Rec , Rec - and press Run/stop to start the drum machine.","title":"Overview"},{"location":"anushri/manual/#understanding-the-generative-sequencer","text":"The sequencer controlling the drum section is unlike anything else. It is neither based on x0x-style step programming, nor on presets. It is mostly played by knobs. How does it work? Let us introduce two concepts.","title":"Understanding the generative sequencer"},{"location":"anushri/manual/#style-map","text":"One sleepless night, you have the crazy idea of tiling the floor of your apartment with your CD collection. You start taking the CDs and putting them on the floor, and then, come up with the idea of grouping them \"stylistically\"... Wouldn't it be great if CDs of bands that sound similar would be laid out close to each other? All the old-school Techno up north, hip-hop south, with maybe some big-beat of trip-hop in the middle, and an island of jazz on the east. What's great with this arrangement, where objects physically close to each other are sonically related to each other, is that tracing a path through the space would leave a continuous playlist with interesting transitions from one artist to the other... Now imagine doing the same thing with the collection of drum loops on your hard-drive... All variants of the Amen break would be clustered together, farther apart from the 909 house loops. There are indeed mathematical techniques to do this kind of arrangements and this is exactly how Anushri stores and organizes drum patterns. In the darkness of the Mutable Instruments labs, we have compiled many drum patterns, tiled them into a 2D map so that nearby patterns occupy nearby cells. What's the point of doing this? It allows an efficient way of \"nagivating\" through a large collection of rhythms with just two parameters: the X and Y coordinates on the map. Each rhythm from the original set is referenced by an X and Y position, and changing the coordinates transitions progressively to different, but still related sounding rhythms. It has nothing to do with the incongruous \"jumps\" one would hear by scrolling through a bank of presets or a list of drum loops files. It allows efficient data compression too - since many similar patterns end up in clusters at the same coordinates, we can pick one single representative in the group and ditch the others...","title":"Style map"},{"location":"anushri/manual/#note-additionremoval-lists-and-event-density","text":"From the previous section, you have learnt that Anushri stores a map of drum patterns, organized by similarity, and addressed by X and Y coordinates. What is stored is indeed more complicated than a x0x-like pattern with on and off LEDs... I'm sure you have already done this... Switch on your 808 (or clone), add a kick on the first step. Then on the 9th. Then on the 5th and 13th to get a four-to-the-floor pattern. Then on the 15th or 16th to add some more variations at the end of the bar... And then the snare... It starts with a simple hit on the 5th or 13th step (or both)... And then maybe a more complex pattern with the 2nd and 8th steps involved to add a syncopated feel. By analyzing such \"build-ups\" we can make a list of steps by order of importance. For the kick in a techno/house rhythm, the first beat is important, it shouldn't be missing... Closely followed by the 9th and 5th and 13th, and then maybe the 15th or 16th... Experts might or might not agree, but we don't need their opinion... By collecting a large dataset of rhythms, it is possible to compile statistics to answer the following question: \"given this drum pattern, if we were to add a bass drum note to it, what would be the most logical position where it would appear\"? We can do the operation the other way round: \"Given this drum pattern, if we were to remove a bass drum note from it, which one would it be?\". This question is easily answered by statistics: take a database of MIDI drum loops, take a pattern, and search for all the occurrences of drum patterns that differ by only one note. What has been added or removed? By iterating the process, we can build the list of steps, sorted by priority, which should be added to a pattern to enrich it - or removed from it to simplify it. This is the second ingredient! Anushri stores a 2D map of such note addition/removal lists. The X and Y coordinates on the map identify an overall \"genre\" in which the drum pattern will be performed. Then, by stepping through the note addition/removal lists for BD, SD and HH, we can make the drum pattern more dense or more sparse for each of those instruments. This is expressed by 3 parameters called BD, SD and HH density. When these parameters are increased, we zip through the note addition list to make the pattern richer and richer. When these parameters are decreased, we go backwards through the note removal list, to make the pattern sparser and sparser. It's a bit like creating a simple drum pattern in your sequencer, then micro-polishing it to hell with ghost notes and variations... and then stepping through the undo and redo commands to move back and forth between its simpler self and the drill'n'bass monster it has become. A last thing: representing drum patterns with note addition/removal lists allows very easily to add meaningful random variations. Play a drum pattern. You want to spice things up a bit? Just look for the next entry (or pair of entries) in the note addition list - it'll tell you where to add this extra snare roll or kick hit. Anushri's drum sequencer has this randomness built-in - it never really repeats itself! Let's summarize all of this. Anushri generates drum patterns and put you in control of the: The sparsity/density of the BD, SD and HH tracks, allowing immediate simplification or elaboration of the pattern played by each drum instrument. X, Y coordinates of the base \"pattern\", with many drum patterns organized by similarity in a 2D map. These patterns are not actual \"presets\" or x0x type grids, but rather note addition/removal lists for the sparsity/density controls. If this all sounds complicated to you, here is a final analogy: Anushri's approach of sculpting drum patterns is to a x0x what subtractive synthesis is to additive synthesis. Instead of building everything from scratch, you enrich or simplify/filter basic drum patterns, just like you filter rich waveforms on a subtractive synth instead of building them up from scratch with harmonics.","title":"Note addition/removal lists and event density"},{"location":"anushri/manual/#drum-machine-controls","text":"Map X and Map Y control the coordinates of the drum pattern on the style map. BD density , SD density and HH density indicate how sparse/dense the pattern is in terms of these elements. BD / SD adjusts the relative level of the BD and SD+HH sound generators. When turned left, the BD dominates; when turned right, the SD and HH dominate. BD tone controls the tone of the bass drum, by morphing through the following sounds: subdued 808-like kick, stronger 909-like kick, deeper 909-like kick, long decay 808-like kick, noisy industrial kick. SD tone controls the tone of the snare drum, by morphing through the following sounds: short 606-like snare, snappy 909-like snare, higher and higher pitched 808-like snare, zap! HH tone controls the tone of the high-hat, by increasing the pitch of the sound, and increasing, then lowering the decay time. Bandwidth controls the sample rate of the drum synth. Think of it as an 8-bit poor man's filter... Note that the tone generator is quite lo-fi! Since it uses 8-bit precision with PWM conversion, the BD signal exhibits significant noise when the amplitude decreases (a Mirage or an Amiga did it, too), and the noise floor is quite high. External processing of this signal through EQ, filters or noise gates is recommended, and is facilitated by the individual drums output on the front panel. It is worth observing that if the drum machine section is not used, Anushri's noise floor can be significantly improved by plugging a jack into the Drums out output to take out of the mix some of the background noise coming out of the processor.","title":"Drum machine controls"},{"location":"anushri/manual/#advanced-topics","text":"","title":"Advanced topics"},{"location":"anushri/manual/#system-configuration","text":"","title":"System configuration"},{"location":"anushri/manual/#midi-channel-selection","text":"To select which MIDI channel Anushri will respond to, hold Hold and press the Synth button, then play a note on the MIDI channel you want it to respond to. Note that the active MIDI channel is indicated by a combination of LEDs:","title":"MIDI channel selection"},{"location":"anushri/manual/#midi-out-message-filter","text":"Hold Hold and press the Kbd/Clk button to select the messages that Anushri sends to the MIDI out. The LED temporarily displays the message types which are enabled/disabled for transmission. Pressing the switches activates or deactivates those messages. When the Thru LED is lit, incoming MIDI messages are forwarded to the MIDI out. When the Arp/Seq LED is lit, the note events generated by the sequencer and arpeggiator are sent to the MIDI out (for example to trigger external gear using Anushri's arpeggiator and sequencer). When the Drums LED is lit, the note events generated by the drum pattern generator are sent to the MIDI out, on channel 10 (for example to trigger an external drum module). When the Clock LED is lit, the start/stop and clock events driving Anushri's sequencer are sent to the MIDI out.","title":"MIDI out message filter"},{"location":"anushri/manual/#clock-resolution","text":"Hold Hold and press the Drums button to change the resolution of Anushri's clock system. 24 ppqn is the resolution of the MIDI standard and is the recommended setting - unless you are interfacing through the Clock in and Clock out ports with modular systems which have different resolutions.","title":"Clock resolution"},{"location":"anushri/manual/#summary-hold-key-special-functions","text":"Hold + Synth : MIDI channel learn. Hold + Clk/Kbd : MIDI output filters. Hold + Drums : Sequencer resolution. Hold + Rec : Disable software tuning correction. Hold + Run/stop : Enable software tuning and tune VCO. Hold held for a long time: Play drone note and enable scales on lower row of knobs.","title":"Summary: Hold + key special functions"},{"location":"anushri/manual/#hidden-midi-functions","text":"","title":"Hidden MIDI functions"},{"location":"anushri/manual/#advanced-sound-editing","text":"A handful of synth settings unavailable on the front panel can still be edited by CC : Simultaneous envelope and LFO modulation on the VCO (CC 16 and 17). Simultaneous envelope and LFO modulation on PWM (CC 18 and 19). VCF keyboard tracking amount (CC 23). The value 64 gives 1:1 tracking and is the default. More importantly, the individual parameters of the drum synth can be edited through CCs 16 to 30 on channel 10. Please refer to the last column of the CC Map .","title":"Advanced sound editing"},{"location":"anushri/manual/#manual-triggering-of-the-drum-synth","text":"The drum synth responds to MIDI notes 36, 38 and 42 (respectively BD, SD, and closed HH in the General MIDI standard) on channel 10.","title":"Manual triggering of the drum synth"},{"location":"anushri/manual/#x0x-style-programming-of-the-drum-machine","text":"If maps and densities are not your thing, there is still a way of entirely overriding the generative drum machine and program x0x patterns into it! This is done through a MIDI keyboard sending notes on MIDI channel 16. The lowest C# key (on a 61 notes keyboard) is used to enable or disable the generative drum machine, with the programmed x0x pattern taking over. The D# key clears the pattern programmed for the current instrument. The F# / G# / A# keys select the instrument to program. Finally the white keys are used for activating/deactivating notes at each of the 16 steps.","title":"x0x-style programming of the drum machine"},{"location":"anushri/manual/#sysex-backup","text":"Hold Run/stop for a few seconds to request a SysEx dump of all internal settings. The resulting data (or chunks of it) can be be sent to Anushri at later time to restore its settings.","title":"SysEx Backup"},{"location":"anushri/manual/#firmware-update","text":"Keep the Hold key pressed while Anushri is powered on to put it into firmware update mode. Every second LED will be lit. The unit is now ready to receive the update data, which can be sent as a SysEx file (with a 250ms or more delay between packets) or as a MIDIfile. The LEDs blink on every received packet. The update takes about 1 minute, and can be restarted in case of accidental interruption. Upon reception of the last packet, the unit immediately boots with the new firmware. If you want to use a dedicated SysEx transfer tool rather than a sequencer, we recommend Elektron's C6 tool available for both Windows and OS X, with the following timing settings:","title":"Firmware update"},{"location":"anushri/manual/#factory-reset","text":"Keep the Run/stop key pressed while Anushri is powered on to revert all synthesis and system settings (including tuning compensation!) to their default values.","title":"Factory reset"},{"location":"anushri/manual/#midi-implementation","text":"","title":"MIDI implementation"},{"location":"anushri/manual/#basics","text":"A MIDI implementation chart is available here .","title":"Basics"},{"location":"anushri/manual/#sysex","text":"Anushri can receive and transmit settings in system exclusive format. The messages all share the same format: 0xf0 (SysEx) 0x00 0x21 0x02 (Mutable Instruments Manufaturer ID) 0x00 0x08 (Product ID for Anushri) Command Argument Payload Checksum 0xf7 (End of SysEx) Command indicates what the receiver should do with the data in the payload block, and argument is a byte that might contain an additional piece of information about what to do with the data. Payload is a sequence of bytes in nibblized form. For example, the sequence 0x80 0x56 0x13 is transmitted as 0x08 0x00 0x05 0x06 0x01 0x03 . Checksum is equal to the nibblized-sum, modulo 256, of the bytes. In the example above, the checksum is equal to 0x80 + 0x56 + 0x13 = 0xe9 and is transmitted as 0x0e 0x09 .","title":"SysEx"},{"location":"anushri/manual/#data-structure-dump","text":"When transfering patch/sequence/program/multi data to Anushri, command is always 0x01 and argument indicates the data structure being sent. The following table summarizes the different payload types. Argument Affected data structure Payload size 0 SystemSettingsData 15 bytes 1 Patch 28 bytes 2 SequencerSettings 24 bytes 3 Sequence (first part) 128 bytes 4 Sequence (second part) 33 bytes","title":"Data structure dump"},{"location":"anushri/manual/#bulk-dump-request","text":"When Anushri receives a SysEx block with command equal to 0x11, argument equal to 0x00, and an empty payload, it spits a full SysEx dump of its memory, made of five SysEx packets (command/argument equal to 0x01 0x00, 0x01 0x01, 0x01 0x02, 0x01 0x03 and 0x01 0x04).","title":"Bulk dump request"},{"location":"bbf/","text":"At Mutable Instruments we very often work with solderless breadboards to prototype audio circuits, and we have designed a collection of small modules that \"ride\" on top of breadboards to make our lives easier during those long hours tweaking circuits. Over the past years, our list of breadboarding pet peeves included: The jack connector that appeared to fit well, but silently pops out after hours of use causing numerous WTF?. The PCB-mounted pot that appeared to fit well, but suddenly jumped out and tried to hit our eyes. The pain of breadboarding over and over again the same TL072 amp stage or buffer. Messy power supply wires which were never long enough. WTFs because of the wire (dis)connecting the lower and upper row of GND. We've tried to address those issues with the following modules. They work for most of the breadboards in use here, but not all, so if you plan to get one, check that it matches your breadboard size too! This also shows you which convention is used for the rails at the top/bottom of the board. From top to bottom: positive supply, ground, ground, negative supply. +/- 5V (or more) Power supply This dual supply based on the LT1054 DC converter can deliver up to 1A on the positive rail (OK, 1A is a bit unrealistic, it'll get very warm for such a current), and up to 100mA on the negative rail. It takes as an input a DC voltage from a standard DC wall-wart with a center-positive connector (labelled as + o) - on the device). You can solder 7805 / 7905 regulators to get +/-5 V, in which case the input voltage must exceed 7.5V to give enough headroom to the regulators. You can also use 7808 / 7908 regulators to get +/- 8V, in which case the input voltage must exceed 11V. Beware! The LT1054 does not tolerate input voltages above 15V . It would be risky, but possible, to get +/- 12V. Connectors for 3.5mm jacks This board provides connections for four 3.5mm jack connectors into a standard header. We use it to interface our prototypes with an Eurorack modular - this is great for generating plenty of interesting test signals with LFOs and envelopes! For each connector, two pins are available: one connected to the tip (signal in/out), and one used for providing a signal when no jack is plugged - so you can normal a value into an unplugged input. Potentiometers This board consists of two potentiometers; with their 3 terminals (A, Wiper, B) accessible through headers. You can easily insert jumpers to ground the lower end of the potentiometer; and to connect the upper end of the potentiometer to the positive supply voltage. Audio output This board hosts a 6.35mm mono jack connector, and an op-amp providing both a (non-inverting) buffer and an inverting amplifier stage. 4 configurations are available: Connect a cable from your circuit to >Out. The corresponding voltage is directly sent to the audio jack. Connect a cable from your circuit to >Voltage, and add a jumper between Buffer and >Out. The corresponding voltage is buffered and sent to the audio jack. Connect a cable from your circuit to >Voltage, and add a jumper between Inv Amp and >Out. The corresponding voltage is inverted and sent to the audio jack. Note that the TL072 is not the best buffer out there, so we highly recommend you to use this configuration if you don't care about the phase of your output signal. Connect a cable from your circuit to >Current, and add a jumper between Inv Amp and >Out. The corresponding current is converted into a voltage (with a gain of 100kOhm). This allows the TL072 on the board to be used as the last current->voltage conversion step in signal processing chains involving OTAs or VCA chips which usually have a current output, rather than a voltage output. Schematics and layout Hosted on github . BOM Bill of Materials . License cc-by-sa-3.0 .","title":"Breadboard Friends"},{"location":"bbf/#-5v-or-more-power-supply","text":"This dual supply based on the LT1054 DC converter can deliver up to 1A on the positive rail (OK, 1A is a bit unrealistic, it'll get very warm for such a current), and up to 100mA on the negative rail. It takes as an input a DC voltage from a standard DC wall-wart with a center-positive connector (labelled as + o) - on the device). You can solder 7805 / 7905 regulators to get +/-5 V, in which case the input voltage must exceed 7.5V to give enough headroom to the regulators. You can also use 7808 / 7908 regulators to get +/- 8V, in which case the input voltage must exceed 11V. Beware! The LT1054 does not tolerate input voltages above 15V . It would be risky, but possible, to get +/- 12V.","title":"+/- 5V (or more) Power supply"},{"location":"bbf/#connectors-for-35mm-jacks","text":"This board provides connections for four 3.5mm jack connectors into a standard header. We use it to interface our prototypes with an Eurorack modular - this is great for generating plenty of interesting test signals with LFOs and envelopes! For each connector, two pins are available: one connected to the tip (signal in/out), and one used for providing a signal when no jack is plugged - so you can normal a value into an unplugged input.","title":"Connectors for 3.5mm jacks"},{"location":"bbf/#potentiometers","text":"This board consists of two potentiometers; with their 3 terminals (A, Wiper, B) accessible through headers. You can easily insert jumpers to ground the lower end of the potentiometer; and to connect the upper end of the potentiometer to the positive supply voltage.","title":"Potentiometers"},{"location":"bbf/#audio-output","text":"This board hosts a 6.35mm mono jack connector, and an op-amp providing both a (non-inverting) buffer and an inverting amplifier stage. 4 configurations are available: Connect a cable from your circuit to >Out. The corresponding voltage is directly sent to the audio jack. Connect a cable from your circuit to >Voltage, and add a jumper between Buffer and >Out. The corresponding voltage is buffered and sent to the audio jack. Connect a cable from your circuit to >Voltage, and add a jumper between Inv Amp and >Out. The corresponding voltage is inverted and sent to the audio jack. Note that the TL072 is not the best buffer out there, so we highly recommend you to use this configuration if you don't care about the phase of your output signal. Connect a cable from your circuit to >Current, and add a jumper between Inv Amp and >Out. The corresponding current is converted into a voltage (with a gain of 100kOhm). This allows the TL072 on the board to be used as the last current->voltage conversion step in signal processing chains involving OTAs or VCA chips which usually have a current output, rather than a voltage output.","title":"Audio output"},{"location":"bbf/#schematics-and-layout","text":"Hosted on github .","title":"Schematics and layout"},{"location":"bbf/#bom","text":"Bill of Materials .","title":"BOM"},{"location":"bbf/#license","text":"cc-by-sa-3.0 .","title":"License"},{"location":"cvpal/build/","text":"Getting ready We assume you know soldering. If you don't, look first at this tutorial . The CVpal is very easy to build even for beginners! DISCLAIMER: We are not responsible for anything wrong (including electric shocks, malfunctions, fires, accidents involving a soldering iron) that might happen during the assembly of the kit. Everything you do while assembling the kit is at your own risks. Step 1: Zener diodes Solder the two 3.6V Zener diodes D1 and D2. They are polarized. The black ring on the diode must be on the same side as the stripe printed on the circuit board. These diodes serve as voltage-limiters: the USB standard requires 3.3V while the microcontroller uses 5V I/O (the currents involved are so small that the voltages on the diodes do not actually reach 3.6V!). Step 2: Resistors Solder the two 68R resistors (blue, grey, black, golden) in positions R6 and R7. Orientation does not matter. These two resistors work along with the Zener diodes for voltage limiting. Solder the five 220R resistors (red, red, black, black) in positions R1 to R5. The resistor below the LED provides current to the LED - the smaller the resistor, the brighter the LED... until it is destroyed by excess of current! If you ever want to solder a fancy-colored LED (blue, white, pink...) instead of the one provided with the kit, you'll need to use a larger resistor. Rule of thumb: look at the brightness in mcd in the datasheet and multiply by 10 to get the value of a suitable resistor. 220\u03a9 is fine for the green LED provided with the kit. The four resistors near the output ports serve as a protection in case you connect, by mistake, the output of a module into the CV/Gate outputs. Higher values would provide more protection but would cause voltage drops (and thus, detuning) when the output is connected to several modules via multiples/stackcables. Solder the 2.2k resistor (red, red, black, brown) in position R8. This resistor is what allows the host computer/smartphone to recognize the CVpal as a low-speed USB device. Solder the 10k resistor (brown, black, black, red) in position R9. This resistor \"pulls up\" the reset line of the microcontroller - causing it to run continuously after it has been powered. Step 3: Capacitors Solder the two 18pF ceramic capacitors C2 and C3. The number \"180\" is printed on them (This reads as 18 x 10\\^0 pF). These capacitors are not polarized. They are companions to the quartz Q1. Solder the two 100nF ceramic capacitors C1 and C5. The number \"104\" is printed on them (10 x 10\\^4 pF = 100nF). These capacitors are not polarized. They are known as \"decoupling capacitors\". Their role is to provide a local reservoir of energy to an integrated circuit (the microcontroller IC1 and the digital-to-analog converter IC2). This improves the stability of the power supply line, and ultimately prevents cross-talk or unexpected coupling/glitches between integrated circuits. Solder the 20 MHz quartz Q1. This part is not polarized. The quartz is the \"heart\" that makes the microcontroller beat - on the CVpal, the ATTiny microcontroller will perform 20 million elementary operations per second. Solder the 100\u00b5F electrolytic capacitor C4. This capacitor is polarized . The long lead goes on the \"+\" side (as printed on the PCB). The white stripe on the side of the capacitor indicates the negative side. This picture was taken while the capacitor was being inserted through the board - so that the marking on the circuit board is visible: Of course, you need to push it all the way down, not let it float above the board like that! Solder the 22\u00b5H inductor L1. The 100\u00b5F capacitor is also a decoupling capacitor for the digital to analog converter. Teaming with the inductor, it prevents the signals emitted by the DAC to \"see\" any of the fluctuations and impurities coming from the computer. Digital circuitry needs to be isolated from sensitive analog circuitry! Step 4: Integrated circuits sockets Solder the two sockets for IC1 and IC2. Make sure that the notch on the socket is on the same side as the notch printed on the board. Sockets make it easy to replace integrated circuits in case of failure or... assembly mistake! Step 5: LED Solder the LED. The LED is polarized . Look at the drawing printed on the board. The circle representing the LED has a \"flat\" side where the text \"LED 1\" is printed. This indicates the cathode (short lead -) of the LED. The other side is the anode (long lead +). Notice that the LED also has a flat side. If you plan to mount the CVpal in a Eurorack modular system, you need to keep the LED about 1 cm above the PCB so that you can bend it to reach the hole in the panel. Step 6: Connectors Pro tip: Use the front panel to keep the connectors well-aligned while you solder them. Solder the 4 jack connectors and the USB socket. Step 7: Integrated circuits Insert the two integrated circuits in their socket. Orientation is very important! The notch on the IC should be on the same side as the notch printed on the circuit board. The ATTiny84 is a microcontroller with 8kb of non-volatile program memory (flash), 512 bytes of non-volatile memory (eeprom) and 512 bytes of RAM. It runs a program implementing the USB-MIDI protocol, sorting notes, emitting gates/triggers on the GATE outputs, and driving the digital to analog converter to produce CVs. You can see the source code of this program here . The MCP4822 is a two-channel digital to analog converter with 12-bit of resolution - it can emit two voltages from 0 to 4.095V by increments of 1mV, under control of the microcontroller. Step 8: Firmware programming Skip this step if you bought a kit The microcontroller supplied with the kit is already programmed. Download the file cvpal.hex . Solder a 2x3 header to the AVR ISP port. Connect your ISP programmer to the header and run the following avrdude commands: avrdude -V -p t84 -c PROGRAMMER_NAME -P usb -B 10 -e -u \\ -U efuse:w:0xff:m \\ -U hfuse:w:0xd6:m \\ -U lfuse:w:0xde:m \\ -U lock:w:0x2f:m avrdude -V -p t84 -c PROGRAMMER_NAME -P usb -B 1 -U flash:w:cvpal.hex:i -U lock:w:0x2f:m Replace PROGRAMMER_NAME by the name of your programmer, for example avrispmkII if you use Atmel's official programmer. Calibration Note: Yamaha and Roland have defined different schemes for numbering octaves \u2013 and since then nobody ever agreed on this! If, in the following procedures, everything appears to be off by one octave (the manual says something will happen with C4 but it happens with C3) or if measurements are off by +/-1V, don't panic \u2013 it is simply that your controller/DAW uses a different scheme for numbering octaves. Introduction The CVpal uses the V/Oct standard - every time the note increases by one octave, the voltage on the CV output increases by 1V. To make sure that this exact interval of 1V is reproduced (and thus that the VCO driven by the CVpal will play in tune), a calibration procedure is necessary. In this procedure, we will \"tune\" the voltage emitted by the CVpal for eight notes: F#2, C3, F#3, C4, F#4, C5, F#5 and C6. It is not necessary to calibrate more notes because the CVpal will interpolate between these. It is necessary to calibrate that many notes because the DAC has imperfections (non-linearity) that make a 2-point calibration (like the OFFSET/Scale trimmers found on many, many MIDI/CV interface) inaccurate. This procedure will have to be done for the two channels (CV1 / CV2). Setup Connect the CVpal to a computer or smartphone with a USB cable. Check that the LED is lit (CVpal receives power) and that the CVpal is listed as a MIDI device in your sequencer (the microcontroller is up and running and the USB link is sound). Configure your sequencer software/app to make it play the note F#2 on channel 15. Here is how it looks in Logic, for example (we use the built-in keyboard, the key to press is \"T\"): F#2 is the first F# key on a 49-key keyboard: The next steps involve voltage measurements - lots of them. We assume that you have a digital multimeter with 3.5 or more digits of accuracy, and that it is set to measure small DC voltages (450mV to 4.5V). Measure the voltage on the CV1 output. Here are two ways of doing it: You can either connect a cable to the CV1 output, and put the probes on the other end of the jack (black probe/COM on the sleeve, red probe/V on the tip). Another approach is to put the black (COM) probe on the lower-left pin of the ISP connector, and the red probe (V) on the metal part of the jack for CV1 output. Calibration For the F#2 note, the voltage you measure must be between 450mV and 550mV. If this is not the case, verify that you have played the correct note (if you get something like 1.5V or 2.5V - it is a sign that you are playing the wrong octave!). Press the keys F2 and G2 to, respectively, decrease and increase the read voltage, so that you get as close as you can to 500mV. The keys will apply a change of about 1mV. Done? Then play a C3 note. The voltage measured on the CV1 output should be near 1.0V. Use B2 and C#3 to, respectively, decrease and increase the voltage, until you get as close as you can to 1.000V. The following chart shows the notes that need to be tuned next: Note: Yamaha and Roland have defined different ways of assigning an octave number to a MIDI note \u2013 and since then nobody agrees on them! Don't be surprised is the *C3* in this chart is your *C4*, or the other way round. Once the last note has been tuned, you can tune the second CV channel. The procedure is almost the same: For the voltage measurement, the cable will have to be plugged, this time, in channel 2 output (or you will have to put the red probe of the meter on the CV output 2 jack). The MIDI notes will have to be sent on channel 16 instead of 15 Technical documents PCB and schematics Here is a view of the board (click for a larger version): You can find the Eagle files for this board in the cvpal/hardware_design/pcb directory of the source code hosted on github . The schematics in PDF format are here . Finally, the parts placement diagram (top view). Bill of materials (Full page version) Note that Reichelt does not sell the right version of the ATTiny84 - the version they have in stock is limited to a 10 MHz clock rate, while the CVpal uses a 20 MHz clock rate. We have tried overclocking this chip and it worked, but cannot confirm whether this solution is reproducible and sustainable. License and credits This circuit and PCB layout are made available under a cc-by-sa-3.0 license. The firmware is released under a GPL3.0 license. It uses Objective Development's V-USB virtual USB library .","title":"Build instructions"},{"location":"cvpal/build/#getting-ready","text":"We assume you know soldering. If you don't, look first at this tutorial . The CVpal is very easy to build even for beginners! DISCLAIMER: We are not responsible for anything wrong (including electric shocks, malfunctions, fires, accidents involving a soldering iron) that might happen during the assembly of the kit. Everything you do while assembling the kit is at your own risks.","title":"Getting ready"},{"location":"cvpal/build/#step-1-zener-diodes","text":"Solder the two 3.6V Zener diodes D1 and D2. They are polarized. The black ring on the diode must be on the same side as the stripe printed on the circuit board. These diodes serve as voltage-limiters: the USB standard requires 3.3V while the microcontroller uses 5V I/O (the currents involved are so small that the voltages on the diodes do not actually reach 3.6V!).","title":"Step 1: Zener diodes"},{"location":"cvpal/build/#step-2-resistors","text":"Solder the two 68R resistors (blue, grey, black, golden) in positions R6 and R7. Orientation does not matter. These two resistors work along with the Zener diodes for voltage limiting. Solder the five 220R resistors (red, red, black, black) in positions R1 to R5. The resistor below the LED provides current to the LED - the smaller the resistor, the brighter the LED... until it is destroyed by excess of current! If you ever want to solder a fancy-colored LED (blue, white, pink...) instead of the one provided with the kit, you'll need to use a larger resistor. Rule of thumb: look at the brightness in mcd in the datasheet and multiply by 10 to get the value of a suitable resistor. 220\u03a9 is fine for the green LED provided with the kit. The four resistors near the output ports serve as a protection in case you connect, by mistake, the output of a module into the CV/Gate outputs. Higher values would provide more protection but would cause voltage drops (and thus, detuning) when the output is connected to several modules via multiples/stackcables. Solder the 2.2k resistor (red, red, black, brown) in position R8. This resistor is what allows the host computer/smartphone to recognize the CVpal as a low-speed USB device. Solder the 10k resistor (brown, black, black, red) in position R9. This resistor \"pulls up\" the reset line of the microcontroller - causing it to run continuously after it has been powered.","title":"Step 2: Resistors"},{"location":"cvpal/build/#step-3-capacitors","text":"Solder the two 18pF ceramic capacitors C2 and C3. The number \"180\" is printed on them (This reads as 18 x 10\\^0 pF). These capacitors are not polarized. They are companions to the quartz Q1. Solder the two 100nF ceramic capacitors C1 and C5. The number \"104\" is printed on them (10 x 10\\^4 pF = 100nF). These capacitors are not polarized. They are known as \"decoupling capacitors\". Their role is to provide a local reservoir of energy to an integrated circuit (the microcontroller IC1 and the digital-to-analog converter IC2). This improves the stability of the power supply line, and ultimately prevents cross-talk or unexpected coupling/glitches between integrated circuits. Solder the 20 MHz quartz Q1. This part is not polarized. The quartz is the \"heart\" that makes the microcontroller beat - on the CVpal, the ATTiny microcontroller will perform 20 million elementary operations per second. Solder the 100\u00b5F electrolytic capacitor C4. This capacitor is polarized . The long lead goes on the \"+\" side (as printed on the PCB). The white stripe on the side of the capacitor indicates the negative side. This picture was taken while the capacitor was being inserted through the board - so that the marking on the circuit board is visible: Of course, you need to push it all the way down, not let it float above the board like that! Solder the 22\u00b5H inductor L1. The 100\u00b5F capacitor is also a decoupling capacitor for the digital to analog converter. Teaming with the inductor, it prevents the signals emitted by the DAC to \"see\" any of the fluctuations and impurities coming from the computer. Digital circuitry needs to be isolated from sensitive analog circuitry!","title":"Step 3: Capacitors"},{"location":"cvpal/build/#step-4-integrated-circuits-sockets","text":"Solder the two sockets for IC1 and IC2. Make sure that the notch on the socket is on the same side as the notch printed on the board. Sockets make it easy to replace integrated circuits in case of failure or... assembly mistake!","title":"Step 4: Integrated circuits sockets"},{"location":"cvpal/build/#step-5-led","text":"Solder the LED. The LED is polarized . Look at the drawing printed on the board. The circle representing the LED has a \"flat\" side where the text \"LED 1\" is printed. This indicates the cathode (short lead -) of the LED. The other side is the anode (long lead +). Notice that the LED also has a flat side. If you plan to mount the CVpal in a Eurorack modular system, you need to keep the LED about 1 cm above the PCB so that you can bend it to reach the hole in the panel.","title":"Step 5: LED"},{"location":"cvpal/build/#step-6-connectors","text":"Pro tip: Use the front panel to keep the connectors well-aligned while you solder them. Solder the 4 jack connectors and the USB socket.","title":"Step 6: Connectors"},{"location":"cvpal/build/#step-7-integrated-circuits","text":"Insert the two integrated circuits in their socket. Orientation is very important! The notch on the IC should be on the same side as the notch printed on the circuit board. The ATTiny84 is a microcontroller with 8kb of non-volatile program memory (flash), 512 bytes of non-volatile memory (eeprom) and 512 bytes of RAM. It runs a program implementing the USB-MIDI protocol, sorting notes, emitting gates/triggers on the GATE outputs, and driving the digital to analog converter to produce CVs. You can see the source code of this program here . The MCP4822 is a two-channel digital to analog converter with 12-bit of resolution - it can emit two voltages from 0 to 4.095V by increments of 1mV, under control of the microcontroller.","title":"Step 7: Integrated circuits"},{"location":"cvpal/build/#step-8-firmware-programming","text":"Skip this step if you bought a kit The microcontroller supplied with the kit is already programmed. Download the file cvpal.hex . Solder a 2x3 header to the AVR ISP port. Connect your ISP programmer to the header and run the following avrdude commands: avrdude -V -p t84 -c PROGRAMMER_NAME -P usb -B 10 -e -u \\ -U efuse:w:0xff:m \\ -U hfuse:w:0xd6:m \\ -U lfuse:w:0xde:m \\ -U lock:w:0x2f:m avrdude -V -p t84 -c PROGRAMMER_NAME -P usb -B 1 -U flash:w:cvpal.hex:i -U lock:w:0x2f:m Replace PROGRAMMER_NAME by the name of your programmer, for example avrispmkII if you use Atmel's official programmer.","title":"Step 8: Firmware programming"},{"location":"cvpal/build/#calibration","text":"Note: Yamaha and Roland have defined different schemes for numbering octaves \u2013 and since then nobody ever agreed on this! If, in the following procedures, everything appears to be off by one octave (the manual says something will happen with C4 but it happens with C3) or if measurements are off by +/-1V, don't panic \u2013 it is simply that your controller/DAW uses a different scheme for numbering octaves.","title":"Calibration"},{"location":"cvpal/build/#introduction","text":"The CVpal uses the V/Oct standard - every time the note increases by one octave, the voltage on the CV output increases by 1V. To make sure that this exact interval of 1V is reproduced (and thus that the VCO driven by the CVpal will play in tune), a calibration procedure is necessary. In this procedure, we will \"tune\" the voltage emitted by the CVpal for eight notes: F#2, C3, F#3, C4, F#4, C5, F#5 and C6. It is not necessary to calibrate more notes because the CVpal will interpolate between these. It is necessary to calibrate that many notes because the DAC has imperfections (non-linearity) that make a 2-point calibration (like the OFFSET/Scale trimmers found on many, many MIDI/CV interface) inaccurate. This procedure will have to be done for the two channels (CV1 / CV2).","title":"Introduction"},{"location":"cvpal/build/#setup","text":"Connect the CVpal to a computer or smartphone with a USB cable. Check that the LED is lit (CVpal receives power) and that the CVpal is listed as a MIDI device in your sequencer (the microcontroller is up and running and the USB link is sound). Configure your sequencer software/app to make it play the note F#2 on channel 15. Here is how it looks in Logic, for example (we use the built-in keyboard, the key to press is \"T\"): F#2 is the first F# key on a 49-key keyboard: The next steps involve voltage measurements - lots of them. We assume that you have a digital multimeter with 3.5 or more digits of accuracy, and that it is set to measure small DC voltages (450mV to 4.5V). Measure the voltage on the CV1 output. Here are two ways of doing it: You can either connect a cable to the CV1 output, and put the probes on the other end of the jack (black probe/COM on the sleeve, red probe/V on the tip). Another approach is to put the black (COM) probe on the lower-left pin of the ISP connector, and the red probe (V) on the metal part of the jack for CV1 output.","title":"Setup"},{"location":"cvpal/build/#calibration_1","text":"For the F#2 note, the voltage you measure must be between 450mV and 550mV. If this is not the case, verify that you have played the correct note (if you get something like 1.5V or 2.5V - it is a sign that you are playing the wrong octave!). Press the keys F2 and G2 to, respectively, decrease and increase the read voltage, so that you get as close as you can to 500mV. The keys will apply a change of about 1mV. Done? Then play a C3 note. The voltage measured on the CV1 output should be near 1.0V. Use B2 and C#3 to, respectively, decrease and increase the voltage, until you get as close as you can to 1.000V. The following chart shows the notes that need to be tuned next: Note: Yamaha and Roland have defined different ways of assigning an octave number to a MIDI note \u2013 and since then nobody agrees on them! Don't be surprised is the *C3* in this chart is your *C4*, or the other way round. Once the last note has been tuned, you can tune the second CV channel. The procedure is almost the same: For the voltage measurement, the cable will have to be plugged, this time, in channel 2 output (or you will have to put the red probe of the meter on the CV output 2 jack). The MIDI notes will have to be sent on channel 16 instead of 15","title":"Calibration"},{"location":"cvpal/build/#technical-documents","text":"","title":"Technical documents"},{"location":"cvpal/build/#pcb-and-schematics","text":"Here is a view of the board (click for a larger version): You can find the Eagle files for this board in the cvpal/hardware_design/pcb directory of the source code hosted on github . The schematics in PDF format are here . Finally, the parts placement diagram (top view).","title":"PCB and schematics"},{"location":"cvpal/build/#bill-of-materials","text":"(Full page version) Note that Reichelt does not sell the right version of the ATTiny84 - the version they have in stock is limited to a 10 MHz clock rate, while the CVpal uses a 20 MHz clock rate. We have tried overclocking this chip and it worked, but cannot confirm whether this solution is reproducible and sustainable.","title":"Bill of materials"},{"location":"cvpal/build/#license-and-credits","text":"This circuit and PCB layout are made available under a cc-by-sa-3.0 license. The firmware is released under a GPL3.0 license. It uses Objective Development's V-USB virtual USB library .","title":"License and credits"},{"location":"cvpal/manual/","text":"Overview Mutable Instruments' CVpal is a DIY USB MIDI to CV interface - enabling you to control an analog synthesizer or modular system from a computer or smartphone/tablet equipped with a USB port. The CVpal is class-compliant and as such, does not require any driver. It features various conversion/voice allocation modes, covering monophonic, duophonic and drums/triggers applications. Quirks ahoy! Before moving forward, it is important to state some limitations of the CVpal - most of them due to its ridiculously simple design: The CVpal is a USB device not a USB host ! It can be connected to 'active' devices such as smartphones, tablets, laptop or desktop computers, but not to USB MIDI controllers. The CV output is in the 0 .. 4V range - so a tessitura of 4 octaves is covered. The CVpal does not support V/Hz conversion; only V/Oct. The Gate output uses V-trig, has a 5V high level, and a direct polarity (note on = 5V, note off = 0V). Most Eurorack modules use a trigger level below 2.5V and can thus be triggered by the CVpal. If a module or synth requires a higher level, a level conversion circuit such as the CD4504 can be used. Polarity inversion can be implement with a CD4049 or with a software hack. S-trig conversion can be implement with a few parts. The CVpal works optimally with iOS, OS X >= 10.6.3 or Linux kernel >= 2.6. On other operating systems, the messages might be delayed by up to 8ms, causing a very jittery timing! Installation The CVpal can either be mounted in a Eurorack system, or used as a standalone box. In both cases, it does not need any external power source as it is powered by the USB bus. About conversion modes The CVpal interprets MIDI messages differently depending on the MIDI channel on which they are received. For example, when receiving messages on MIDI channel 1, it behaves like a monophonic synthesizer and outputs a CV/Gate pair. When receiving messages on MIDI channel 10, it behaves instead like a drum trigger converter and outputs a trigger for 4 drum instruments. Channel 1: Monophonic mode This mode is enabled when any MIDI message is received on channel 1. The CVpal behaves like a classic monophonic CV-Gate converter implementing most recent note priority. OUT 1: Note CV OUT 2: Velocity CV GATE 1: Gate GATE 2: Gate Channel 2: Turbocharged monophonic mode This mode is enabled when any MIDI message is received on channel 2. The CVpal behaves like a monophonic CV-Gate converter implementing most recent note priority, but the primary Gate output is now a digital square oscillator! OUT 1: Note CV OUT 2: Velocity CV GATE 1: Square oscillator playing the received MIDI note GATE 2: Gate Bonus digital square oscillator! Hell Yeah! Channel 3 / Channel 4: Dual monophonic mode This mode is enabled when a MIDI message is received on channel 3 or on channel 4. The CVpal behaves like two independent monophonic CV-Gate converters with most recent note priority. One of them listens to notes received on channel 3, the other on channel 4. OUT 1: Note CV for channel 3 OUT 2: Note CV for channel 4 GATE 1: Gate for channel 3 GATE 2: Gate for channel 4 Channel 5: Duophonic mode This mode is enabled when a MIDI message is received on channel 5. The CVpal behaves like a duophonic CV-Gate converter with voice stealing. OUT 1: Note CV output 1 OUT 2: Note CV output 2 GATE 1: Gate GATE 2: Gate Channel 6: Controller conversion This mode is enabled when a MIDI message is received on channel 6. The CVpal converts continuous controllers (CC) 01 (modulation wheel) and 02 (breath controller) to control voltages. OUT 1: Modulation wheel CC (01) OUT 2: Breath controller CC (02) GATE 1: Binarized value of CC 3 GATE 2: Binarized value of CC 4 Channel 7/8: Note conversion + CC These modes are enabled when a MIDI message is received on channel 7 or 8. The CVpal behaves like a monophonic CV-Gate converter, with an additional CC value produced on the secondary output. OUT 1: Note CV OUT 2: Modulation wheel or breath controller CC (01 or 02) GATE 1: Gate GATE 2: Gate Channel 10: Drums This mode is enabled when a MIDI message is received on channel 10. CV Outputs 1 and 2 are respectively triggered by the MIDI notes 36 (kick drum on the GM drum map) and 38 (snare drum on the GM drum map). Gate outputs 1 and 2 are triggered by the MIDI note 40 (snare drum 2) and 46 (closed high-hat). OUT 1: BD (note 36) trigger OUT 2: SD (note 38) trigger GATE 1: SD2 (note 40) trigger GATE 2: CHH (note 46) trigger Channel 11: Drums gates Same as Channel 10, but with gates instead of triggers. Channel 12, 13, 14: Monophonic mode with clock/reset output In these modes, the CVpal behaves like a classic monophonic CV-Gate converter implementing most recent note priority, but also outputs triggers for synchronizing modular sequencers. A clock (with variable resolution) is sent to GATE 1; and a reset (corresponding to the MIDI 'start' message) is sent to GATE 2. OUT 1: Note CV OUT 2: Note Gate GATE 1: Clock trigger GATE 2: Reset trigger The resolution of the clock trigger depends on the MIDI channel used: 24 ppqn for channel 12; 8 ppqn for channel 13; 4 ppqn for channel 14. Calibration Note: Yamaha and Roland have defined different schemes for numbering octaves \u2013 and since then nobody ever agreed on this! If, in the following procedures, everything appears to be off by one octave (the manual says something will happen with C4 but it happens with C3) or if measurements are off by +/-1V, don't panic \u2013 it is simply that your controller/DAW uses a different scheme for numbering octaves. To ensure accurate note conversion, the CVpal needs to be manually calibrated. A digital multimeter with a precision of at least 3 digits is recommended for this task; but the calibration can also be done with an already calibrated synth or VCO module. OUT 1 is calibrated by sending note messages to channel 15. OUT 2 is calibrated by sending note messages to channel 16. Play a F#2 note (MIDI note 42). Check that the output voltage is 0.500V (or that the pitch of the emitted note on the synth/VCO is correct). If this is not the case, use F1 and G1 to make adjustments. Play a C3 note (MIDI note 48). The target voltage is 1.000V. Use B1 or C#2 to make adjustments. Play a F#3 note (MIDI note 54). The target voltage is 1.500V. Use F2 or G2 to make adjustments. Play a C4 note (MIDI note 60). The target voltage is 2.000V. Use B3 or C#3 to make adjustments. Play a F#4 note (MIDI note 66). The target voltage is 2.500V. Use F3 or G3 to make adjustments. Play a C5 note (MIDI note 72). The target voltage is 3.000V. Use B3 or C#4 to make adjustments. Play a F#5 note (MIDI note 78). The target voltage is 3.500V. Use F4 or G4 to make adjustments. Play a C6 note (MIDI note 84). The target voltage is 4.000V. Use B4 or C#5 to make adjustments. The following chart summarizes this: Technical note: to get maximum accuracy, it is recommended to temporarily connect a 100k resistor between the output being calibrated and ground. By doing so, the output protection resistor is taken into account. Not doing so might cause tuning errors of up to 10 cts at either ends of the scale.","title":"Manual"},{"location":"cvpal/manual/#overview","text":"Mutable Instruments' CVpal is a DIY USB MIDI to CV interface - enabling you to control an analog synthesizer or modular system from a computer or smartphone/tablet equipped with a USB port. The CVpal is class-compliant and as such, does not require any driver. It features various conversion/voice allocation modes, covering monophonic, duophonic and drums/triggers applications.","title":"Overview"},{"location":"cvpal/manual/#quirks-ahoy","text":"Before moving forward, it is important to state some limitations of the CVpal - most of them due to its ridiculously simple design: The CVpal is a USB device not a USB host ! It can be connected to 'active' devices such as smartphones, tablets, laptop or desktop computers, but not to USB MIDI controllers. The CV output is in the 0 .. 4V range - so a tessitura of 4 octaves is covered. The CVpal does not support V/Hz conversion; only V/Oct. The Gate output uses V-trig, has a 5V high level, and a direct polarity (note on = 5V, note off = 0V). Most Eurorack modules use a trigger level below 2.5V and can thus be triggered by the CVpal. If a module or synth requires a higher level, a level conversion circuit such as the CD4504 can be used. Polarity inversion can be implement with a CD4049 or with a software hack. S-trig conversion can be implement with a few parts. The CVpal works optimally with iOS, OS X >= 10.6.3 or Linux kernel >= 2.6. On other operating systems, the messages might be delayed by up to 8ms, causing a very jittery timing!","title":"Quirks ahoy!"},{"location":"cvpal/manual/#installation","text":"The CVpal can either be mounted in a Eurorack system, or used as a standalone box. In both cases, it does not need any external power source as it is powered by the USB bus.","title":"Installation"},{"location":"cvpal/manual/#about-conversion-modes","text":"The CVpal interprets MIDI messages differently depending on the MIDI channel on which they are received. For example, when receiving messages on MIDI channel 1, it behaves like a monophonic synthesizer and outputs a CV/Gate pair. When receiving messages on MIDI channel 10, it behaves instead like a drum trigger converter and outputs a trigger for 4 drum instruments.","title":"About conversion modes"},{"location":"cvpal/manual/#channel-1-monophonic-mode","text":"This mode is enabled when any MIDI message is received on channel 1. The CVpal behaves like a classic monophonic CV-Gate converter implementing most recent note priority. OUT 1: Note CV OUT 2: Velocity CV GATE 1: Gate GATE 2: Gate","title":"Channel 1: Monophonic mode"},{"location":"cvpal/manual/#channel-2-turbocharged-monophonic-mode","text":"This mode is enabled when any MIDI message is received on channel 2. The CVpal behaves like a monophonic CV-Gate converter implementing most recent note priority, but the primary Gate output is now a digital square oscillator! OUT 1: Note CV OUT 2: Velocity CV GATE 1: Square oscillator playing the received MIDI note GATE 2: Gate Bonus digital square oscillator! Hell Yeah!","title":"Channel 2: Turbocharged monophonic mode"},{"location":"cvpal/manual/#channel-3-channel-4-dual-monophonic-mode","text":"This mode is enabled when a MIDI message is received on channel 3 or on channel 4. The CVpal behaves like two independent monophonic CV-Gate converters with most recent note priority. One of them listens to notes received on channel 3, the other on channel 4. OUT 1: Note CV for channel 3 OUT 2: Note CV for channel 4 GATE 1: Gate for channel 3 GATE 2: Gate for channel 4","title":"Channel 3 / Channel 4: Dual monophonic mode"},{"location":"cvpal/manual/#channel-5-duophonic-mode","text":"This mode is enabled when a MIDI message is received on channel 5. The CVpal behaves like a duophonic CV-Gate converter with voice stealing. OUT 1: Note CV output 1 OUT 2: Note CV output 2 GATE 1: Gate GATE 2: Gate","title":"Channel 5: Duophonic mode"},{"location":"cvpal/manual/#channel-6-controller-conversion","text":"This mode is enabled when a MIDI message is received on channel 6. The CVpal converts continuous controllers (CC) 01 (modulation wheel) and 02 (breath controller) to control voltages. OUT 1: Modulation wheel CC (01) OUT 2: Breath controller CC (02) GATE 1: Binarized value of CC 3 GATE 2: Binarized value of CC 4","title":"Channel 6: Controller conversion"},{"location":"cvpal/manual/#channel-78-note-conversion-cc","text":"These modes are enabled when a MIDI message is received on channel 7 or 8. The CVpal behaves like a monophonic CV-Gate converter, with an additional CC value produced on the secondary output. OUT 1: Note CV OUT 2: Modulation wheel or breath controller CC (01 or 02) GATE 1: Gate GATE 2: Gate","title":"Channel 7/8: Note conversion + CC"},{"location":"cvpal/manual/#channel-10-drums","text":"This mode is enabled when a MIDI message is received on channel 10. CV Outputs 1 and 2 are respectively triggered by the MIDI notes 36 (kick drum on the GM drum map) and 38 (snare drum on the GM drum map). Gate outputs 1 and 2 are triggered by the MIDI note 40 (snare drum 2) and 46 (closed high-hat). OUT 1: BD (note 36) trigger OUT 2: SD (note 38) trigger GATE 1: SD2 (note 40) trigger GATE 2: CHH (note 46) trigger","title":"Channel 10: Drums"},{"location":"cvpal/manual/#channel-11-drums-gates","text":"Same as Channel 10, but with gates instead of triggers.","title":"Channel 11: Drums gates"},{"location":"cvpal/manual/#channel-12-13-14-monophonic-mode-with-clockreset-output","text":"In these modes, the CVpal behaves like a classic monophonic CV-Gate converter implementing most recent note priority, but also outputs triggers for synchronizing modular sequencers. A clock (with variable resolution) is sent to GATE 1; and a reset (corresponding to the MIDI 'start' message) is sent to GATE 2. OUT 1: Note CV OUT 2: Note Gate GATE 1: Clock trigger GATE 2: Reset trigger The resolution of the clock trigger depends on the MIDI channel used: 24 ppqn for channel 12; 8 ppqn for channel 13; 4 ppqn for channel 14.","title":"Channel 12, 13, 14: Monophonic mode with clock/reset output"},{"location":"cvpal/manual/#calibration","text":"Note: Yamaha and Roland have defined different schemes for numbering octaves \u2013 and since then nobody ever agreed on this! If, in the following procedures, everything appears to be off by one octave (the manual says something will happen with C4 but it happens with C3) or if measurements are off by +/-1V, don't panic \u2013 it is simply that your controller/DAW uses a different scheme for numbering octaves. To ensure accurate note conversion, the CVpal needs to be manually calibrated. A digital multimeter with a precision of at least 3 digits is recommended for this task; but the calibration can also be done with an already calibrated synth or VCO module. OUT 1 is calibrated by sending note messages to channel 15. OUT 2 is calibrated by sending note messages to channel 16. Play a F#2 note (MIDI note 42). Check that the output voltage is 0.500V (or that the pitch of the emitted note on the synth/VCO is correct). If this is not the case, use F1 and G1 to make adjustments. Play a C3 note (MIDI note 48). The target voltage is 1.000V. Use B1 or C#2 to make adjustments. Play a F#3 note (MIDI note 54). The target voltage is 1.500V. Use F2 or G2 to make adjustments. Play a C4 note (MIDI note 60). The target voltage is 2.000V. Use B3 or C#3 to make adjustments. Play a F#4 note (MIDI note 66). The target voltage is 2.500V. Use F3 or G3 to make adjustments. Play a C5 note (MIDI note 72). The target voltage is 3.000V. Use B3 or C#4 to make adjustments. Play a F#5 note (MIDI note 78). The target voltage is 3.500V. Use F4 or G4 to make adjustments. Play a C6 note (MIDI note 84). The target voltage is 4.000V. Use B4 or C#5 to make adjustments. The following chart summarizes this: Technical note: to get maximum accuracy, it is recommended to temporarily connect a 100k resistor between the output being calibrated and ground. By doing so, the output protection resistor is taken into account. Not doing so might cause tuning errors of up to 10 cts at either ends of the scale.","title":"Calibration"},{"location":"cvpal/specs/","text":"Compatibility The CVpal is class-compliant but uses an unusual USB setting (1ms poll-rate in low-speed mode) not well supported on Windows. Optimal latency is obtained with OS X >= 10.6.3 ; iOS ; or Linux >= 2.6. On other systems, the CVpal will work but messages will be delayed by up to 8ms. Conversion modes Monophonic with velocity Monophonic with velocity and square oscillator Dual monophonic Duophonic CC conversion Monophonic with CC Quad triggers Quad gates Monophonic with MIDI clock output Technical characteristics Range and standards: CV outputs: 0 to 4V, V/Oct (4 octaves). Gate outputs: Positive V-trig, ON = 5V ; OFF = 0V. Performance: Resolution: < 2mV. 8 points calibration curve for non-linearity compensation. Temperature dependency: +/- 2 cents within the 10\u00b0 C to 80\u00b0 C range. Output impedance: 220\u03a9 (rule of thumb: 2 cents drop per connection to a CV input). Power supply: USB-bus powered, current draw < 20mA.","title":"Specifications"},{"location":"cvpal/specs/#compatibility","text":"The CVpal is class-compliant but uses an unusual USB setting (1ms poll-rate in low-speed mode) not well supported on Windows. Optimal latency is obtained with OS X >= 10.6.3 ; iOS ; or Linux >= 2.6. On other systems, the CVpal will work but messages will be delayed by up to 8ms.","title":"Compatibility"},{"location":"cvpal/specs/#conversion-modes","text":"Monophonic with velocity Monophonic with velocity and square oscillator Dual monophonic Duophonic CC conversion Monophonic with CC Quad triggers Quad gates Monophonic with MIDI clock output","title":"Conversion modes"},{"location":"cvpal/specs/#technical-characteristics","text":"Range and standards: CV outputs: 0 to 4V, V/Oct (4 octaves). Gate outputs: Positive V-trig, ON = 5V ; OFF = 0V. Performance: Resolution: < 2mV. 8 points calibration curve for non-linearity compensation. Temperature dependency: +/- 2 cents within the 10\u00b0 C to 80\u00b0 C range. Output impedance: 220\u03a9 (rule of thumb: 2 cents drop per connection to a CV input). Power supply: USB-bus powered, current draw < 20mA.","title":"Technical characteristics"},{"location":"cyclic/","text":"CycliC is a novel step sequencer concept, with six independent subsequences that cycle through a 32-note array, developed as a collaboration between Defective Records Software and Mutable Instruments. 32 steps array, with per-step note, gate length, velocity, and two CC values 6 channels, each of them traversing a subset of the 32 steps - with offset/length/stride control internal or MIDI clock MIDI or VST plugin output (up to 3 plugins) MIDI CC control of almost all parameters, including easy to use MIDI learn feature 20 presets, controllable by mouse or MIDI program change, can be saved to disk event randomization (note value, location, velocity, CC values) note constraint to user selectable scale adjustable GUI size Download a demo version and buy it here .","title":"Cyclic"},{"location":"midipal/build/","text":"The MIDIpal board features: A regulated 3.3V power supply, taking power from either a DC wall wart or a 9V battery. An ATMega328p clocked by an external 20 MHz quartz. A MIDI output and input, with opto-isolation. An 8x1 LCD module, 2 LEDs and a clickable encoder. A reset button and a 2x3 ISP connector used during firmware development. Schematics and PCB Here is an image of the board: Note that all the SMD parts are on the top side of the board, while all the through-hole connectors are on the bottom of the board. You can find the Eagle files for this board in the midipal/hardware_design/pcb directory of the source code hosted on github . The schematics in PDF format are here . Bill of materials Bill of materials Assembly instructions SMT soldering in short Get a flux pen and some solder wick Get some thin solder, at most 0.5mm. Digikey #82-117-ND has been reported to be very well suited for this job! Clean your iron's tip! Watch the best video tutorial ever . Sissy method for soldering the TQFP ATMega, aka \"tip-pin-pad-solder rendez-vous\": Apply solder on a pad in a corner Heat the pad and move the chip in until it is correctly aligned Are you sure the chip is correctly aligned? Really? Apply flux abundantly on the 4 sides of the chip Touch pin 1 with the tip of the soldering iron Hear the crackling sound of the barbecued flux Touch the pin and the tip of the soldering iron with the tip of your solder Repeat for each pin Things go wrong because: The tip of your iron was dirty You have not applied enough flux You have not aligned the chip in such a way that the pins are sitting in the middle of their pads When soldering resistors, capacitors, etc. start by a pad that is not grounded. Heat it, apply solder, move the part in with the tweezers. Solder the other side. Starting with a grounded pad is more difficult because of heat being dissipated on the ground plane. Step 1: ATMega328p This part is the most difficult, so start by this. After having soldered it, check that there is no short between adjacent pins. Use solder wick to remove bridges -- even if you need to rework it 4 or 5 times it cannot go wrong (here is a photo of a fully working board the MCU solder job of which had been redone 8 or 9 times). Step 2: 4x 100nF caps Step 3: 1x 10k resistor, 2x 22pF caps Step 4: 1x 20 MHz quartz, 1x switch with gull wings Step 5: 2x 220R resistors, 1x 4.7k resistor, 1x 4N4148 There is a stripe marking the cathode of the diode. It goes \"up\". See the little diagram silkscreened above D1. Step 6: 1x 6N138 Let the solder flow up the pins. Step 7: 3x 100R resistors, 2x LEDs (green and red) Look closely at the LED package. It has green dots on one side. They should go on the same side as the 3 dots pattern silkscreened on the PCB. Which LED is green, which LED is red? The easiest way to check is to use a meter in continuity testing or diode testing mode. This will provide enough current to dimly light them. Step 8: 1x LM1117, 2x 100uF caps, 2x Schottky diodes The Schottky diodes are a bit tricky to solder. Applying solder on a pad and moving in the diode won't work that well. If you can get someone to help you, the best solution will be to have someone firmly hold the diode into place with the tweezers, while you solder one side of the diode. The diodes are polarized , the cathode is identified by a stripe that should be on the same side as the symbol silkscreened on the board. The capacitors are polarized too ; the shape silkscreened on the PCB should match the base of the capacitor. To solder the capacitor, hold the tip of the iron on the tiny \"tail\" on the capacitor's sides. Step 9: 1x SPDT Switch, 1x DC connector, 1x 5k trimmer Step 10: ISP connector At this stage you can connect a DC power source (delivering a voltage between 5V and 9V, and with a current rating above 150mA) and check that you get 3.3V at the pads marked 3.3V . Step 11: MIDI connectors, LCD module, encoder That's it! You can now adjust the contrast of the LCD. If you plan to use the MIDIpal with a 9V battery, you can solder the provided battery clip (black = negative, red = positive). Step 12: Getting started At any time, to select the \"app\" the Midipal will run, hold the encoder down for 2 seconds. Rotate the encoder to select an app, and press it to confirm. For example, you can select the \"Monitor\" app and check that incoming MIDI signals are correctly parsed. Most of the MIDIpal apps work the following way: rotate the encoder to navigate in the list of parameters, press the encoder to select a parameter (the value of the parameter will be enclosed in square brackets), rotate the encoder to modify the value, and press the encoder to confirm. This is a very short overview, experiment or check the manual! Firmware setup This section explains how to flash the firmware of the MIDIpal. Note that kits shipped after April 11th have their MCU already programmed - in this case, this step is optional - but you might still want to read a bit about this topic if you are interested in modifying the MIDIpal code! Option 1: build the code and upload it with avrdude. The firmware code is hosted on github , in the midipal directory. It can be built and sent to the MCU with: make -f midipal/makefile bake\\_all Option 2: install pre-built binaries with avrdude. Download the following files: midipal_flash_golden.hex midipal_eeprom_golden.hex Type the following commands in a terminal/command line: avrdude -B 100 -V -p m328p -c avrispmkII -P usb -e -u -U efuse:w:0xfd:m -U hfuse:w:0xd4:m -U lfuse:w:0xff:m -U lock:w:0x2f:m avrdude -B 1 -V -p m328p -c avrispmkII -P usb -U flash:w:midipal\\_flash\\_golden.hex:i -U eeprom:w:midipal\\_eeprom\\_golden.hex:i -U lock:w:0x2f:m Note that in these commands, you will have to replace: avrdude by the path to your local install of avrdude (for example C:\\WinAVR\\bin\\avrdude on windows). avrispmkII by the name of your ISP programmer. usb by something else if your ISP programmer is not a USB one. Option 3: use Atmel's AVRStudio. Download the following files: midipal_flash_golden.hex midipal_eeprom_golden.hex Launch AVRStudio and select AVR programming in the Tools menu. Select AVRISP mkII , ATMega328p and ISP in the Tool, Device, Interface combo boxes and click on Apply . If you have another programmer or if it is connected to another port, you'll have to change the tool and interface settings. Click on the Memories tab on the left column and select the midipal_flash_golden.hex file in the Flash section. Select midipal_eeprom_golden.hex file in the EEPROM section. Connect the AVR ISP mkII programmer to the ISP connector on the MIDIpal board. Click on the Interface settings tab on the left column and set the ISP clock to 16.1 kHz . Click on Set . Click on the Fuses tab on the left column and set the values to EXTENDED = 0xFD ; HIGH = 0xD4 ; LOW = 0xFF . Click on Program . Click on the Interface settings tab on the left column and set the ISP clock to 4 MHz . Click on Set . Click on the Memories tab on the left column. Click on Program on the Flash section. Click on Program on the EEPROM section. Hacking ADC ports The 8 pads labelled \"Analog 1..8 0..3.3V\" are connected to the ATMega ADC. They accept voltages in the 0..3.3V range (voltages outside of this range will damage the MCU), which can be converted to 8 freely assignable CC by the \"controller\" app on the MIDIpal firmware. Chaining You can easily chain several MIDIpal together to build one monster MIDI multi-FX. Two 4 pins connectors are located on each side of the MIDIpal to ease chaining. The following rules apply: You only need to connect to a battery/DC wall wart the power supply section of one unit in a chain. The other units will be powered by the 3.3V rail of the powered unit. Do not create feedback loops! That is to say, if the IN of unit A is connected to the OUT of unit B, do not connect the OUT of unit A to the IN of unit B. The following image shows how to hook up two units. The areas in yellow and green can be left unpopulated. Notice how the OUT of the left unit is connected to the IN of the right unit, but not the other way round. License The MIDIpal is made available under a cc-by-sa-3.0 license ; and its source code under a GPL3.0 license.","title":"Build instructions"},{"location":"midipal/build/#schematics-and-pcb","text":"Here is an image of the board: Note that all the SMD parts are on the top side of the board, while all the through-hole connectors are on the bottom of the board. You can find the Eagle files for this board in the midipal/hardware_design/pcb directory of the source code hosted on github . The schematics in PDF format are here .","title":"Schematics and PCB"},{"location":"midipal/build/#bill-of-materials","text":"Bill of materials","title":"Bill of materials"},{"location":"midipal/build/#assembly-instructions","text":"","title":"Assembly instructions"},{"location":"midipal/build/#smt-soldering-in-short","text":"Get a flux pen and some solder wick Get some thin solder, at most 0.5mm. Digikey #82-117-ND has been reported to be very well suited for this job! Clean your iron's tip! Watch the best video tutorial ever . Sissy method for soldering the TQFP ATMega, aka \"tip-pin-pad-solder rendez-vous\": Apply solder on a pad in a corner Heat the pad and move the chip in until it is correctly aligned Are you sure the chip is correctly aligned? Really? Apply flux abundantly on the 4 sides of the chip Touch pin 1 with the tip of the soldering iron Hear the crackling sound of the barbecued flux Touch the pin and the tip of the soldering iron with the tip of your solder Repeat for each pin Things go wrong because: The tip of your iron was dirty You have not applied enough flux You have not aligned the chip in such a way that the pins are sitting in the middle of their pads When soldering resistors, capacitors, etc. start by a pad that is not grounded. Heat it, apply solder, move the part in with the tweezers. Solder the other side. Starting with a grounded pad is more difficult because of heat being dissipated on the ground plane.","title":"SMT soldering in short"},{"location":"midipal/build/#step-1-atmega328p","text":"This part is the most difficult, so start by this. After having soldered it, check that there is no short between adjacent pins. Use solder wick to remove bridges -- even if you need to rework it 4 or 5 times it cannot go wrong (here is a photo of a fully working board the MCU solder job of which had been redone 8 or 9 times).","title":"Step 1: ATMega328p"},{"location":"midipal/build/#step-2-4x-100nf-caps","text":"","title":"Step 2: 4x 100nF caps"},{"location":"midipal/build/#step-3-1x-10k-resistor-2x-22pf-caps","text":"","title":"Step 3: 1x 10k resistor, 2x 22pF caps"},{"location":"midipal/build/#step-4-1x-20-mhz-quartz-1x-switch-with-gull-wings","text":"","title":"Step 4: 1x 20 MHz quartz, 1x switch with gull wings"},{"location":"midipal/build/#step-5-2x-220r-resistors-1x-47k-resistor-1x-4n4148","text":"There is a stripe marking the cathode of the diode. It goes \"up\". See the little diagram silkscreened above D1.","title":"Step 5: 2x 220R resistors, 1x 4.7k resistor, 1x 4N4148"},{"location":"midipal/build/#step-6-1x-6n138","text":"Let the solder flow up the pins.","title":"Step 6: 1x 6N138"},{"location":"midipal/build/#step-7-3x-100r-resistors-2x-leds-green-and-red","text":"Look closely at the LED package. It has green dots on one side. They should go on the same side as the 3 dots pattern silkscreened on the PCB. Which LED is green, which LED is red? The easiest way to check is to use a meter in continuity testing or diode testing mode. This will provide enough current to dimly light them.","title":"Step 7: 3x 100R resistors, 2x LEDs (green and red)"},{"location":"midipal/build/#step-8-1x-lm1117-2x-100uf-caps-2x-schottky-diodes","text":"The Schottky diodes are a bit tricky to solder. Applying solder on a pad and moving in the diode won't work that well. If you can get someone to help you, the best solution will be to have someone firmly hold the diode into place with the tweezers, while you solder one side of the diode. The diodes are polarized , the cathode is identified by a stripe that should be on the same side as the symbol silkscreened on the board. The capacitors are polarized too ; the shape silkscreened on the PCB should match the base of the capacitor. To solder the capacitor, hold the tip of the iron on the tiny \"tail\" on the capacitor's sides.","title":"Step 8: 1x LM1117, 2x 100uF caps, 2x Schottky diodes"},{"location":"midipal/build/#step-9-1x-spdt-switch-1x-dc-connector-1x-5k-trimmer","text":"","title":"Step 9: 1x SPDT Switch, 1x DC connector, 1x 5k trimmer"},{"location":"midipal/build/#step-10-isp-connector","text":"At this stage you can connect a DC power source (delivering a voltage between 5V and 9V, and with a current rating above 150mA) and check that you get 3.3V at the pads marked 3.3V .","title":"Step 10: ISP connector"},{"location":"midipal/build/#step-11-midi-connectors-lcd-module-encoder","text":"That's it! You can now adjust the contrast of the LCD. If you plan to use the MIDIpal with a 9V battery, you can solder the provided battery clip (black = negative, red = positive).","title":"Step 11: MIDI connectors, LCD module, encoder"},{"location":"midipal/build/#step-12-getting-started","text":"At any time, to select the \"app\" the Midipal will run, hold the encoder down for 2 seconds. Rotate the encoder to select an app, and press it to confirm. For example, you can select the \"Monitor\" app and check that incoming MIDI signals are correctly parsed. Most of the MIDIpal apps work the following way: rotate the encoder to navigate in the list of parameters, press the encoder to select a parameter (the value of the parameter will be enclosed in square brackets), rotate the encoder to modify the value, and press the encoder to confirm. This is a very short overview, experiment or check the manual!","title":"Step 12: Getting started"},{"location":"midipal/build/#firmware-setup","text":"This section explains how to flash the firmware of the MIDIpal. Note that kits shipped after April 11th have their MCU already programmed - in this case, this step is optional - but you might still want to read a bit about this topic if you are interested in modifying the MIDIpal code!","title":"Firmware setup"},{"location":"midipal/build/#option-1-build-the-code-and-upload-it-with-avrdude","text":"The firmware code is hosted on github , in the midipal directory. It can be built and sent to the MCU with: make -f midipal/makefile bake\\_all","title":"Option 1: build the code and upload it with avrdude."},{"location":"midipal/build/#option-2-install-pre-built-binaries-with-avrdude","text":"Download the following files: midipal_flash_golden.hex midipal_eeprom_golden.hex Type the following commands in a terminal/command line: avrdude -B 100 -V -p m328p -c avrispmkII -P usb -e -u -U efuse:w:0xfd:m -U hfuse:w:0xd4:m -U lfuse:w:0xff:m -U lock:w:0x2f:m avrdude -B 1 -V -p m328p -c avrispmkII -P usb -U flash:w:midipal\\_flash\\_golden.hex:i -U eeprom:w:midipal\\_eeprom\\_golden.hex:i -U lock:w:0x2f:m Note that in these commands, you will have to replace: avrdude by the path to your local install of avrdude (for example C:\\WinAVR\\bin\\avrdude on windows). avrispmkII by the name of your ISP programmer. usb by something else if your ISP programmer is not a USB one.","title":"Option 2: install pre-built binaries with avrdude."},{"location":"midipal/build/#option-3-use-atmels-avrstudio","text":"Download the following files: midipal_flash_golden.hex midipal_eeprom_golden.hex Launch AVRStudio and select AVR programming in the Tools menu. Select AVRISP mkII , ATMega328p and ISP in the Tool, Device, Interface combo boxes and click on Apply . If you have another programmer or if it is connected to another port, you'll have to change the tool and interface settings. Click on the Memories tab on the left column and select the midipal_flash_golden.hex file in the Flash section. Select midipal_eeprom_golden.hex file in the EEPROM section. Connect the AVR ISP mkII programmer to the ISP connector on the MIDIpal board. Click on the Interface settings tab on the left column and set the ISP clock to 16.1 kHz . Click on Set . Click on the Fuses tab on the left column and set the values to EXTENDED = 0xFD ; HIGH = 0xD4 ; LOW = 0xFF . Click on Program . Click on the Interface settings tab on the left column and set the ISP clock to 4 MHz . Click on Set . Click on the Memories tab on the left column. Click on Program on the Flash section. Click on Program on the EEPROM section.","title":"Option 3: use Atmel's AVRStudio."},{"location":"midipal/build/#hacking","text":"","title":"Hacking"},{"location":"midipal/build/#adc-ports","text":"The 8 pads labelled \"Analog 1..8 0..3.3V\" are connected to the ATMega ADC. They accept voltages in the 0..3.3V range (voltages outside of this range will damage the MCU), which can be converted to 8 freely assignable CC by the \"controller\" app on the MIDIpal firmware.","title":"ADC ports"},{"location":"midipal/build/#chaining","text":"You can easily chain several MIDIpal together to build one monster MIDI multi-FX. Two 4 pins connectors are located on each side of the MIDIpal to ease chaining. The following rules apply: You only need to connect to a battery/DC wall wart the power supply section of one unit in a chain. The other units will be powered by the 3.3V rail of the powered unit. Do not create feedback loops! That is to say, if the IN of unit A is connected to the OUT of unit B, do not connect the OUT of unit A to the IN of unit B. The following image shows how to hook up two units. The areas in yellow and green can be left unpopulated. Notice how the OUT of the left unit is connected to the IN of the right unit, but not the other way round.","title":"Chaining"},{"location":"midipal/build/#license","text":"The MIDIpal is made available under a cc-by-sa-3.0 license ; and its source code under a GPL3.0 license.","title":"License"},{"location":"midipal/firmware/","text":"Latest firmware Grab the latest MIDIpal firmware here . Scroll to the bottom of this page for the upgrade procedure. Variants for v1.4 The latest firmware version is v1.4. Monitor Event processing Clock source HD clock source SH-seq Step seq JX-seq Download X X X . X . . Download X X X . . X . Download X X . X X . . Download X X . X . X . Download X . . . . . X List of changes: The Ear Training game app has been deprecated. All versions linked above are built with the Tanpura app instead. The arpeggiator has two new modes: pla ( as played - notes are arpeggiated in the same order as they have been played) and cho ( chord - all notes are played simultaneously, as a chord). The length of the arpeggiator rhythmic pattern can be altered - this allows many new crazy irregular rhythms! The CC LFO app can now send pitch bend messages. Wowowowow. To do so, select CC# 127 - a modulated pitch-bend message will be sent instead of a CC# 127. The clock divider app now has a built-in clock delay function. For example, when the delay is set to 6; the transmission of the MIDI Start message and of the subsequent clock ticks is delayed by 6 clock ticks. This can be used to create interesting time-shifting effects between two drum machines or sequencers. The clock app has an extra setting called con . When enabled, the clock messages continue to be sent even when the transport is stopped. A new app called settings allows some global system settings to be defined, such as 0xFE message handling (let them go or filter them), and more goodies (see below). The MIDIpal can now be edited using CC messages. CC #80 changes the first parameter, CC# 81 the second parameter and so on. The whole CC range (0 to 127) is mapped to the range of each parameter. The remote control channel is defined in the settings app (setting called ccc for cc channel ), and can be of course disabled - when the channel is set to 0. The MIDIpal can now be clocked by note messages on a user-selectable channel: Go to the settings app and select the MIDI channel ( clc for clock channel ) and note ( cln for clock note ) which will be interpreted as a clock message. Select the clock resolution ( div ): by how many ticks each note will move the clock forward. Go back to the application you want to control with note messages (sequencer, arpeggiator...). Select the not clock source. Repeatedly play a note on the selected channel to start and advance the clock. Third party firmware versions Michael Lauter has developed his own version of the MIDIpal arpeggiator and synchlatch apps that support MIDI SPP messages. This allows the MIDIpal to be slaved to some hardware sequencers that make use of this MIDI synchronization technique. Updating the MIDIpal firmware Keep the encoder pressed while you power on the MIDIpal. You'll see the MIDI in and MIDI out LEDs rapidly blink in sequence, and the MIDI in LED will stay on. The MIDIpal is ready to receive the update data, which can be sent as a SysEx (with a 250ms or more delay between packets) or MIDIfile. The MIDI in LED blinks on every received packet, an update containing up to 256 packets. The update takes about 1 minute, and can be restarted in case of accident during the transmission. Upon reception of the last packet, the MIDIpal immediately boots with the new firmware. If you want to use a dedicated SysEx transfer tool rather than a sequencer, we recommend Elektron's C6 tool available for both Windows and OS X, with the following timing settings:","title":"Firmware development"},{"location":"midipal/firmware/#latest-firmware","text":"Grab the latest MIDIpal firmware here . Scroll to the bottom of this page for the upgrade procedure.","title":"Latest firmware"},{"location":"midipal/firmware/#variants-for-v14","text":"The latest firmware version is v1.4. Monitor Event processing Clock source HD clock source SH-seq Step seq JX-seq Download X X X . X . . Download X X X . . X . Download X X . X X . . Download X X . X . X . Download X . . . . . X List of changes: The Ear Training game app has been deprecated. All versions linked above are built with the Tanpura app instead. The arpeggiator has two new modes: pla ( as played - notes are arpeggiated in the same order as they have been played) and cho ( chord - all notes are played simultaneously, as a chord). The length of the arpeggiator rhythmic pattern can be altered - this allows many new crazy irregular rhythms! The CC LFO app can now send pitch bend messages. Wowowowow. To do so, select CC# 127 - a modulated pitch-bend message will be sent instead of a CC# 127. The clock divider app now has a built-in clock delay function. For example, when the delay is set to 6; the transmission of the MIDI Start message and of the subsequent clock ticks is delayed by 6 clock ticks. This can be used to create interesting time-shifting effects between two drum machines or sequencers. The clock app has an extra setting called con . When enabled, the clock messages continue to be sent even when the transport is stopped. A new app called settings allows some global system settings to be defined, such as 0xFE message handling (let them go or filter them), and more goodies (see below). The MIDIpal can now be edited using CC messages. CC #80 changes the first parameter, CC# 81 the second parameter and so on. The whole CC range (0 to 127) is mapped to the range of each parameter. The remote control channel is defined in the settings app (setting called ccc for cc channel ), and can be of course disabled - when the channel is set to 0. The MIDIpal can now be clocked by note messages on a user-selectable channel: Go to the settings app and select the MIDI channel ( clc for clock channel ) and note ( cln for clock note ) which will be interpreted as a clock message. Select the clock resolution ( div ): by how many ticks each note will move the clock forward. Go back to the application you want to control with note messages (sequencer, arpeggiator...). Select the not clock source. Repeatedly play a note on the selected channel to start and advance the clock.","title":"Variants for v1.4"},{"location":"midipal/firmware/#third-party-firmware-versions","text":"Michael Lauter has developed his own version of the MIDIpal arpeggiator and synchlatch apps that support MIDI SPP messages. This allows the MIDIpal to be slaved to some hardware sequencers that make use of this MIDI synchronization technique.","title":"Third party firmware versions"},{"location":"midipal/firmware/#updating-the-midipal-firmware","text":"Keep the encoder pressed while you power on the MIDIpal. You'll see the MIDI in and MIDI out LEDs rapidly blink in sequence, and the MIDI in LED will stay on. The MIDIpal is ready to receive the update data, which can be sent as a SysEx (with a 250ms or more delay between packets) or MIDIfile. The MIDI in LED blinks on every received packet, an update containing up to 256 packets. The update takes about 1 minute, and can be restarted in case of accident during the transmission. Upon reception of the last packet, the MIDIpal immediately boots with the new firmware. If you want to use a dedicated SysEx transfer tool rather than a sequencer, we recommend Elektron's C6 tool available for both Windows and OS X, with the following timing settings:","title":"Updating the MIDIpal firmware"},{"location":"midipal/manual/","text":"The MIDIpal is a powerful MIDI processor - like a multi-effect operating on MIDI data! It features 19 different MIDI \"apps\", ranging from MIDI debugging or routing utilities (monitoring messages, remapping a channel to another one...) to complex compositional or inspirational tools like arpeggiators or pattern generators. Overview Basic setup Connect a MIDI message source, such as a keyboard, control surface or computer interface to the MIDI in port of the MIDIpal. Connect a MIDI message receiver, such as a synth module, expander, or computer interface to the MIDI out port of the MIDIpal. The MIDIpal can be powered by either a 9V battery or a 5V-9V unregulated DC supply, with a minimum current rating of 150mA. Make sure that the connector has a center pin (or tip) positive / outer collar (or sleeve) negative pin polarity. Most universal power supplies allows the polarity to be selected \u2014 the polarity being often represented by a diagram like this: \u2013 (o +. User interface Incoming and outgoing MIDI signals are visualized by the red and green LEDs near the MIDI sockets. The 8 characters LCD display is used to display the name and value of the currently edited parameter. Editing is done with the clickable rotary encoder. Launching apps Each \"feature\" of the MIDIpal can be seen as an independent \"app\". Only one app can be running at a time - that is to say, you cannot run an arpeggiator, a drum sequencer and a MIDI monitor on the same unit! To select the app to use, keep the encoder pressed. The name of the current app is shown on the screen. sequencr Turn the encoder to select an app. Click on the encoder to launch this app. Note that the last three entries in the list are not regular apps: notenuke sends a NoteOff message, for all possible MIDI notes, on all MIDI channels. sysxdump outputs a SysEx backup of all the MIDIpal settings. !reset! resets the unit to its factory settings. Navigation within an app Though there are a few exceptions, most of the apps are operated the following way: Turn the encoder to scroll through the lists of parameters. bpm 123 If you want to change a parameter, click on the encoder. Brackets appear around the parameter value. bpm[123] Turn the encoder to increase or decrease the value. Click again once you are done. bpm 123 The brackets disappear, and your modification is kept in memory, even if the MIDIpal is powered down - no need for a save button! Reverting to factory settings In order to revert the MIDIpal to its factory settings, keep the encoder pressed for 2s to display the app list. Scroll to the end of the list to reach the !reset! item: !reset! Click the encoder. Kaboom! All your settings are lost to the factory defaults. Apps Please note that some of these applications might not be available on your unit. Please refer to this page and to the firmware update section to find out how you can replace the standard MIDIpal firmware with alternate versions containing extra applications. Debugging apps MIDI monitor ( monitor ) This app monitors the incoming MIDI traffic. The MIDI data itself is passed through the MIDI output - so you can insert it through a MIDI link in your home studio to look at what's going on... chn all Press the encoder to select the MIDI channel to monitor. By default, all channels are monitored. The monitor displays the following text for note on/off messages: 1*A#4 3f The first character is the MIDI channel. A star is displayed as the second character whenever an active sensing message is received. A dot is displayed whenever a MIDI clock message is received. The next 3 characters are the MIDI note number is displayed. The last 2 digits are the velocity value in hexadecimal, or '--' for a note off message. The following text indicate a note pressure (aftertouch) message - 'a' for aftertouch, 7 being the highest nibble of the aftertouch value. 1*A#4 a7 The following text indicates a channel pressure (aftertouch) message. 1*aft 7e The following text indicates a CC #30 message. 1 #30 70 The following text indicates a pitch bend message of value 0x3070 on channel 4. 4 b 3070 Here is a list of text messages displayed for less common MIDI messages: notoff : all notes off controller. omnoff : omni mode off controller. omnion : omni mode on controller. monoon : mono mode on controller. polyon : poly mode on controller. sysx.. : beginning of SysEx reception. .sysx. : SysEx reception in progress. ..sysx : end of SysEx reception. start : clock start. cont .: clock continue. stop : clock stop. reset : system reset. BPM meter ( bpm cntr ) This app estimates and displays a BPM value from the MIDI clock. Every incoming MIDI data is forwarded to the MIDI out. Rotate the encoder to switch between the following views: b 120.0 BPM estimated over the past half-second B 120.0 Average BPM (estimated since the clock was started) t 23307 Total number of clock ticks received Click the encoder to reset the BPM estimate and the clock tick counter. MIDI Plumbing apps Channel filter ( chnfiltr ) This app deletes from the MIDI stream all messages associated with one or many MIDI channels. chX off Enables or disable the MIDI channel X. Splitter ( splitter ) This app routes MIDI note messages (note on, note off and aftertouch) from a specific channel to a different MIDI channel depending on their note value. For example, if you have a keyboard emitting on channel 1, you can use the lower half of the keyboard to send notes to a bass synth listening on channel 1, and the upper half of the keyboard to send notes to a multitimbral expander listening on channel 3. inp 5 Input channel. spl B3 Split point. low 7 Notes below the split point, coming from the input channel, will be routed to this channel. upp 7 Notes above the split point, coming from the input channel, will be routed to this channel. Dispatcher ( dispatch ) This app routes MIDI note messages from a single channel to several channels. This allows you to play chords on a rack of monophonic synths, for example. inp 5 Input channel. mod cyc Dispatching method: cyclic ( cyc ). Each new note is cyclically played on the next channel. polyphonic ( pol ). The mapping of notes to channel uses a true voice stealing algorithm. The MIDIpal tries to reuse the same channel for occurrences of the same note ; or the least recently used channel. random ( rnd ). Each new note is routed to a random channel. stacking ( stk ). Each note is sent to all channels at the same time. Perfect for thickening a lead by sending it to several synths, or to several parts of the same multitimbral device. velocity ( vel ). The louder (higher velocity) the note, the higher the MIDI channel it is sent to. out 4 First output channel. num 3 Number of output channels. For example, if out = 4 and num = 3, the notes will be dispatched to channels 4, 5 and 6. Channel merger ( chnmergr ) This app merges data from several channels into a single one. inp 5 First input channel. num 3 Number of channels to merge. For example, if inp = 5 and num = 3, channels 5, 6 and 7 will be merged. out 2 Output channel. Clock divider ( divider ) This app forwards every incoming MIDI message, but it only pick every Nth clock message. This has the effect of slowing down the MIDI clock by a ratio of N. div 1 Ratio by which the MIDI clock is divided. Sync latch ( syncltch ) This feature, inspired by the Mungo Sync allows a slave device to be synchronized and started/stopped in sync with a master device playing a loop. Consider the following situation: you have a drum machine playing a steady 2-bar loop, in 4/4, and generating a clock signal for a slave MIDI sequencer. You need to reload a pattern on the sequencer. You stop the sequencer, load the pattern, and then you need to hit the play button on the sequencer at the exact right moment so that it starts spot on the first beat of the 2-bar drum loop. Tricky isn't it? This is where the MIDIpal can be used. Insert it between the drum machine and the sequencer. Configure the duration/time signature of the loop (Here: 8 quarter notes). The MIDIpal will keep counting beats. When you press the MIDIpal encoder, it'll wait for the beginning of the loop and then send a start message to the MIDI slave. When you press again the MIDIpal encoder, it'll wait for the end of the loop and then send a stop message to the MIDI slave. num 4 den 1/4 Numerator and denominator of the time signature of the loop. 03:00 . Beat counter. This shows: the MIDIpal counting beats. whether the slave is playing or stopped (a dot is shown when the slave is stopped ; a \">\" sign is shown when the slave is running). whether the MIDIpal is ready to send a start/stop message to the slave. When you press the encoder, the beat count is shown in brackets, to indicate that the MIDIpal is waiting for the beginning of the next bar to send the Start message (or the end of the bar to send the Stop message). For example: [03:20]. Indicates that the slave is currently stopped, and that the MIDIpal is waiting for the beginning of the next bar to send a Start message. [01:10]> Indicates that the slave is currently running, and that the MIDIpal is waiting for the end of the bar to send a Stop message. Controller and master apps. Clock source ( clock ) This app acts as a clock source - regularly sending MIDI clock ( 0xf8 ) messages. Every incoming MIDI data, at the exception of MIDI clock messages, are forwarded to the MIDI out. The settings are the following: run off Starts or stops the clock. bpm 120 Tempo of the internal clock, in beats per minutes. grv swg Type of shuffle/jitter to apply to the clock: swg : swing shf : shuffle psh : push effect, anticipating the beats lag : lag effect, delaying the beats hum : humanization mnk : monkeyzation amt 80 Amount of shuffle/jitter to apply to the clock. tap 120 While on this screen, you can \"click\" on the encoder to tap a tempo. High-resolution clock source ( clock ) This variant of the clock app acts as a clock source with a finer resolution of 0.1 BPM. Both variants perform equally well in terms of jitter/accuracy - this version just has a finer range of adjustment. The settings are the following: run off Starts or stops the clock. 120.0 Tempo of the internal clock, in beats per minutes. CC and NRPN knob ( cc knob ) This app turns the MIDIpal into a MIDI controller - sending CC or NRPN messages. All incoming messages are sent to the output -- that is to say, the generated CC/NRPN messages are merged into the MIDI stream. The settings are the following: val 60 CC or NRPN value to send. chn 7 Channel on which the CC message has to be sent. typ cc\\# Type of message to send: CC or NRPN. num 7 Number of the CC or NRPN message to send. For example, set this to 7 to send a volume message. min 0 max 80 Value range. This restricts the range of the val setting on the first page. Controller ( contrllr ) This app is only useful if you dare opening your MIDIpal. On the circuit board, you will find 8 pads labelled Analog 1..8 to which you can connect any circuit (including a simple potentiometer voltage divider) outputting a voltage in the 0-3.3V range . These are connected to the analog to digital converter of the MIDIpal brain. Voltage changes on these inputs will be translated into CC messages: a voltage of 0V yields a CC value of 0 ; a voltage of 3.3V yields a CC value of 127. Note that by default, these pads are floating, so they will receive random values! And beware: values above 3.3V are likely to destroy your MIDIpal . The following settings are available: chn 8 Channel on which the CC messages will be sent. ccN 7 CC# associated with the Nth input. Inspiration/composition apps Drum pattern generator ( drums ) This app generates 4-part rhythmic patterns on a selected channel (preferably 10!). You can use a 49 keys keyboard (or larger) to start, stop and mutate the patterns. The first octave on a 61 keys keyboard (C2 to B2) controls the first part. The second octave (C3 to B3) controls the second part. And so on. Two types of rhythmic patterns are available: Preset patterns : Each key within an octave will trigger and loop a different 1-bar pattern. C mutes the part. Euclidean patterns : Pressing a key in an octave indicates how many notes should be played within the span of a bar (C is 0, C# is 1, D is 2, D# is 4, then 5, 6, 8, 10, 12, 14, 16). Pressing two keys indicate how many notes should be played within the span of a sequence + the duration of a sequence. For example, if you press D and E, a 5 steps long pattern, containing 2 evenly spaced notes will be played. You can safely ignore these instructions and just play keys and clap your hands. The following settings are available: mod ptn Switch between the preset patterns and the euclidean patterns modes. clk int Select an internal or external clock source. When using an external clock source, start, clock and stop MIDI messages must be sent. bpm 120 Tempo of the internal clock, in beats per minutes. grv swg Type of shuffle/jitter to apply to the clock. amt 80 Amount of shuffle/jitter to apply to the clock. chn 10 Channel on which the notes are sent. This is also the channel to which pattern triggers must be sent. pt1 C1 pt2 D1 pt3 A#1 pt4 C#1 MIDI Note to send when a note is triggered on parts 1, 2, 3, 4. Notes are sent with a velocity of 100, and have a duration of one sixteenth note. Randomizer ( randomiz ) This app randomizes the note and velocity values of the incoming MIDI data. It can even send a random CC every time a new note is triggered! chn 8 Channel on which the randomization effect is applied. amt 99 How often randomization is applied. When this value is set to 127 (maximum value), every note is randomized. When this value is set to 63 (medium value), there is a 50/50% probability that a note will be randomized. When this value is set to 0, no randomization is applied. not. 1 Amount of random modulation applied to the note number, in semitones. For example, if this parameter is set to 12, the emitted note is within /- 12 semitones = /- 1 octave of the original note. vel 70 Amount of random modulation applied to the velocity value. cc1 70 cc2 70 Amount of random modulation applied to the first and second CC. Set both to 0 if you don't want to send a random CC with each note. #c1 7 #c2 7 CC Numbers for the first and second random CC sources. Chord memory ( chordmem ) This app memorizes a chord and lets you play transpositions of it. To record a chord, click the encoder, and play a chord. Click the encoder again and that's it maestro! In recording mode, you can also select the affected channel. Arpeggiator ( arpeggio ) clk int Select an internal or external clock source. When using an external clock source, start, clock and stop MIDI messages must be sent. bpm 120 Tempo of the internal clock, in beats per minutes. grv swg Type of shuffle/jitter to apply to the clock. amt 80 Amount of shuffle/jitter to apply to the clock. chn 1 Channel to arpeggiate. Chords sent on this channels are filtered out and played as arpeggios. dir up Arpeggio direction. The available directions are up, down, up&down, or random. oct 1 Arpeggio range, in octaves. ptn 10 Arpeggio rhythmic pattern. 1: o o o o o o o o 2: o o ooooo o oooo 3: o o oo oo o oo o 4: o o o ooo o o oo 5: o o o o oo o o o 6: o o o o o oo o 7: o o o oo o o o 8: o o o o 9: o o o o o o 10: o o o o o o 11: o o o o o o 12: o oo o o o oo 13: oo o oo oo o oo 14: oo oo o oo oo o 15: ooo ooo ooo ooo 16: ooo oo oo oo oo 17: ooo o o ooo o o 18: oooo oo oooo oo 19: ooooo oo oo ooo 20: o o o o o o 21: o oooooo oo 22: o o o oo div /16 Duration of an arpeggio step (the duration of a 'o' or blank in the previous chart). The default is /16 -- a 16th note per step. dur /16 Duration of the notes played by the arpeggiator. The default is /32, a 32th note. lat on Latch mode. When set to on , releasing the keyboard will not stop the arpeggiator. To stop the arpeggiator, set this latch setting to off . Please note that the sustain pedal of your controller can be used similarity to hold notes. Tempo-synchronized delay/strummer ( delay ) This app adds echoes to incoming note on and note off messages. The echo duration is specified as a fraction of the duration of a bar - thus, this effect can be musically synchronized to a tempo clock (be it internal or external). clk int Select an internal or external clock source. When using an external clock source, start, clock and stop MIDI messages must be sent. bpm 120 Tempo of the internal clock, in beats per minutes. grv swg Type of shuffle/jitter to apply to the clock. amt 80 Amount of shuffle/jitter to apply to the clock. chn 1 Channel on which the echo effect is applied. del 1/4 Delay duration, expressed as a fraction of a bar. For example, when this is set to 1/4, the duration between echoes is equal to the duration of a quarter note. rep 8 Number of echoes to play. Note that when a complex sequence is played with many overlapping echoes, the internal scheduler buffer can overflow. In this case, a '!' symbol briefly appears on the LCD display. Keep in mind that each echo is going to use a polyphony voice, so it is not a good idea to play MIDI echoes on a device with a limited polyphony. vel 16 Velocity dampening. When this value is low, the echoes have a small and rapidly decreasing velocity. When this value is high (the maximum being 16), all the echoes are played with the same velocity as the original note. trs 0 Number of semitones by which each echo must be transposed. dpl 32 Pseudo-doppler effect: Increases (when set to a positive value) or decreases (when set to a negative value) the delay between the notes as they echo. Scale and harmony processor ( scale ) This app can transpose incoming note messages, and \"quantize\" them to the nearest note in one of the 25 preset scales. It can also harmonizes the incoming note at a fixed interval and/or through algorithmic modification of the played melody. chn 1 Channel on which the scale / transposition / harmony modifications have to be applied. roo C Root note of the target scale. scl chr Target scale. All notes outside of this scale are \"quantized\" to their nearest neighbor in the scale. For example, if a C major scale is selected, and if you play a chromatic scale (C, C#, D, D#, E...), what will be heard will be C, C, D, D, E, F, F, G, G, A, A, B. The available scales are: chr : chromatic scale (no quantization). ion : ionian mode (major scale). dor : dorian mode (russian minor scale). phr : phrygian mode. lyd : lydian mode. mix : mixolydian mode. aeo : aeolian mode (minor scale). loc : locrian mode. bmj : major blues scale. bmn : major blues scale. pmj : pentatonic major scale. pmn : pentatonic minor scale. bhr : raga Bhairav. shr : raga Shri. rup : raga Rupavati. tod : raga Todi. rag : raga Rageshri. kaa : raga Kaafi. meg : raga Meg. mlk : raga Malkauns. dpk : raga Deepak. flk : Folkish scale. jap : Japanese scale. gam : Gamelan scale. whl : Whole tones. trs 0 Transposition to apply to the incoming notes. voi 0 When set to a non-zero value, a parallel harmony N semitones apart from the incoming melody is played. For example, when set to -24, the incoming notes are doubled 2 octaves below. Note that the generated notes are also subject to scale quantization. hrm off Generates an additional, mostly random, harmonic line on top of the incoming melody. Several algorithms are available to generate the harmony: mir : mirrors the intervals played on the incoming melody. If you play an ascending scale, a descending scale will be added. alt : alternates between following what you play, and the mirror mode. trk : tracks the interval you play, plus or minus a few semitones. For example, if you play a fifth, a major third, and an octave, the harmonized line might play a fourth, a minor third, then an octave. random : plays a random note within +/- 1 fifth of the note you played. Obviously, all those random modifications are likely to generate annoying junk unless you select a scale. In which case, it will still sound random, but of the \"Free-Jazz\" flavor of random. Step sequencer ( sequencr ) This app is a step sequencer which can generate note messages, CCs, or a combination of both, on up to 32 steps. The following settings are available for each step: Note (represented on the screen by a note icon). Note duration (represented on the screen by a pulse icon). Note velocity (represented on the screen by a triangle icon). Set the velocity to 0 to mark a step as being a rest. CC value (represented by a knob icon). Since navigating between the 32 steps x 4 settings = 128 pages can be tedious, you can \"simplify\" the sequencer operation by: Muting the notes track. In this case, the sequencer only sends CC - and works more like a programmable MIDI LFO. Muting the note duration track. In this case, a default note duration of 1 step will be used for all the generated notes. Muting the velocity track. In this case, a default velocity of 100 is used for each step. Muting the CC track. In this case, the sequencer only sends note information. The muting/unmuting of those track can be used for creative effects -- for example, you can temporarily mute the velocity track of a synth sequence to make it sound louder and more mechanical. The sequencer has many settings pages, described in this section. run off Start or stop the sequencer, when it is synchronized to the internal clock -- When the sequencer is synchronized to an external MIDI clock, a proper start/stop MIDI message must be sent for the sequence to start. You can also start the sequencer by playing a MIDI note, and stop it by replaying the same note. clk int Select an internal or external clock source. When using an external clock source, start, clock and stop MIDI messages must be sent. bpm 120 Tempo of the internal clock, in beats per minutes. grv swg Type of shuffle/jitter to apply to the clock. amt 80 Amount of shuffle/jitter to apply to the clock. div /16 Duration of a step, in a fraction of a bar. The most common setting (TB303-like) is one sixteenth note (/16) per step. chn 1 MIDI channel on which the sequenced events will be sent. cc# 7 CC number of the messages sequenced on the CC track. not on Whether the sequencer sends note messages. dur on Whether the note duration track is active. When this track is disabled, all notes played by the sequencer have a duration of 1 step. vel on Whether the velocity track is active. When this track is disabled, a note is played on every step, with a velocity of 100. cc on Whether the CC track is active. stp 8 Number of steps a sequence is made of. 01N C3 Note for step 1. 01D /96 Duration of the note played at step 1 - here, 1 MIDI clock tick. 01V 14 Velocity for step 1. The actual MIDI velocity value sent is 8 times the displayed value. For example, 15 corresponds to the velocity value 120. 01C 63 Value of the CC sent at step 1. Some nice things about the sequencer: While a sequence is playing, you can transpose it by playing a note on the keyboard. The transposition is relative to C3 if the sequence was started from the menu or from an external MIDI clock ; or relative to the pressed key when the sequence was started from the keyboard. While the MIDIpal is in editing mode, on a note step (in other words, when the screen is displaying something like this, pressing a key on the keyboard does not transpose or start the sequence. Instead, it records the played note at the current step. 01N[ C3] SH-101 style Sequencer ( sequencr ) This variant of the sequencer app provides a very simple way of recording sequences from a keyboard and playing them back with transposition. To record a sequence, turn the encoder until the display shows: rec off Click the encoder to enable recording. The display shows the number of the current step (here, 0): . 0|rest Every note played from the MIDI in is added to the sequence. To insert a rest (blank step), click the encoder. To insert a tie (extends the duration of the previously input note into this step), turn the encoder to select \"tie\" and click. To insert an accent, move the modulation wheel up before playing a note - this note will be accented. To insert a slide between two notes, wiggle the pitch bend lever (the actual position does not matter) between the two notes. To leave the recording mode, turn the encoder to select \"exit\" and click. There are different ways of starting the play-back of the recorded sequence: Turn the encoder until the display shows the \"run\" option and click. Play a note from the MIDI keyboard connected to the MIDIpal - you can transpose the sequence by playing a different note. The sequence stops if you move back to the original note used to start the sequence. If the MIDIpal is configured to receive an external MIDI clock, send a MIDI start message. The other settings available are: clk int Select an internal or external clock source. When using an external clock source, start, clock and stop MIDI messages must be sent. bpm 120 Tempo of the internal clock, in beats per minutes. grv swg Type of shuffle/jitter to apply to the clock. amt 80 Amount of shuffle/jitter to apply to the clock. div /16 Duration of a step, in a fraction of a bar. The most common setting is one sixteenth note (/16) per step. chn 1 MIDI channel on which the sequenced events will be sent, and from which events will be recorded. JX-3P style Sequencer ( polyseq ) This sequencer app inspired by JX-3P sequencer allows layer by layer recording of polyphonic sequences. Think of it as a polyphonic version of the SH-101 style sequencer. To clear the sequence and record a first layer, turn the encoder until the display shows: rec off Click the encoder to enable recording. The display shows the number of the current step (here, 0): . 0|rest Every note played from the MIDI in is added to the sequence. To insert a rest (blank step), click the encoder. To insert a tie (extends the duration of the previously input note into this step), turn the encoder to select \"tie\" and click. To leave the recording mode, turn the encoder to select \"exit\" and click. To record a new layer above the existing sequence (overdub mode), turn the encoder until the display shows: dub off Click the encoder to enable overdubbing. From there, you can record notes/ties/rests just like in the record mode. Note that once you reach the end of the sequence, the step counter goes back to 0 and you can record a new layer above the previous one. There are different ways of starting the play-back of the recorded sequence: Turn the encoder until the display shows the \"run\" option and click. Play a note from the MIDI keyboard connected to the MIDIpal - you can transpose the sequence by playing a different note. The sequence stops if you move back to the original note used to start the sequence. If the MIDIpal is configured to receive an external MIDI clock, send a MIDI start message. The other settings available are: clk int Select an internal or external clock source. When using an external clock source, start, clock and stop MIDI messages must be sent. bpm 120 Tempo of the internal clock, in beats per minutes. grv swg Type of shuffle/jitter to apply to the clock. amt 80 Amount of shuffle/jitter to apply to the clock. div /16 Duration of a step, in a fraction of a bar. The most common setting is one sixteenth note (/16) per step. chn 1 MIDI channel on which the sequenced events will be sent, and from which events will be recorded. LFO ( lfo ) This app generates slowly evolving controllers for up to 4 individual CC. Note that there are a few fundamental differences between what this app does and what an LFO on a synth traditionally does: The stream of CC is generated at a slow speed, typically 50 samples per second. Instead of controlling the LFO frequency in Hz, you control here the duration of a cycle expressed as a musical duration relative to a tempo. run off Start or stop the LFOs, when it is synchronized to the internal clock -- When the LFO is synchronized to an external MIDI clock, a proper start/stop MIDI message must be sent for the LFOs to start. clk int Select an internal or external clock source. When using an external clock source, start, clock and stop MIDI messages must be sent. bpm 120 Tempo of the internal clock, in beats per minutes. grv swg Type of shuffle/jitter to apply to the clock. amt 80 Amount of shuffle/jitter to apply to the clock. res /96 Resolution of the LFO clock. Selecting a high resolution allows for faster modulations and less stepping, but some devices might not like the very dense MIDI streams this generates. Selecting a low resolution might create \"stepping\" effects. chn 1 MIDI channel on which the CC messages will be sent. ccN 7 CC number sent by the Nth LFO. amN 63 Modulation amount of the Nth LFO. A negative amount inverses the polarity of the LFO waveform. ceN 63 Center value of the Nth LFO. For example, if the modulation amount is 40 and the center value 70, the LFO will oscillate between 70 - 40 = 30 and 70 + 40 = 110. wfN tri Waveform of the Nth LFO. The following waveforms are available: tri : triangle sqr : square rmp : ascending ramp. Use a negative modulation amount to get a descending ramp. sin : sine wave si2 : first and second sine harmonics si3 : first and third sine harmonics si5 : first and fifth sine harmonics gg1 : gurgle gg2 : double gurgle bt1 : bat (folded triangle) 1 bt2 : bar (folded triangle) 2 sp1 : spike sp2 : bipolar spike lp1 : smoothed ramp lp2 : smoothed square rs1 : ramp with overshoot rs2 : square with overshoot s&h : (random) sample&hold A large fraction of those waveforms has been approved by the International Organization for Dubstep Standardization. rtN 1/8 Period of the Nth LFO. For example, if this is set to 1/4, the LFO will complete a whole cycle every quarter note (beat). syN fre Sync mode of the Nth LFO. The synchronization modes are: fre : free running. The LFO oscillates independently of any note message, and its phase is never reset. not : note synchronization. The LFO phase is reset to 0 every time a note on message is received. chd : chord synchronization. The LFO phase is reset to 0 every time a new \"chord\" is received. In other words, as long as a note is held, playing new notes will not reset the LFO phase. You need to release all keys and press a new key to reset the LFO phase. Miscellaneous apps Tanpura pattern generator ( tanpura ) This app generates the repetitive note patterns traditionally played on the tanpura to accompany north indian classical music. The settings are the following: run off Starts/stops playback. clk int Select an internal or external clock source. When using an external clock source, start, clock and stop MIDI messages must be sent. bpm 120 Tempo of the internal clock, in beats per minutes. grv swg Type of shuffle/jitter to apply to the clock. amt 80 Amount of shuffle/jitter to apply to the clock. res 1/4 Relationship between the tempo grid (BPM) and the notes. The default is 1/4. 1/8 and 1/16 can be used for double and quadruple time. chn 1 MIDI channel on which the note messages will be sent. sa C4 Root note (sa) of the pattern. mod pa Interval highlighted in the pattern. Pa = fifth, ma = fourth, ni = 7th, sa = only octave. cyc 5 This setting indicates from which note the pattern starts. For example, considering the pattern: sa . . . . pa Sa Sa sa. 0 will start the pattern at sa ; 1, 2, 3, 4 will start the pattern by a silence ; 5 will start the pattern at pa ; 6 and 7 will start the pattern at Sa. General purpose event processor ( user prg ) This app applies one of 4 user-defined event filtering / remapping pipelines, each of them consisting of up to 4 filtering / remapping rules. It's like piping stuff on a unix shell, with note messages and transpositions instead of grep and awk! There is only one setting - the active program. prg 1 To edit a program: Select the program number you want to edit on the MIDIpal. Go to this webpage . Configure the filtering rules. Click on \"Download .syx\" to retrieve a .syx file. Play the .syx file into the MIDIpal to install the program at the active location. And now, a few explanations about the filtering rules! Creating custom filtering rules Each program contains up to 4 \"filters\". Use the checkboxes to activate / deactivate a filter. The first line of the table specifies which events the filter operates on: The Channel column specifies the affected channel(s). The Event type column specifies the affected MIDI event type(s). The Data A and Data B columns specify value range for the two bytes of information contained in MIDI messages. You can use this, for example, to restrict an effect or processing to a certain range of notes (value A) or velocity (value B). The second line of the table specifies some transformations to apply on the matching event: Transform : the original event is modified and sent to the MIDI out. Pass and transform : both the original event and its modified version are sent to the MIDI out. You can use it to automatically \"clone\" a note to another channel. CCize : a control change (CC) message is formed with the data of the incoming event, and sent to the MIDI out. The original message is lost. This can be used to translate pitch bend or note messages into CC. Pass and CCize : a control change (CC) message is formed with the data of the incoming event, and sent to the MIDI out. The original message is also sent. This can be used, for example to send a new CC (maybe a random one?) every time a note is pressed. Filter out : the original event is removed from the MIDI stream. The next option list shows what to do with the MIDI channel of the incoming event. By default, Shift by: 0 does nothing. You can specify another value to shift the channel number by the specified amount (if Shift by: 4 is used, Channel 1 becomes channel 5, channel 2 becomes channel 6 etc.). Reassign to overwrite the MIDI channel of the original message to the specified value. Finally, operations can be applied to the MIDI message data: Add/Subtract/Invert/Set to are self-explanatory. Map to range changes the dynamic range of a parameter -- you can use this to alter the velocity response of a keyboard or drum sensor. Set to random replaces the value by a number picked within the specified interval. Add random adds a random value (drawn from the specified interval). When Preserve zero is checked, no matter which transformation is specified, a value of 0 is never modified. This is particularly useful when dealing with synths sending Note On with a velocity of 0 instead of Note Off. You don't want those to be affected by your velocity randomizer don't you? When Binary wrapping is checked, weird things may happen... For example, what if you use Add: 12 to transpose a note one octave above, and then you play the last key on your keyboard? Normally, nothing will happen -- the note won't be transposed at all. With Binary wrapping checked, it'll wrap around and a very low note will be played! When Swap source is checked, the second byte of the MIDI message (velocity, note) is put in place of the first. Here are some examples: Map all notes below C4 (Midi note 60) to channel 2: Map CC 07 (volume) to CC 08 (pan): Randomize note velocities: Remove program changes on all channels except channel 1: Send a random modwheel value at each new note: To retrieve the rules contained in a .syx file, go to this page Updating the MIDIpal firmware To find out which firmware version the MIDIpal is running, hold the encoder and jump to the app selection menu, then scroll to the end of the list. On the first release of the firmware (v1.1), the last entry is the system reset command. On more recent versions, starting from v1.2, the firmware revision number is displayed at the end of the list. This section describes how to update the operating system and apps of the MIDIpal (firmware) . The operations described here are not required for sending to the MIDIpal data such as memory backups, or custom programs - the MIDIpal can receive such data while being powered on normally. Keep the encoder pressed while you power on the MIDIpal. You'll see the MIDI in and MIDI out LEDs rapidly blink in sequence, and the MIDI in LED will stay on. The MIDIpal is ready to receive the update data, which can be sent as a SysEx (with a 250ms or more delay between packets) or MIDIfile. The MIDI in LED blinks on every received packet, an update containing up to 256 packets. The update takes about 1 minute, and can be restarted in case of accident during the transmission. Upon reception of the last packet, the MIDIpal immediately boots with the new firmware. If you want to use a dedicated SysEx transfer tool rather than a sequencer, we recommend Elektron's C6 tool available for both Windows and OS X, with the following timing settings: SysEx data format The MIDIpal can receive and transmit settings in system exclusive format. The messages all share the same format: 0xf0 (SysEx) 0x00 0x21 0x02 (Mutable Instruments Manufaturer id) 0x00 0x03 (Product ID for MIDIpal) Command Argument Payload Checksum 0xf7 (End of SysEx) Command indicates what the receiver should do with the data in the payload block, and argument is a byte that might contain an additional piece of information about what to do with the data. Payload is a sequence of bytes in nibblized form. For example, the sequence 0x80 0x56 0x13 is transmitted as 0x08 0x00 0x05 0x06 0x01 0x03 . Checksum is equal to the nibblized-sum, modulo 256, of the payload bytes. In the example above, the checksum is equal to 0x80 + 0x56 + 0x13 = 0xe9 and is transmitted as 0x0e 0x09 . Settings data block transfer To transmit a block of data to the MIDIpal, command must be equal to 0x01 and argument is the size (up to 32) of the data block to transmit. The first 2 bytes of the payload are the address of the block to write, the argument following bytes are the data. Upon reception, the MIDIpal writes the block of data in its internal eeprom, where all settings are stored. App selection To change the current app the MIDIpal is running, set command to 0x02 and argument to an app number. The payload must be left empty. Upon reception, the MIDIpal reboots into the select app. Settings data block request To request the transmission of a block of data from the MIDIpal, command is equal to 0x11 and argument is the size of the requested data block. The payload consists of 2 bytes, indicating the address of the requested block. Upon reception, the MIDIpal sends the designated data. If argument is null, the entire content of the eeprom is dumped. If argument is greater than 32, the data is sent in 32 bytes chunk, with a 150ms pause between chunks.","title":"Manual"},{"location":"midipal/manual/#overview","text":"","title":"Overview"},{"location":"midipal/manual/#basic-setup","text":"Connect a MIDI message source, such as a keyboard, control surface or computer interface to the MIDI in port of the MIDIpal. Connect a MIDI message receiver, such as a synth module, expander, or computer interface to the MIDI out port of the MIDIpal. The MIDIpal can be powered by either a 9V battery or a 5V-9V unregulated DC supply, with a minimum current rating of 150mA. Make sure that the connector has a center pin (or tip) positive / outer collar (or sleeve) negative pin polarity. Most universal power supplies allows the polarity to be selected \u2014 the polarity being often represented by a diagram like this: \u2013 (o +.","title":"Basic setup"},{"location":"midipal/manual/#user-interface","text":"Incoming and outgoing MIDI signals are visualized by the red and green LEDs near the MIDI sockets. The 8 characters LCD display is used to display the name and value of the currently edited parameter. Editing is done with the clickable rotary encoder.","title":"User interface"},{"location":"midipal/manual/#launching-apps","text":"Each \"feature\" of the MIDIpal can be seen as an independent \"app\". Only one app can be running at a time - that is to say, you cannot run an arpeggiator, a drum sequencer and a MIDI monitor on the same unit! To select the app to use, keep the encoder pressed. The name of the current app is shown on the screen. sequencr Turn the encoder to select an app. Click on the encoder to launch this app. Note that the last three entries in the list are not regular apps: notenuke sends a NoteOff message, for all possible MIDI notes, on all MIDI channels. sysxdump outputs a SysEx backup of all the MIDIpal settings. !reset! resets the unit to its factory settings.","title":"Launching apps"},{"location":"midipal/manual/#navigation-within-an-app","text":"Though there are a few exceptions, most of the apps are operated the following way: Turn the encoder to scroll through the lists of parameters. bpm 123 If you want to change a parameter, click on the encoder. Brackets appear around the parameter value. bpm[123] Turn the encoder to increase or decrease the value. Click again once you are done. bpm 123 The brackets disappear, and your modification is kept in memory, even if the MIDIpal is powered down - no need for a save button!","title":"Navigation within an app"},{"location":"midipal/manual/#reverting-to-factory-settings","text":"In order to revert the MIDIpal to its factory settings, keep the encoder pressed for 2s to display the app list. Scroll to the end of the list to reach the !reset! item: !reset! Click the encoder. Kaboom! All your settings are lost to the factory defaults.","title":"Reverting to factory settings"},{"location":"midipal/manual/#apps","text":"Please note that some of these applications might not be available on your unit. Please refer to this page and to the firmware update section to find out how you can replace the standard MIDIpal firmware with alternate versions containing extra applications.","title":"Apps"},{"location":"midipal/manual/#debugging-apps","text":"","title":"Debugging apps"},{"location":"midipal/manual/#midi-monitor-monitor","text":"This app monitors the incoming MIDI traffic. The MIDI data itself is passed through the MIDI output - so you can insert it through a MIDI link in your home studio to look at what's going on... chn all Press the encoder to select the MIDI channel to monitor. By default, all channels are monitored. The monitor displays the following text for note on/off messages: 1*A#4 3f The first character is the MIDI channel. A star is displayed as the second character whenever an active sensing message is received. A dot is displayed whenever a MIDI clock message is received. The next 3 characters are the MIDI note number is displayed. The last 2 digits are the velocity value in hexadecimal, or '--' for a note off message. The following text indicate a note pressure (aftertouch) message - 'a' for aftertouch, 7 being the highest nibble of the aftertouch value. 1*A#4 a7 The following text indicates a channel pressure (aftertouch) message. 1*aft 7e The following text indicates a CC #30 message. 1 #30 70 The following text indicates a pitch bend message of value 0x3070 on channel 4. 4 b 3070 Here is a list of text messages displayed for less common MIDI messages: notoff : all notes off controller. omnoff : omni mode off controller. omnion : omni mode on controller. monoon : mono mode on controller. polyon : poly mode on controller. sysx.. : beginning of SysEx reception. .sysx. : SysEx reception in progress. ..sysx : end of SysEx reception. start : clock start. cont .: clock continue. stop : clock stop. reset : system reset.","title":"MIDI monitor (monitor)"},{"location":"midipal/manual/#bpm-meter-bpm-cntr","text":"This app estimates and displays a BPM value from the MIDI clock. Every incoming MIDI data is forwarded to the MIDI out. Rotate the encoder to switch between the following views: b 120.0 BPM estimated over the past half-second B 120.0 Average BPM (estimated since the clock was started) t 23307 Total number of clock ticks received Click the encoder to reset the BPM estimate and the clock tick counter.","title":"BPM meter (bpm cntr)"},{"location":"midipal/manual/#midi-plumbing-apps","text":"","title":"MIDI Plumbing apps"},{"location":"midipal/manual/#channel-filter-chnfiltr","text":"This app deletes from the MIDI stream all messages associated with one or many MIDI channels. chX off Enables or disable the MIDI channel X.","title":"Channel filter (chnfiltr)"},{"location":"midipal/manual/#splitter-splitter","text":"This app routes MIDI note messages (note on, note off and aftertouch) from a specific channel to a different MIDI channel depending on their note value. For example, if you have a keyboard emitting on channel 1, you can use the lower half of the keyboard to send notes to a bass synth listening on channel 1, and the upper half of the keyboard to send notes to a multitimbral expander listening on channel 3. inp 5 Input channel. spl B3 Split point. low 7 Notes below the split point, coming from the input channel, will be routed to this channel. upp 7 Notes above the split point, coming from the input channel, will be routed to this channel.","title":"Splitter (splitter)"},{"location":"midipal/manual/#dispatcher-dispatch","text":"This app routes MIDI note messages from a single channel to several channels. This allows you to play chords on a rack of monophonic synths, for example. inp 5 Input channel. mod cyc Dispatching method: cyclic ( cyc ). Each new note is cyclically played on the next channel. polyphonic ( pol ). The mapping of notes to channel uses a true voice stealing algorithm. The MIDIpal tries to reuse the same channel for occurrences of the same note ; or the least recently used channel. random ( rnd ). Each new note is routed to a random channel. stacking ( stk ). Each note is sent to all channels at the same time. Perfect for thickening a lead by sending it to several synths, or to several parts of the same multitimbral device. velocity ( vel ). The louder (higher velocity) the note, the higher the MIDI channel it is sent to. out 4 First output channel. num 3 Number of output channels. For example, if out = 4 and num = 3, the notes will be dispatched to channels 4, 5 and 6.","title":"Dispatcher (dispatch)"},{"location":"midipal/manual/#channel-merger-chnmergr","text":"This app merges data from several channels into a single one. inp 5 First input channel. num 3 Number of channels to merge. For example, if inp = 5 and num = 3, channels 5, 6 and 7 will be merged. out 2 Output channel.","title":"Channel merger (chnmergr)"},{"location":"midipal/manual/#clock-divider-divider","text":"This app forwards every incoming MIDI message, but it only pick every Nth clock message. This has the effect of slowing down the MIDI clock by a ratio of N. div 1 Ratio by which the MIDI clock is divided.","title":"Clock divider (divider)"},{"location":"midipal/manual/#sync-latch-syncltch","text":"This feature, inspired by the Mungo Sync allows a slave device to be synchronized and started/stopped in sync with a master device playing a loop. Consider the following situation: you have a drum machine playing a steady 2-bar loop, in 4/4, and generating a clock signal for a slave MIDI sequencer. You need to reload a pattern on the sequencer. You stop the sequencer, load the pattern, and then you need to hit the play button on the sequencer at the exact right moment so that it starts spot on the first beat of the 2-bar drum loop. Tricky isn't it? This is where the MIDIpal can be used. Insert it between the drum machine and the sequencer. Configure the duration/time signature of the loop (Here: 8 quarter notes). The MIDIpal will keep counting beats. When you press the MIDIpal encoder, it'll wait for the beginning of the loop and then send a start message to the MIDI slave. When you press again the MIDIpal encoder, it'll wait for the end of the loop and then send a stop message to the MIDI slave. num 4 den 1/4 Numerator and denominator of the time signature of the loop. 03:00 . Beat counter. This shows: the MIDIpal counting beats. whether the slave is playing or stopped (a dot is shown when the slave is stopped ; a \">\" sign is shown when the slave is running). whether the MIDIpal is ready to send a start/stop message to the slave. When you press the encoder, the beat count is shown in brackets, to indicate that the MIDIpal is waiting for the beginning of the next bar to send the Start message (or the end of the bar to send the Stop message). For example: [03:20]. Indicates that the slave is currently stopped, and that the MIDIpal is waiting for the beginning of the next bar to send a Start message. [01:10]> Indicates that the slave is currently running, and that the MIDIpal is waiting for the end of the bar to send a Stop message.","title":"Sync latch (syncltch)"},{"location":"midipal/manual/#controller-and-master-apps","text":"","title":"Controller and master apps."},{"location":"midipal/manual/#clock-source-clock","text":"This app acts as a clock source - regularly sending MIDI clock ( 0xf8 ) messages. Every incoming MIDI data, at the exception of MIDI clock messages, are forwarded to the MIDI out. The settings are the following: run off Starts or stops the clock. bpm 120 Tempo of the internal clock, in beats per minutes. grv swg Type of shuffle/jitter to apply to the clock: swg : swing shf : shuffle psh : push effect, anticipating the beats lag : lag effect, delaying the beats hum : humanization mnk : monkeyzation amt 80 Amount of shuffle/jitter to apply to the clock. tap 120 While on this screen, you can \"click\" on the encoder to tap a tempo.","title":"Clock source (clock)"},{"location":"midipal/manual/#high-resolution-clock-source-clock","text":"This variant of the clock app acts as a clock source with a finer resolution of 0.1 BPM. Both variants perform equally well in terms of jitter/accuracy - this version just has a finer range of adjustment. The settings are the following: run off Starts or stops the clock. 120.0 Tempo of the internal clock, in beats per minutes.","title":"High-resolution clock source (clock)"},{"location":"midipal/manual/#cc-and-nrpn-knob-cc-knob","text":"This app turns the MIDIpal into a MIDI controller - sending CC or NRPN messages. All incoming messages are sent to the output -- that is to say, the generated CC/NRPN messages are merged into the MIDI stream. The settings are the following: val 60 CC or NRPN value to send. chn 7 Channel on which the CC message has to be sent. typ cc\\# Type of message to send: CC or NRPN. num 7 Number of the CC or NRPN message to send. For example, set this to 7 to send a volume message. min 0 max 80 Value range. This restricts the range of the val setting on the first page.","title":"CC and NRPN knob (cc knob)"},{"location":"midipal/manual/#controller-contrllr","text":"This app is only useful if you dare opening your MIDIpal. On the circuit board, you will find 8 pads labelled Analog 1..8 to which you can connect any circuit (including a simple potentiometer voltage divider) outputting a voltage in the 0-3.3V range . These are connected to the analog to digital converter of the MIDIpal brain. Voltage changes on these inputs will be translated into CC messages: a voltage of 0V yields a CC value of 0 ; a voltage of 3.3V yields a CC value of 127. Note that by default, these pads are floating, so they will receive random values! And beware: values above 3.3V are likely to destroy your MIDIpal . The following settings are available: chn 8 Channel on which the CC messages will be sent. ccN 7 CC# associated with the Nth input.","title":"Controller (contrllr)"},{"location":"midipal/manual/#inspirationcomposition-apps","text":"","title":"Inspiration/composition apps"},{"location":"midipal/manual/#drum-pattern-generator-drums","text":"This app generates 4-part rhythmic patterns on a selected channel (preferably 10!). You can use a 49 keys keyboard (or larger) to start, stop and mutate the patterns. The first octave on a 61 keys keyboard (C2 to B2) controls the first part. The second octave (C3 to B3) controls the second part. And so on. Two types of rhythmic patterns are available: Preset patterns : Each key within an octave will trigger and loop a different 1-bar pattern. C mutes the part. Euclidean patterns : Pressing a key in an octave indicates how many notes should be played within the span of a bar (C is 0, C# is 1, D is 2, D# is 4, then 5, 6, 8, 10, 12, 14, 16). Pressing two keys indicate how many notes should be played within the span of a sequence + the duration of a sequence. For example, if you press D and E, a 5 steps long pattern, containing 2 evenly spaced notes will be played. You can safely ignore these instructions and just play keys and clap your hands. The following settings are available: mod ptn Switch between the preset patterns and the euclidean patterns modes. clk int Select an internal or external clock source. When using an external clock source, start, clock and stop MIDI messages must be sent. bpm 120 Tempo of the internal clock, in beats per minutes. grv swg Type of shuffle/jitter to apply to the clock. amt 80 Amount of shuffle/jitter to apply to the clock. chn 10 Channel on which the notes are sent. This is also the channel to which pattern triggers must be sent. pt1 C1 pt2 D1 pt3 A#1 pt4 C#1 MIDI Note to send when a note is triggered on parts 1, 2, 3, 4. Notes are sent with a velocity of 100, and have a duration of one sixteenth note.","title":"Drum pattern generator (drums)"},{"location":"midipal/manual/#randomizer-randomiz","text":"This app randomizes the note and velocity values of the incoming MIDI data. It can even send a random CC every time a new note is triggered! chn 8 Channel on which the randomization effect is applied. amt 99 How often randomization is applied. When this value is set to 127 (maximum value), every note is randomized. When this value is set to 63 (medium value), there is a 50/50% probability that a note will be randomized. When this value is set to 0, no randomization is applied. not. 1 Amount of random modulation applied to the note number, in semitones. For example, if this parameter is set to 12, the emitted note is within /- 12 semitones = /- 1 octave of the original note. vel 70 Amount of random modulation applied to the velocity value. cc1 70 cc2 70 Amount of random modulation applied to the first and second CC. Set both to 0 if you don't want to send a random CC with each note. #c1 7 #c2 7 CC Numbers for the first and second random CC sources.","title":"Randomizer (randomiz)"},{"location":"midipal/manual/#chord-memory-chordmem","text":"This app memorizes a chord and lets you play transpositions of it. To record a chord, click the encoder, and play a chord. Click the encoder again and that's it maestro! In recording mode, you can also select the affected channel.","title":"Chord memory (chordmem)"},{"location":"midipal/manual/#arpeggiator-arpeggio","text":"clk int Select an internal or external clock source. When using an external clock source, start, clock and stop MIDI messages must be sent. bpm 120 Tempo of the internal clock, in beats per minutes. grv swg Type of shuffle/jitter to apply to the clock. amt 80 Amount of shuffle/jitter to apply to the clock. chn 1 Channel to arpeggiate. Chords sent on this channels are filtered out and played as arpeggios. dir up Arpeggio direction. The available directions are up, down, up&down, or random. oct 1 Arpeggio range, in octaves. ptn 10 Arpeggio rhythmic pattern. 1: o o o o o o o o 2: o o ooooo o oooo 3: o o oo oo o oo o 4: o o o ooo o o oo 5: o o o o oo o o o 6: o o o o o oo o 7: o o o oo o o o 8: o o o o 9: o o o o o o 10: o o o o o o 11: o o o o o o 12: o oo o o o oo 13: oo o oo oo o oo 14: oo oo o oo oo o 15: ooo ooo ooo ooo 16: ooo oo oo oo oo 17: ooo o o ooo o o 18: oooo oo oooo oo 19: ooooo oo oo ooo 20: o o o o o o 21: o oooooo oo 22: o o o oo div /16 Duration of an arpeggio step (the duration of a 'o' or blank in the previous chart). The default is /16 -- a 16th note per step. dur /16 Duration of the notes played by the arpeggiator. The default is /32, a 32th note. lat on Latch mode. When set to on , releasing the keyboard will not stop the arpeggiator. To stop the arpeggiator, set this latch setting to off . Please note that the sustain pedal of your controller can be used similarity to hold notes.","title":"Arpeggiator (arpeggio)"},{"location":"midipal/manual/#tempo-synchronized-delaystrummer-delay","text":"This app adds echoes to incoming note on and note off messages. The echo duration is specified as a fraction of the duration of a bar - thus, this effect can be musically synchronized to a tempo clock (be it internal or external). clk int Select an internal or external clock source. When using an external clock source, start, clock and stop MIDI messages must be sent. bpm 120 Tempo of the internal clock, in beats per minutes. grv swg Type of shuffle/jitter to apply to the clock. amt 80 Amount of shuffle/jitter to apply to the clock. chn 1 Channel on which the echo effect is applied. del 1/4 Delay duration, expressed as a fraction of a bar. For example, when this is set to 1/4, the duration between echoes is equal to the duration of a quarter note. rep 8 Number of echoes to play. Note that when a complex sequence is played with many overlapping echoes, the internal scheduler buffer can overflow. In this case, a '!' symbol briefly appears on the LCD display. Keep in mind that each echo is going to use a polyphony voice, so it is not a good idea to play MIDI echoes on a device with a limited polyphony. vel 16 Velocity dampening. When this value is low, the echoes have a small and rapidly decreasing velocity. When this value is high (the maximum being 16), all the echoes are played with the same velocity as the original note. trs 0 Number of semitones by which each echo must be transposed. dpl 32 Pseudo-doppler effect: Increases (when set to a positive value) or decreases (when set to a negative value) the delay between the notes as they echo.","title":"Tempo-synchronized delay/strummer (delay)"},{"location":"midipal/manual/#scale-and-harmony-processor-scale","text":"This app can transpose incoming note messages, and \"quantize\" them to the nearest note in one of the 25 preset scales. It can also harmonizes the incoming note at a fixed interval and/or through algorithmic modification of the played melody. chn 1 Channel on which the scale / transposition / harmony modifications have to be applied. roo C Root note of the target scale. scl chr Target scale. All notes outside of this scale are \"quantized\" to their nearest neighbor in the scale. For example, if a C major scale is selected, and if you play a chromatic scale (C, C#, D, D#, E...), what will be heard will be C, C, D, D, E, F, F, G, G, A, A, B. The available scales are: chr : chromatic scale (no quantization). ion : ionian mode (major scale). dor : dorian mode (russian minor scale). phr : phrygian mode. lyd : lydian mode. mix : mixolydian mode. aeo : aeolian mode (minor scale). loc : locrian mode. bmj : major blues scale. bmn : major blues scale. pmj : pentatonic major scale. pmn : pentatonic minor scale. bhr : raga Bhairav. shr : raga Shri. rup : raga Rupavati. tod : raga Todi. rag : raga Rageshri. kaa : raga Kaafi. meg : raga Meg. mlk : raga Malkauns. dpk : raga Deepak. flk : Folkish scale. jap : Japanese scale. gam : Gamelan scale. whl : Whole tones. trs 0 Transposition to apply to the incoming notes. voi 0 When set to a non-zero value, a parallel harmony N semitones apart from the incoming melody is played. For example, when set to -24, the incoming notes are doubled 2 octaves below. Note that the generated notes are also subject to scale quantization. hrm off Generates an additional, mostly random, harmonic line on top of the incoming melody. Several algorithms are available to generate the harmony: mir : mirrors the intervals played on the incoming melody. If you play an ascending scale, a descending scale will be added. alt : alternates between following what you play, and the mirror mode. trk : tracks the interval you play, plus or minus a few semitones. For example, if you play a fifth, a major third, and an octave, the harmonized line might play a fourth, a minor third, then an octave. random : plays a random note within +/- 1 fifth of the note you played. Obviously, all those random modifications are likely to generate annoying junk unless you select a scale. In which case, it will still sound random, but of the \"Free-Jazz\" flavor of random.","title":"Scale and harmony processor (scale)"},{"location":"midipal/manual/#step-sequencer-sequencr","text":"This app is a step sequencer which can generate note messages, CCs, or a combination of both, on up to 32 steps. The following settings are available for each step: Note (represented on the screen by a note icon). Note duration (represented on the screen by a pulse icon). Note velocity (represented on the screen by a triangle icon). Set the velocity to 0 to mark a step as being a rest. CC value (represented by a knob icon). Since navigating between the 32 steps x 4 settings = 128 pages can be tedious, you can \"simplify\" the sequencer operation by: Muting the notes track. In this case, the sequencer only sends CC - and works more like a programmable MIDI LFO. Muting the note duration track. In this case, a default note duration of 1 step will be used for all the generated notes. Muting the velocity track. In this case, a default velocity of 100 is used for each step. Muting the CC track. In this case, the sequencer only sends note information. The muting/unmuting of those track can be used for creative effects -- for example, you can temporarily mute the velocity track of a synth sequence to make it sound louder and more mechanical. The sequencer has many settings pages, described in this section. run off Start or stop the sequencer, when it is synchronized to the internal clock -- When the sequencer is synchronized to an external MIDI clock, a proper start/stop MIDI message must be sent for the sequence to start. You can also start the sequencer by playing a MIDI note, and stop it by replaying the same note. clk int Select an internal or external clock source. When using an external clock source, start, clock and stop MIDI messages must be sent. bpm 120 Tempo of the internal clock, in beats per minutes. grv swg Type of shuffle/jitter to apply to the clock. amt 80 Amount of shuffle/jitter to apply to the clock. div /16 Duration of a step, in a fraction of a bar. The most common setting (TB303-like) is one sixteenth note (/16) per step. chn 1 MIDI channel on which the sequenced events will be sent. cc# 7 CC number of the messages sequenced on the CC track. not on Whether the sequencer sends note messages. dur on Whether the note duration track is active. When this track is disabled, all notes played by the sequencer have a duration of 1 step. vel on Whether the velocity track is active. When this track is disabled, a note is played on every step, with a velocity of 100. cc on Whether the CC track is active. stp 8 Number of steps a sequence is made of. 01N C3 Note for step 1. 01D /96 Duration of the note played at step 1 - here, 1 MIDI clock tick. 01V 14 Velocity for step 1. The actual MIDI velocity value sent is 8 times the displayed value. For example, 15 corresponds to the velocity value 120. 01C 63 Value of the CC sent at step 1. Some nice things about the sequencer: While a sequence is playing, you can transpose it by playing a note on the keyboard. The transposition is relative to C3 if the sequence was started from the menu or from an external MIDI clock ; or relative to the pressed key when the sequence was started from the keyboard. While the MIDIpal is in editing mode, on a note step (in other words, when the screen is displaying something like this, pressing a key on the keyboard does not transpose or start the sequence. Instead, it records the played note at the current step. 01N[ C3]","title":"Step sequencer (sequencr)"},{"location":"midipal/manual/#sh-101-style-sequencer-sequencr","text":"This variant of the sequencer app provides a very simple way of recording sequences from a keyboard and playing them back with transposition. To record a sequence, turn the encoder until the display shows: rec off Click the encoder to enable recording. The display shows the number of the current step (here, 0): . 0|rest Every note played from the MIDI in is added to the sequence. To insert a rest (blank step), click the encoder. To insert a tie (extends the duration of the previously input note into this step), turn the encoder to select \"tie\" and click. To insert an accent, move the modulation wheel up before playing a note - this note will be accented. To insert a slide between two notes, wiggle the pitch bend lever (the actual position does not matter) between the two notes. To leave the recording mode, turn the encoder to select \"exit\" and click. There are different ways of starting the play-back of the recorded sequence: Turn the encoder until the display shows the \"run\" option and click. Play a note from the MIDI keyboard connected to the MIDIpal - you can transpose the sequence by playing a different note. The sequence stops if you move back to the original note used to start the sequence. If the MIDIpal is configured to receive an external MIDI clock, send a MIDI start message. The other settings available are: clk int Select an internal or external clock source. When using an external clock source, start, clock and stop MIDI messages must be sent. bpm 120 Tempo of the internal clock, in beats per minutes. grv swg Type of shuffle/jitter to apply to the clock. amt 80 Amount of shuffle/jitter to apply to the clock. div /16 Duration of a step, in a fraction of a bar. The most common setting is one sixteenth note (/16) per step. chn 1 MIDI channel on which the sequenced events will be sent, and from which events will be recorded.","title":"SH-101 style Sequencer (sequencr)"},{"location":"midipal/manual/#jx-3p-style-sequencer-polyseq","text":"This sequencer app inspired by JX-3P sequencer allows layer by layer recording of polyphonic sequences. Think of it as a polyphonic version of the SH-101 style sequencer. To clear the sequence and record a first layer, turn the encoder until the display shows: rec off Click the encoder to enable recording. The display shows the number of the current step (here, 0): . 0|rest Every note played from the MIDI in is added to the sequence. To insert a rest (blank step), click the encoder. To insert a tie (extends the duration of the previously input note into this step), turn the encoder to select \"tie\" and click. To leave the recording mode, turn the encoder to select \"exit\" and click. To record a new layer above the existing sequence (overdub mode), turn the encoder until the display shows: dub off Click the encoder to enable overdubbing. From there, you can record notes/ties/rests just like in the record mode. Note that once you reach the end of the sequence, the step counter goes back to 0 and you can record a new layer above the previous one. There are different ways of starting the play-back of the recorded sequence: Turn the encoder until the display shows the \"run\" option and click. Play a note from the MIDI keyboard connected to the MIDIpal - you can transpose the sequence by playing a different note. The sequence stops if you move back to the original note used to start the sequence. If the MIDIpal is configured to receive an external MIDI clock, send a MIDI start message. The other settings available are: clk int Select an internal or external clock source. When using an external clock source, start, clock and stop MIDI messages must be sent. bpm 120 Tempo of the internal clock, in beats per minutes. grv swg Type of shuffle/jitter to apply to the clock. amt 80 Amount of shuffle/jitter to apply to the clock. div /16 Duration of a step, in a fraction of a bar. The most common setting is one sixteenth note (/16) per step. chn 1 MIDI channel on which the sequenced events will be sent, and from which events will be recorded.","title":"JX-3P style Sequencer (polyseq)"},{"location":"midipal/manual/#lfo-lfo","text":"This app generates slowly evolving controllers for up to 4 individual CC. Note that there are a few fundamental differences between what this app does and what an LFO on a synth traditionally does: The stream of CC is generated at a slow speed, typically 50 samples per second. Instead of controlling the LFO frequency in Hz, you control here the duration of a cycle expressed as a musical duration relative to a tempo. run off Start or stop the LFOs, when it is synchronized to the internal clock -- When the LFO is synchronized to an external MIDI clock, a proper start/stop MIDI message must be sent for the LFOs to start. clk int Select an internal or external clock source. When using an external clock source, start, clock and stop MIDI messages must be sent. bpm 120 Tempo of the internal clock, in beats per minutes. grv swg Type of shuffle/jitter to apply to the clock. amt 80 Amount of shuffle/jitter to apply to the clock. res /96 Resolution of the LFO clock. Selecting a high resolution allows for faster modulations and less stepping, but some devices might not like the very dense MIDI streams this generates. Selecting a low resolution might create \"stepping\" effects. chn 1 MIDI channel on which the CC messages will be sent. ccN 7 CC number sent by the Nth LFO. amN 63 Modulation amount of the Nth LFO. A negative amount inverses the polarity of the LFO waveform. ceN 63 Center value of the Nth LFO. For example, if the modulation amount is 40 and the center value 70, the LFO will oscillate between 70 - 40 = 30 and 70 + 40 = 110. wfN tri Waveform of the Nth LFO. The following waveforms are available: tri : triangle sqr : square rmp : ascending ramp. Use a negative modulation amount to get a descending ramp. sin : sine wave si2 : first and second sine harmonics si3 : first and third sine harmonics si5 : first and fifth sine harmonics gg1 : gurgle gg2 : double gurgle bt1 : bat (folded triangle) 1 bt2 : bar (folded triangle) 2 sp1 : spike sp2 : bipolar spike lp1 : smoothed ramp lp2 : smoothed square rs1 : ramp with overshoot rs2 : square with overshoot s&h : (random) sample&hold A large fraction of those waveforms has been approved by the International Organization for Dubstep Standardization. rtN 1/8 Period of the Nth LFO. For example, if this is set to 1/4, the LFO will complete a whole cycle every quarter note (beat). syN fre Sync mode of the Nth LFO. The synchronization modes are: fre : free running. The LFO oscillates independently of any note message, and its phase is never reset. not : note synchronization. The LFO phase is reset to 0 every time a note on message is received. chd : chord synchronization. The LFO phase is reset to 0 every time a new \"chord\" is received. In other words, as long as a note is held, playing new notes will not reset the LFO phase. You need to release all keys and press a new key to reset the LFO phase.","title":"LFO (lfo)"},{"location":"midipal/manual/#miscellaneous-apps","text":"","title":"Miscellaneous apps"},{"location":"midipal/manual/#tanpura-pattern-generator-tanpura","text":"This app generates the repetitive note patterns traditionally played on the tanpura to accompany north indian classical music. The settings are the following: run off Starts/stops playback. clk int Select an internal or external clock source. When using an external clock source, start, clock and stop MIDI messages must be sent. bpm 120 Tempo of the internal clock, in beats per minutes. grv swg Type of shuffle/jitter to apply to the clock. amt 80 Amount of shuffle/jitter to apply to the clock. res 1/4 Relationship between the tempo grid (BPM) and the notes. The default is 1/4. 1/8 and 1/16 can be used for double and quadruple time. chn 1 MIDI channel on which the note messages will be sent. sa C4 Root note (sa) of the pattern. mod pa Interval highlighted in the pattern. Pa = fifth, ma = fourth, ni = 7th, sa = only octave. cyc 5 This setting indicates from which note the pattern starts. For example, considering the pattern: sa . . . . pa Sa Sa sa. 0 will start the pattern at sa ; 1, 2, 3, 4 will start the pattern by a silence ; 5 will start the pattern at pa ; 6 and 7 will start the pattern at Sa.","title":"Tanpura pattern generator (tanpura)"},{"location":"midipal/manual/#general-purpose-event-processor-user-prg","text":"This app applies one of 4 user-defined event filtering / remapping pipelines, each of them consisting of up to 4 filtering / remapping rules. It's like piping stuff on a unix shell, with note messages and transpositions instead of grep and awk! There is only one setting - the active program. prg 1 To edit a program: Select the program number you want to edit on the MIDIpal. Go to this webpage . Configure the filtering rules. Click on \"Download .syx\" to retrieve a .syx file. Play the .syx file into the MIDIpal to install the program at the active location. And now, a few explanations about the filtering rules!","title":"General purpose event processor (user prg)"},{"location":"midipal/manual/#creating-custom-filtering-rules","text":"Each program contains up to 4 \"filters\". Use the checkboxes to activate / deactivate a filter. The first line of the table specifies which events the filter operates on: The Channel column specifies the affected channel(s). The Event type column specifies the affected MIDI event type(s). The Data A and Data B columns specify value range for the two bytes of information contained in MIDI messages. You can use this, for example, to restrict an effect or processing to a certain range of notes (value A) or velocity (value B). The second line of the table specifies some transformations to apply on the matching event: Transform : the original event is modified and sent to the MIDI out. Pass and transform : both the original event and its modified version are sent to the MIDI out. You can use it to automatically \"clone\" a note to another channel. CCize : a control change (CC) message is formed with the data of the incoming event, and sent to the MIDI out. The original message is lost. This can be used to translate pitch bend or note messages into CC. Pass and CCize : a control change (CC) message is formed with the data of the incoming event, and sent to the MIDI out. The original message is also sent. This can be used, for example to send a new CC (maybe a random one?) every time a note is pressed. Filter out : the original event is removed from the MIDI stream. The next option list shows what to do with the MIDI channel of the incoming event. By default, Shift by: 0 does nothing. You can specify another value to shift the channel number by the specified amount (if Shift by: 4 is used, Channel 1 becomes channel 5, channel 2 becomes channel 6 etc.). Reassign to overwrite the MIDI channel of the original message to the specified value. Finally, operations can be applied to the MIDI message data: Add/Subtract/Invert/Set to are self-explanatory. Map to range changes the dynamic range of a parameter -- you can use this to alter the velocity response of a keyboard or drum sensor. Set to random replaces the value by a number picked within the specified interval. Add random adds a random value (drawn from the specified interval). When Preserve zero is checked, no matter which transformation is specified, a value of 0 is never modified. This is particularly useful when dealing with synths sending Note On with a velocity of 0 instead of Note Off. You don't want those to be affected by your velocity randomizer don't you? When Binary wrapping is checked, weird things may happen... For example, what if you use Add: 12 to transpose a note one octave above, and then you play the last key on your keyboard? Normally, nothing will happen -- the note won't be transposed at all. With Binary wrapping checked, it'll wrap around and a very low note will be played! When Swap source is checked, the second byte of the MIDI message (velocity, note) is put in place of the first. Here are some examples: Map all notes below C4 (Midi note 60) to channel 2: Map CC 07 (volume) to CC 08 (pan): Randomize note velocities: Remove program changes on all channels except channel 1: Send a random modwheel value at each new note: To retrieve the rules contained in a .syx file, go to this page","title":"Creating custom filtering rules"},{"location":"midipal/manual/#updating-the-midipal-firmware","text":"To find out which firmware version the MIDIpal is running, hold the encoder and jump to the app selection menu, then scroll to the end of the list. On the first release of the firmware (v1.1), the last entry is the system reset command. On more recent versions, starting from v1.2, the firmware revision number is displayed at the end of the list. This section describes how to update the operating system and apps of the MIDIpal (firmware) . The operations described here are not required for sending to the MIDIpal data such as memory backups, or custom programs - the MIDIpal can receive such data while being powered on normally. Keep the encoder pressed while you power on the MIDIpal. You'll see the MIDI in and MIDI out LEDs rapidly blink in sequence, and the MIDI in LED will stay on. The MIDIpal is ready to receive the update data, which can be sent as a SysEx (with a 250ms or more delay between packets) or MIDIfile. The MIDI in LED blinks on every received packet, an update containing up to 256 packets. The update takes about 1 minute, and can be restarted in case of accident during the transmission. Upon reception of the last packet, the MIDIpal immediately boots with the new firmware. If you want to use a dedicated SysEx transfer tool rather than a sequencer, we recommend Elektron's C6 tool available for both Windows and OS X, with the following timing settings:","title":"Updating the MIDIpal firmware"},{"location":"midipal/manual/#sysex-data-format","text":"The MIDIpal can receive and transmit settings in system exclusive format. The messages all share the same format: 0xf0 (SysEx) 0x00 0x21 0x02 (Mutable Instruments Manufaturer id) 0x00 0x03 (Product ID for MIDIpal) Command Argument Payload Checksum 0xf7 (End of SysEx) Command indicates what the receiver should do with the data in the payload block, and argument is a byte that might contain an additional piece of information about what to do with the data. Payload is a sequence of bytes in nibblized form. For example, the sequence 0x80 0x56 0x13 is transmitted as 0x08 0x00 0x05 0x06 0x01 0x03 . Checksum is equal to the nibblized-sum, modulo 256, of the payload bytes. In the example above, the checksum is equal to 0x80 + 0x56 + 0x13 = 0xe9 and is transmitted as 0x0e 0x09 .","title":"SysEx data format"},{"location":"midipal/manual/#settings-data-block-transfer","text":"To transmit a block of data to the MIDIpal, command must be equal to 0x01 and argument is the size (up to 32) of the data block to transmit. The first 2 bytes of the payload are the address of the block to write, the argument following bytes are the data. Upon reception, the MIDIpal writes the block of data in its internal eeprom, where all settings are stored.","title":"Settings data block transfer"},{"location":"midipal/manual/#app-selection","text":"To change the current app the MIDIpal is running, set command to 0x02 and argument to an app number. The payload must be left empty. Upon reception, the MIDIpal reboots into the select app.","title":"App selection"},{"location":"midipal/manual/#settings-data-block-request","text":"To request the transmission of a block of data from the MIDIpal, command is equal to 0x11 and argument is the size of the requested data block. The payload consists of 2 bytes, indicating the address of the requested block. Upon reception, the MIDIpal sends the designated data. If argument is null, the entire content of the eeprom is dumped. If argument is greater than 32, the data is sent in 32 bytes chunk, with a 150ms pause between chunks.","title":"Settings data block request"},{"location":"module_tester/","text":"Overview Several problems were faced during the development of our Eurorack modules: How to power and test a module during development? Bench-top power supplies are cumbersome (especially for projects requiring 3 supply rails) and standard test equipment is sometimes useless or frustrating for quantities like musical notes or V/Oct scales. On the other extreme of the scale, who would run the risk of putting a half-built prototype in a rack loaded with thousands of euros worth of modules? What kind of setup to use for factory testing? How to take a project away from the lab without carrying heaps of \"dependencies\"? We solved this the Mutable Instruments way, rolling up our sleeves and designing a simple box able to provide power and all kinds of test signals (clocks, gates, CVs, audio tones) to a module. This tool is made available under cc-by-sa (hardware) and GPL (firmware) licenses. Building it Schematics and layout Schematics. Eagle .brd/.sch files hosted on github . Top and bottom assembly. BOM Bill of Materials . Assembly notes The large capacitors on the bottom of the board should be bent and rest against the board (rather than be mounted vertically as it was done on Ambika). The same thing applies to the NP capacitors on the top side. See this picture: Firmware Fuses: EFUSE = 0xfd ; HFUSE = 0xd4 ; LFUSE = 0xff Pre-compiled .hex file . Source code . Build with make -f module_tester/makefile bootstrap . Calibration Set the CV output to \"2 Oct arpeggio\" with a period of 2s or 5s. It cycles between a 1V output and a 3V output. Adjusts the two trimmers to accurately get these voltages. Note that the MCP4822's linearity is not fantastic - so don't be surprised to get 1V and 1.997V or 2.003V when you change the CV output to \"1 Oct arpeggio\". The chance is, the analog circuitry on the other end is much less precise than that anyway! User manual Power generation The tester must be powered by a 12V AC external power supply (Wall-wart) with a 2.1mm jack. The red stripe of the ribbon cable (indicating the -12V pins) must be oriented like on this picture: Because the tester uses half-wave rectification, and input capacitors and heatsinks of moderate size, it is not recommended to draw more than 200mA from the supply rails. Features The tester provides 4 channels of signal generation: clock, gate, CV (LFO or stepped notes), and audio. The tester provides 2 channels of signal analysis: audio signal frequency measurement (with display in Hz, Note units, or intervals), and gate/clock timing measurement. Modifying settings Each of the 4 signal generation and 2 signal analysis functions is materialized by an output or input jack, a LED, and a button. To modify the settings of a generator/analyzer, press the button under its I/O jack. The LED indicates which generator/analyzer is being configured. The display shows a list of parameters. Turn the encoder to scroll through the list. Click the encoder to modify an option. Notice that the '>' arrow is now displayed in front of the value. Turn the encoder to modify the value. Click the encoder to confirm. For example, to modify the frequency of the audio signal generator to A3, press the AUDIO OUT button. The display shows: >shape sine freq. C5 Turn the encoder to select \"freq.\": shape sine >freq. C5 Click the encoder to modify the value: shape sine freq. > C5 shape sine freq. > A3 Click the encoder to confirm. shape sine >freq. A3 Settings reference Clock signal generator Tempo is the tempo of the clock, in beats per minute. Resolution is the number of clock ticks per beat. For example, a tempo of 120 beats per minute with 8 ticks per beat corresponds to a clock frequency of 960 ticks per minute (16 Hz). Pulse is the duration or duty cycle of a clock pulse. MIDI allows the clock rate to be controlled by an external computer or sequencer. Gate signal generator Period is the period of the signal. Pulse is the duration or duty cycle of a gate pulse. MIDI allows the gate signal to be generated from an external keyboard. In gate mode, the signal is high whenever a key is pressed on the keyboard. In trigger mode, a pulse is emitted every time a key is pressed - irrespectively of the duration of the note. Control Voltage generator Mode controls the output waveform: triangle, square, ramp up, ramp down, sine, 1 octave arpeggio (alternates between 1V and 2V), 2 octave arpeggio (alternates between 1V and 3V), chromatic scale (goes from 1V to 2V by 1/12V increments). Period controls the period of the generated signal or sequence. Range controls the amplitude and polarity of the signal: bipolar signals with a 2V, 4V or 10V amplitude; unipolar signals with a 1V, 2V or 5V amplitude. This setting is ignored when one of the arpeggio/scale modes are selected. MIDI allows the voltage produced by this generator to be controlled by a MIDI message from an external keyboard. Audio generator Shape selects one of 4 waveforms: saw, square, triangle, sine wave. Frequency selects the signal frequency. A few fixed frequencies are available, the remaining values are musical notes. Envel. allows an external signal to \"shape\" the tone produced by this generator. In gate mode, the signal is on whenever the signal at the Gate In input is high. In trigger mode, the signal has a decreasing envelope, which is retriggered on raising edges of the Gate In signal. MIDI allows the audio generator to be played from a keyboard. Audio input The encoder selects between 3 units: Frequency (Hz) Note and detuning (MIDI standard + cents) Interval. In this mode, the musical interval between the current stable note and the previously played note is measured. This interval is expressed in cents. 1 octave = 1200 cents. Gate input The first line displays either the period, frequency, and tempo of the incoming signal. The second line displays either the duty cycle, or the duration of the positive edge of the signal. Note that the Gate Input LED blinks with the input signal.","title":"Module Tester"},{"location":"module_tester/#overview","text":"Several problems were faced during the development of our Eurorack modules: How to power and test a module during development? Bench-top power supplies are cumbersome (especially for projects requiring 3 supply rails) and standard test equipment is sometimes useless or frustrating for quantities like musical notes or V/Oct scales. On the other extreme of the scale, who would run the risk of putting a half-built prototype in a rack loaded with thousands of euros worth of modules? What kind of setup to use for factory testing? How to take a project away from the lab without carrying heaps of \"dependencies\"? We solved this the Mutable Instruments way, rolling up our sleeves and designing a simple box able to provide power and all kinds of test signals (clocks, gates, CVs, audio tones) to a module. This tool is made available under cc-by-sa (hardware) and GPL (firmware) licenses.","title":"Overview"},{"location":"module_tester/#building-it","text":"","title":"Building it"},{"location":"module_tester/#schematics-and-layout","text":"Schematics. Eagle .brd/.sch files hosted on github . Top and bottom assembly.","title":"Schematics and layout"},{"location":"module_tester/#bom","text":"Bill of Materials .","title":"BOM"},{"location":"module_tester/#assembly-notes","text":"The large capacitors on the bottom of the board should be bent and rest against the board (rather than be mounted vertically as it was done on Ambika). The same thing applies to the NP capacitors on the top side. See this picture:","title":"Assembly notes"},{"location":"module_tester/#firmware","text":"Fuses: EFUSE = 0xfd ; HFUSE = 0xd4 ; LFUSE = 0xff Pre-compiled .hex file . Source code . Build with make -f module_tester/makefile bootstrap .","title":"Firmware"},{"location":"module_tester/#calibration","text":"Set the CV output to \"2 Oct arpeggio\" with a period of 2s or 5s. It cycles between a 1V output and a 3V output. Adjusts the two trimmers to accurately get these voltages. Note that the MCP4822's linearity is not fantastic - so don't be surprised to get 1V and 1.997V or 2.003V when you change the CV output to \"1 Oct arpeggio\". The chance is, the analog circuitry on the other end is much less precise than that anyway!","title":"Calibration"},{"location":"module_tester/#user-manual","text":"","title":"User manual"},{"location":"module_tester/#power-generation","text":"The tester must be powered by a 12V AC external power supply (Wall-wart) with a 2.1mm jack. The red stripe of the ribbon cable (indicating the -12V pins) must be oriented like on this picture: Because the tester uses half-wave rectification, and input capacitors and heatsinks of moderate size, it is not recommended to draw more than 200mA from the supply rails.","title":"Power generation"},{"location":"module_tester/#features","text":"The tester provides 4 channels of signal generation: clock, gate, CV (LFO or stepped notes), and audio. The tester provides 2 channels of signal analysis: audio signal frequency measurement (with display in Hz, Note units, or intervals), and gate/clock timing measurement.","title":"Features"},{"location":"module_tester/#modifying-settings","text":"Each of the 4 signal generation and 2 signal analysis functions is materialized by an output or input jack, a LED, and a button. To modify the settings of a generator/analyzer, press the button under its I/O jack. The LED indicates which generator/analyzer is being configured. The display shows a list of parameters. Turn the encoder to scroll through the list. Click the encoder to modify an option. Notice that the '>' arrow is now displayed in front of the value. Turn the encoder to modify the value. Click the encoder to confirm. For example, to modify the frequency of the audio signal generator to A3, press the AUDIO OUT button. The display shows: >shape sine freq. C5 Turn the encoder to select \"freq.\": shape sine >freq. C5 Click the encoder to modify the value: shape sine freq. > C5 shape sine freq. > A3 Click the encoder to confirm. shape sine >freq. A3","title":"Modifying settings"},{"location":"module_tester/#settings-reference","text":"","title":"Settings reference"},{"location":"module_tester/#clock-signal-generator","text":"Tempo is the tempo of the clock, in beats per minute. Resolution is the number of clock ticks per beat. For example, a tempo of 120 beats per minute with 8 ticks per beat corresponds to a clock frequency of 960 ticks per minute (16 Hz). Pulse is the duration or duty cycle of a clock pulse. MIDI allows the clock rate to be controlled by an external computer or sequencer.","title":"Clock signal generator"},{"location":"module_tester/#gate-signal-generator","text":"Period is the period of the signal. Pulse is the duration or duty cycle of a gate pulse. MIDI allows the gate signal to be generated from an external keyboard. In gate mode, the signal is high whenever a key is pressed on the keyboard. In trigger mode, a pulse is emitted every time a key is pressed - irrespectively of the duration of the note.","title":"Gate signal generator"},{"location":"module_tester/#control-voltage-generator","text":"Mode controls the output waveform: triangle, square, ramp up, ramp down, sine, 1 octave arpeggio (alternates between 1V and 2V), 2 octave arpeggio (alternates between 1V and 3V), chromatic scale (goes from 1V to 2V by 1/12V increments). Period controls the period of the generated signal or sequence. Range controls the amplitude and polarity of the signal: bipolar signals with a 2V, 4V or 10V amplitude; unipolar signals with a 1V, 2V or 5V amplitude. This setting is ignored when one of the arpeggio/scale modes are selected. MIDI allows the voltage produced by this generator to be controlled by a MIDI message from an external keyboard.","title":"Control Voltage generator"},{"location":"module_tester/#audio-generator","text":"Shape selects one of 4 waveforms: saw, square, triangle, sine wave. Frequency selects the signal frequency. A few fixed frequencies are available, the remaining values are musical notes. Envel. allows an external signal to \"shape\" the tone produced by this generator. In gate mode, the signal is on whenever the signal at the Gate In input is high. In trigger mode, the signal has a decreasing envelope, which is retriggered on raising edges of the Gate In signal. MIDI allows the audio generator to be played from a keyboard.","title":"Audio generator"},{"location":"module_tester/#audio-input","text":"The encoder selects between 3 units: Frequency (Hz) Note and detuning (MIDI standard + cents) Interval. In this mode, the musical interval between the current stable note and the previously played note is measured. This interval is expressed in cents. 1 octave = 1200 cents.","title":"Audio input"},{"location":"module_tester/#gate-input","text":"The first line displays either the period, frequency, and tempo of the incoming signal. The second line displays either the duty cycle, or the duration of the positive edge of the signal. Note that the Gate Input LED blinks with the input signal.","title":"Gate input"},{"location":"shruthi/4pm/","text":"One board to rule them all... This filter board is probably the most advanced 4-pole core for the Shruthi-system! It uses the same \"Pole-mixing\" technique introduced in the Oberheim Xpander to provide a cornucopia of filter responses. It also provides 4 different settings controlling the \"flavour\" of the resonance, clean and liquid, MS-20 style, wobbly/chaotic, and a combination of the MS20 and wobbly modes. The filter core is based on a SSM2164, for a very low-distortion and pure sound. A LM13700 is used as a global VCA and for resonance control, with loudness compensation. Using this filter board Please make sure that both the analog (CV1 to +5V) and digital (RX to +5V) ports of the filter and control boards are connected. Beware! Only the Shruthi-1 firmware v0.96 (or above) generates the digital signals required to control the mode selection and routing matrix. In addition, it is not possible to use simultaneously the 4-Pole Mission filter board and the Programmer since they will be both accessing at the same time the digital extension port. To activate the 4-Pole Mission filter board, select 4pm in the system settings page. If you don't do so, it is likely that it will emit glitchy filtered sounds everytime you navigate through the pages. When pressing the S2 switch (Filter page) a second time, a new page is displayed allowing you to configure the filter routing. Cut res mod fla 100 33 lp4 liq The parameters are the following: cut (cutoff) : Cutoff frequency, conveniently repeated on this page. res (resonance) : Resonance level, conveniently repeated on this page. mod (mode) : Filter mode. See below. fla (flavour) : Resonance flavour. See below. The following 15 filter modes are available: lp4 : 4-pole low-pass. lp3 : 3-pole low-pass. lp2 : 2-pole low-pass. lp1 : 1-pole low-pass. hp1 : 1-pole high-pass. hp2 : 2-pole high-pass. hp3 : 3-pole high-pass. bp2 : 2-pole band-pass. bp4 : 4-pole band-pass. notch : notch filter. phaser : phaser. h2lp : 2-pole high-pass and 1-pole low-pass (band-passlike). h3lp : 3-pole high-pass and 1-pole low-pass (band-passlike). n+lp : notch and 1-pole low-pass. p+lp : allpass and 1-pole low-pass. The 4 resonance flavours are: liquid : standard, close to the CEM or Roland designs (no loudness drop). ms : Korg-35 style soft limiting is introduced in the signal chain. wobbly : The 1-pole output is fed back to the filter cutoff frequency for a rubbery chaotic and modulated resonance. whacky : A combination of the ms and wobbly modes. Schematics and PCB You can find the Eagle files for this board in the shruthi/hardware_design/pcb directory of the source code hosted on github . The schematics in PDF format are here . We did our homework! A technical document explaining the pole-mixing technique is available here . Bill of materials Bill of materials . Note that the 2x 220R resistors at the far left of the big row of resistors are current-limiting resistors for the LEDs. 220R is recommended if you use standard green, red or yellow LEDs. For blue or white LEDs, a value between 1k and 10k is recommended. Assembly notes Assembly order We recommend you to proceed in the following order (from shortest to tallest parts): Resistors Diodes Ceramic capacitors IC sockets DC connector Transistors, 220pF styroflex capacitors Remaining capacitors Remaining connectors and trimmers Regulators Beware! a common mistake made by a handful of builders is to mix up the 100pF and 100nF caps. There are two 100pF caps, here is their location: After soldering, we recommend a bit of testing. The following image shows where the power pins are located on the first row of ICs. Red: +5V ; Green: ground ; Blue: -5V. Without any IC inserted and the board powered off, check that there is no short between a red and green pad ; a red and blue pad ; a green and red pad. Insert the LT1054, power the board, and check the voltages on the red and blue spots (with a green point used as a reference). You should read a value close to +5V and to -5V. Once this power supply check is done ; insert all ICs. You are ready to go! Don't forget to set the control board to the 4pm filter setting! A quick check if something goes wrong: Probe the signal at those points - their voltage is the signal 1, 2, 3, and 4-pole filtered. V/Oct Tuning The tuning procedure consists in making sure that the cutoff frequency of the filter follows a musical scale: increasing the cutoff setting on the Shruthi by 12 (or playing a note 1 octave = 12 semitones higher) should double the cutoff frequency. The filter board must be connected to the control board (through both the 1x8 and 1x6 connectors) to carry out this procedure. Dial the following settings on the Shruthi-1: Oscillator 1 shape: none Oscillator 2 shape: none Filter cutoff: 64 Filter resonance: 63 (maximum value) Filter envelope and LFO modulations: 0 Filter mode: LP4 Filter resonance flavour: liquid Play on the keyboard. You should hear a pure tone (sine wave), which does not come from the Shruthi-1 oscillators but from the filter self-oscillating. Adjust the V/Oct trimmer (the one close to the 1x8 connector) so that the intervals are respected - that is to say, when you play C3 then C4, you should hear two notes, maybe not C3s and C4s, but they must be one octave apart. If you do not have a good sense of pitch, you can try a software tuner like Tuna Pitch on OS X. If the filter is correctly tuned, you should be able to play the filter \"self oscillation tone\" across roughly 4 octaves with correct tuning. The second trimmer, labelled Range , adjusts the cutoff range of the filter. If V/Oct is correctly trimmed, the filter cutoff can span 10.66 octaves, that is to say the ratio between the maximum cutoff frequency and the minimum frequency is 1625. This allows the filter to cover the audio range (12 Hz to 19.5kHz). Note that the filter will behave a bit erratically at high resonance and very high cutoff values ; due to interactions between the resonance pure tone and high-frequency components due to aliasing or PWM modulation. The best way to adjust this setting is to use the patch 39, e-piano . Try to turn the trimmer to find a compromise between a very muffled sound ; and a sound that will sound too synthetic and bright. Light show Here are some suggestions for blinking LEDs lovers. Keep in mind that putting two LEDs of a different kind in parallel, under the same current-limiting resistor, will not work (that is to say, if you solder the SMT LED for the eye of the beast, you won't be able to connect another LED in parallel for the inside of the case or the front panel). The LEDs must have the same forward voltage (from 1.7V to 3V) to be put in parallel. Blinking eyes on the front panel + blinking eye on the board with SMT LED. Blinking eyes on the front panel with alternating pattern. Blinking LEDs to light up the inside of the board. License This circuit and PCB layout is made available under a cc-by-sa-3.0 license. Releases v0.2 Added a pad for a SMT LED in the eye of the creepy dog. Used standard (horizontally placed) resistors for the LED current limiting. Changed the resonance gain resistor value. v0.1 First prototype.","title":"4 pole-mission filter board"},{"location":"shruthi/4pm/#using-this-filter-board","text":"Please make sure that both the analog (CV1 to +5V) and digital (RX to +5V) ports of the filter and control boards are connected. Beware! Only the Shruthi-1 firmware v0.96 (or above) generates the digital signals required to control the mode selection and routing matrix. In addition, it is not possible to use simultaneously the 4-Pole Mission filter board and the Programmer since they will be both accessing at the same time the digital extension port. To activate the 4-Pole Mission filter board, select 4pm in the system settings page. If you don't do so, it is likely that it will emit glitchy filtered sounds everytime you navigate through the pages. When pressing the S2 switch (Filter page) a second time, a new page is displayed allowing you to configure the filter routing. Cut res mod fla 100 33 lp4 liq The parameters are the following: cut (cutoff) : Cutoff frequency, conveniently repeated on this page. res (resonance) : Resonance level, conveniently repeated on this page. mod (mode) : Filter mode. See below. fla (flavour) : Resonance flavour. See below. The following 15 filter modes are available: lp4 : 4-pole low-pass. lp3 : 3-pole low-pass. lp2 : 2-pole low-pass. lp1 : 1-pole low-pass. hp1 : 1-pole high-pass. hp2 : 2-pole high-pass. hp3 : 3-pole high-pass. bp2 : 2-pole band-pass. bp4 : 4-pole band-pass. notch : notch filter. phaser : phaser. h2lp : 2-pole high-pass and 1-pole low-pass (band-passlike). h3lp : 3-pole high-pass and 1-pole low-pass (band-passlike). n+lp : notch and 1-pole low-pass. p+lp : allpass and 1-pole low-pass. The 4 resonance flavours are: liquid : standard, close to the CEM or Roland designs (no loudness drop). ms : Korg-35 style soft limiting is introduced in the signal chain. wobbly : The 1-pole output is fed back to the filter cutoff frequency for a rubbery chaotic and modulated resonance. whacky : A combination of the ms and wobbly modes.","title":"Using this filter board"},{"location":"shruthi/4pm/#schematics-and-pcb","text":"You can find the Eagle files for this board in the shruthi/hardware_design/pcb directory of the source code hosted on github . The schematics in PDF format are here . We did our homework! A technical document explaining the pole-mixing technique is available here .","title":"Schematics and PCB"},{"location":"shruthi/4pm/#bill-of-materials","text":"Bill of materials . Note that the 2x 220R resistors at the far left of the big row of resistors are current-limiting resistors for the LEDs. 220R is recommended if you use standard green, red or yellow LEDs. For blue or white LEDs, a value between 1k and 10k is recommended.","title":"Bill of materials"},{"location":"shruthi/4pm/#assembly-notes","text":"","title":"Assembly notes"},{"location":"shruthi/4pm/#assembly-order","text":"We recommend you to proceed in the following order (from shortest to tallest parts): Resistors Diodes Ceramic capacitors IC sockets DC connector Transistors, 220pF styroflex capacitors Remaining capacitors Remaining connectors and trimmers Regulators Beware! a common mistake made by a handful of builders is to mix up the 100pF and 100nF caps. There are two 100pF caps, here is their location: After soldering, we recommend a bit of testing. The following image shows where the power pins are located on the first row of ICs. Red: +5V ; Green: ground ; Blue: -5V. Without any IC inserted and the board powered off, check that there is no short between a red and green pad ; a red and blue pad ; a green and red pad. Insert the LT1054, power the board, and check the voltages on the red and blue spots (with a green point used as a reference). You should read a value close to +5V and to -5V. Once this power supply check is done ; insert all ICs. You are ready to go! Don't forget to set the control board to the 4pm filter setting! A quick check if something goes wrong: Probe the signal at those points - their voltage is the signal 1, 2, 3, and 4-pole filtered.","title":"Assembly order"},{"location":"shruthi/4pm/#voct-tuning","text":"The tuning procedure consists in making sure that the cutoff frequency of the filter follows a musical scale: increasing the cutoff setting on the Shruthi by 12 (or playing a note 1 octave = 12 semitones higher) should double the cutoff frequency. The filter board must be connected to the control board (through both the 1x8 and 1x6 connectors) to carry out this procedure. Dial the following settings on the Shruthi-1: Oscillator 1 shape: none Oscillator 2 shape: none Filter cutoff: 64 Filter resonance: 63 (maximum value) Filter envelope and LFO modulations: 0 Filter mode: LP4 Filter resonance flavour: liquid Play on the keyboard. You should hear a pure tone (sine wave), which does not come from the Shruthi-1 oscillators but from the filter self-oscillating. Adjust the V/Oct trimmer (the one close to the 1x8 connector) so that the intervals are respected - that is to say, when you play C3 then C4, you should hear two notes, maybe not C3s and C4s, but they must be one octave apart. If you do not have a good sense of pitch, you can try a software tuner like Tuna Pitch on OS X. If the filter is correctly tuned, you should be able to play the filter \"self oscillation tone\" across roughly 4 octaves with correct tuning. The second trimmer, labelled Range , adjusts the cutoff range of the filter. If V/Oct is correctly trimmed, the filter cutoff can span 10.66 octaves, that is to say the ratio between the maximum cutoff frequency and the minimum frequency is 1625. This allows the filter to cover the audio range (12 Hz to 19.5kHz). Note that the filter will behave a bit erratically at high resonance and very high cutoff values ; due to interactions between the resonance pure tone and high-frequency components due to aliasing or PWM modulation. The best way to adjust this setting is to use the patch 39, e-piano . Try to turn the trimmer to find a compromise between a very muffled sound ; and a sound that will sound too synthetic and bright.","title":"V/Oct Tuning"},{"location":"shruthi/4pm/#light-show","text":"Here are some suggestions for blinking LEDs lovers. Keep in mind that putting two LEDs of a different kind in parallel, under the same current-limiting resistor, will not work (that is to say, if you solder the SMT LED for the eye of the beast, you won't be able to connect another LED in parallel for the inside of the case or the front panel). The LEDs must have the same forward voltage (from 1.7V to 3V) to be put in parallel.","title":"Light show"},{"location":"shruthi/4pm/#blinking-eyes-on-the-front-panel-blinking-eye-on-the-board-with-smt-led","text":"","title":"Blinking eyes on the front panel + blinking eye on the board with SMT LED."},{"location":"shruthi/4pm/#blinking-eyes-on-the-front-panel-with-alternating-pattern","text":"","title":"Blinking eyes on the front panel with alternating pattern."},{"location":"shruthi/4pm/#blinking-leds-to-light-up-the-inside-of-the-board","text":"","title":"Blinking LEDs to light up the inside of the board."},{"location":"shruthi/4pm/#license","text":"This circuit and PCB layout is made available under a cc-by-sa-3.0 license.","title":"License"},{"location":"shruthi/4pm/#releases","text":"","title":"Releases"},{"location":"shruthi/4pm/#v02","text":"Added a pad for a SMT LED in the eye of the creepy dog. Used standard (horizontally placed) resistors for the LED current limiting. Changed the resonance gain resistor value.","title":"v0.2"},{"location":"shruthi/4pm/#v01","text":"First prototype.","title":"v0.1"},{"location":"shruthi/4pm_build/","text":"Contents of the kit The kit contains: White control board and filter board PCBs White semi-opaque case White LCD module 8 white front-panel LEDs, 2 blue decorative LEDs Case hardware Board stacking hardware Switches, potentiometers, encoders with knobs/caps ; trimmers and resistor networks Quartz, audio capacitors Connectors (Audio, MIDI, DC power, board-to-board) Integrated circuits, including flashed MCU and 464 memories eeprom. Extra candy! Exclusive postcard drawn by Hannes Pasqualini The kit does not contain: Capacitors Resistors Semi-conductors (diodes, transistors) IC sockets The following document shows the BOM of the control board and the filter board. Parts to be purchased are in blue, parts included are listed in pale green. The parts not included in the kits can be purchased at: Reichelt Elektronik for European customers, for 9.55\u20ac . Note that Reichelt's minimum order amount is 10\u20ac, so spoil yourself with 45 cts of electro-goodies! Mouser for US customers, for $18.56 USD . Mouser does not have a minimum order quantity but the shipping fees to Europe might be high. Farnell, Digikey, using the listed references. Assembly If you are used to soldering Shruthi-1 black PCBs, you will be surprised by the white PCBs - they can get dirty with brown solder flux very easily! Two solutions to this problem: either use a sharp edge (chisel, small screwdriver) to scrap the flux from the surface of the board ; or avoid solder which contains/requires too much flux (it might mean going back to leaded solder if you don't have any other option). Digital control board Warning: The 8x 220R resistors on top of the control board set up the brightness of the LEDs. While 220R is fine for standard green/red/yellow LEDs, this is a bit too low for the bright white LEDs that come with the kit - even filtered through the semi-opaque case! We suggest instead a value in the 560R to 2.2k range. The BOM is specifying 1k and this is what we have used in our builds. Please follow these instructions , and don't forget to solder the 1x6 \"expansion connector\" on the bottom left of the control board. Filter board Please refer to this page for detailed information about the filter board . Enclosure Please wash the enclosure carefully before assembly. Beware of the stench! If you intend to put LEDs in the eyes of the front panel beast (who wouldn't?), the following procedure is recommended: Solder wires to the filter boards as described in the filter board assembly instruction ; solder LEDs to wires. Screw the filter board to the bottom panel, and add the 4 washers + nuts + spacers. Glue the two LEDs to the front panel, and clip their leads carefully. It is very important to reduce the risk of shorts caused by the long leads of the front panel LEDs touching the control board! Add the control board and screw it to the four spacers. Finish the assembly of the case. Kudos Case design by Frank Daniels . Illustrations by Hannes Pasqualini .","title":"4 Pole-mission kit"},{"location":"shruthi/4pm_build/#contents-of-the-kit","text":"The kit contains: White control board and filter board PCBs White semi-opaque case White LCD module 8 white front-panel LEDs, 2 blue decorative LEDs Case hardware Board stacking hardware Switches, potentiometers, encoders with knobs/caps ; trimmers and resistor networks Quartz, audio capacitors Connectors (Audio, MIDI, DC power, board-to-board) Integrated circuits, including flashed MCU and 464 memories eeprom. Extra candy! Exclusive postcard drawn by Hannes Pasqualini The kit does not contain: Capacitors Resistors Semi-conductors (diodes, transistors) IC sockets The following document shows the BOM of the control board and the filter board. Parts to be purchased are in blue, parts included are listed in pale green. The parts not included in the kits can be purchased at: Reichelt Elektronik for European customers, for 9.55\u20ac . Note that Reichelt's minimum order amount is 10\u20ac, so spoil yourself with 45 cts of electro-goodies! Mouser for US customers, for $18.56 USD . Mouser does not have a minimum order quantity but the shipping fees to Europe might be high. Farnell, Digikey, using the listed references.","title":"Contents of the kit"},{"location":"shruthi/4pm_build/#assembly","text":"If you are used to soldering Shruthi-1 black PCBs, you will be surprised by the white PCBs - they can get dirty with brown solder flux very easily! Two solutions to this problem: either use a sharp edge (chisel, small screwdriver) to scrap the flux from the surface of the board ; or avoid solder which contains/requires too much flux (it might mean going back to leaded solder if you don't have any other option).","title":"Assembly"},{"location":"shruthi/4pm_build/#digital-control-board","text":"Warning: The 8x 220R resistors on top of the control board set up the brightness of the LEDs. While 220R is fine for standard green/red/yellow LEDs, this is a bit too low for the bright white LEDs that come with the kit - even filtered through the semi-opaque case! We suggest instead a value in the 560R to 2.2k range. The BOM is specifying 1k and this is what we have used in our builds. Please follow these instructions , and don't forget to solder the 1x6 \"expansion connector\" on the bottom left of the control board.","title":"Digital control board"},{"location":"shruthi/4pm_build/#filter-board","text":"Please refer to this page for detailed information about the filter board .","title":"Filter board"},{"location":"shruthi/4pm_build/#enclosure","text":"Please wash the enclosure carefully before assembly. Beware of the stench! If you intend to put LEDs in the eyes of the front panel beast (who wouldn't?), the following procedure is recommended: Solder wires to the filter boards as described in the filter board assembly instruction ; solder LEDs to wires. Screw the filter board to the bottom panel, and add the 4 washers + nuts + spacers. Glue the two LEDs to the front panel, and clip their leads carefully. It is very important to reduce the risk of shorts caused by the long leads of the front panel LEDs touching the control board! Add the control board and screw it to the four spacers. Finish the assembly of the case.","title":"Enclosure"},{"location":"shruthi/4pm_build/#kudos","text":"Case design by Frank Daniels . Illustrations by Hannes Pasqualini .","title":"Kudos"},{"location":"shruthi/build/","text":"This section contains all the information allowing you to build your own Shruthi or hack its firmware. The Shruthi contains two section: a digital section (\"control board\" or \"digital board\"), containing the display, main microcontroller, switches and pots ; and an analog section (\"filter board\") hosting the VCF, VCA, input mixer and the output stage. Several variants of the filter board are available to provide a broad range of sounds. Control board Schematics, BOM, and assembly instructions for the control board . Schematics, BOM, and assembly instructions for the XT control board . Firmware . Filter board SMR4 mkII , a solid, Roland-ish, 4-pole filter. LP2+Delay , the combination of a MS-20 LPF and a low-fi digital delay. 4-Pole Mission , a 4-pole multimode filter inspired by the Oberheim Xpander. Dual SVF , the combination of two multimode 2-pole filters - in series or parallel. Polivoks filter . FX/Digital filter board - a nasty, crunchy, digital LPF/HPF and FX section. SMR4 filter board (predecessor of the SMR4 mkII). Mutable Instruments has stopped publishing any information regarding the use of \"vintage\" SSM/CEM/IR integrated circuits. Special editions To celebrate the launch of new filter boards, limited edition series of kits have been sold. Assembly notes for the 4-Pole Mission special edition. Assembly notes for the Yellow Magic special edition. Filter board assembly for the Midnight special edition (the control board is standard). Enclosure Shruthi XT enclosure assembly instructions . Here are some files to help you design your own case: Export of the Shruthi-1 control board silkscreen, with parts footprints. To be mirrored! Blueprint with 3D parts placement by nio101 A Sketchup export of nio101's 3D model SVG file for the acrylic case. Image of the Paisley pattern engraved by default on the cases. Licensing information Schematics and PCBs of the filter boards ; and documentation/analyses are released under a Creative Commons cc-by-sa license . Firmware code is released under a GPL3.0 License . Some of the (now deprecated) filter boards had been released under a cc-by-nc-sa license. The authors of the patch library are listed at the end of the manual .","title":"Home"},{"location":"shruthi/build/#control-board","text":"Schematics, BOM, and assembly instructions for the control board . Schematics, BOM, and assembly instructions for the XT control board . Firmware .","title":"Control board"},{"location":"shruthi/build/#filter-board","text":"SMR4 mkII , a solid, Roland-ish, 4-pole filter. LP2+Delay , the combination of a MS-20 LPF and a low-fi digital delay. 4-Pole Mission , a 4-pole multimode filter inspired by the Oberheim Xpander. Dual SVF , the combination of two multimode 2-pole filters - in series or parallel. Polivoks filter . FX/Digital filter board - a nasty, crunchy, digital LPF/HPF and FX section. SMR4 filter board (predecessor of the SMR4 mkII). Mutable Instruments has stopped publishing any information regarding the use of \"vintage\" SSM/CEM/IR integrated circuits.","title":"Filter board"},{"location":"shruthi/build/#special-editions","text":"To celebrate the launch of new filter boards, limited edition series of kits have been sold. Assembly notes for the 4-Pole Mission special edition. Assembly notes for the Yellow Magic special edition. Filter board assembly for the Midnight special edition (the control board is standard).","title":"Special editions"},{"location":"shruthi/build/#enclosure","text":"Shruthi XT enclosure assembly instructions . Here are some files to help you design your own case: Export of the Shruthi-1 control board silkscreen, with parts footprints. To be mirrored! Blueprint with 3D parts placement by nio101 A Sketchup export of nio101's 3D model SVG file for the acrylic case. Image of the Paisley pattern engraved by default on the cases.","title":"Enclosure"},{"location":"shruthi/build/#licensing-information","text":"Schematics and PCBs of the filter boards ; and documentation/analyses are released under a Creative Commons cc-by-sa license . Firmware code is released under a GPL3.0 License . Some of the (now deprecated) filter boards had been released under a cc-by-nc-sa license. The authors of the patch library are listed at the end of the manual .","title":"Licensing information"},{"location":"shruthi/delay/","text":"This filter boards combines a raw OTA-C 2-pole filter, combined with a classic lo-fi delay. Using this filter board Important! The Shruthi-1 control board needs to send specific digital control signals to drive this filter board. Make sure that both the analog (CV1 to +5V) and digital (RX to +5V) ports of the filter and control boards are connected. Make sure that the Shruthi-1 firmware v0.97 (or above) is installed, and that the fil (filter board) setting is set to dly on the system settings page. The delay settings can be accessed by pressing the S2 switch (Filter page) a second time: Tim lev fdb eq. 60 48 12 0 The delay parameters are the following: tim (time) : Delay time. The delay time is expressed in arbitrary units. Due to parts tolerance, the actual delay time might vary by a few percents, and this parameter is not accurately calibrated. The delay time typically ranges from 30ms (0) to 550ms (127). This parameter has a logarithmic scale, so the intermediate delay time (64) is close to 120ms. lev (level) : Delay level. This controls the wet signal level. No delay effect can be heard when this parameter is set to 0. fdb (feedback) : Delay feedback. This parameter controls the level of the signal taken at the output of the delay loop and fed back to the input. eq. (fdbck. eq) : Feedback tone color. A simple EQ circuit is present in the feedback loop. When this parameter is set to 0, the signal fed back into the delay is colored by a low-pass filter with a cutoff of 500 Hz. This causes the echoes to get darker and darker, an effect which is not unlike reverb with short delay times. When this parameter is set to 15, the signal fed back into the delay is colored by a high-pass filter with a cutoff of 500 Hz. This gives the echoes a \"dub\" flavor. A few observations about the lo-fi-ness of the delay: Using a longer delay time causes a degradation of the sound quality. Unlike traditional analog BBD delays, this degradation is not a bandwidth reduction, but rather a combination of a bandwidth reduction and the addition of quantization noise. This is due to the 1-bit sigma/delta conversion used in the PT2399. The frequency response of the filter circuit in place around the PT2399 has a slight bump near 3kHz. This means that when feedback level is too high, a 3kHz tone will build up into the delay line. Whether this build-up is musically useful or annoying is up to you to decide, but we deliberately allowed this to occur. Thus, some combinations of the fdb and eq. parameter, particularly with eq. set to a high value and fdb greater than 10, will cause pathological feedback to occur. In order to make quantization noise less audible when long delay times are used, the signal is heavily amplified in the mixer at the input of the delay line, with a soft-limiter in place to prevent clipping. Don't be surprised if the echoes are more \"fuzzy\" than the original signal. This is particularly noticeable with high feedback times when many echoes add up to each other, causing the soft-limiter to get into action and add harmonics to the sound. Schematics and PCB You can find the Eagle files for this board in the shruthi/hardware_design/pcb directory of the source code hosted on github . The schematics in PDF format are here . You can refer to Tim Stinchcombe's notes for an analysis of the filter core. Bill of materials Bill of materials. Important note to builders using self-sourced PT2399s. Some batches of PT2399s are more prone to clock latchup when short delay times are used (something that happens when the board is powered up and the delay time is initialized to its minimal value). If you encounter problems with the delay - such as the delay randomly not working when the board is powered on - simply replace R58 by a higher value, such as 27k or 30k. This has the side-effect of shifting up the delay times range. The PT2399s that come with the kits have been tested and do not require the modification (R58 = 22k as printed on the board). Assembly For parts placement, you can refer to this pdf file during assembly. Start with the smaller resistors: 6x 220R (red, red, black, black). 4x 470R (yellow, purple, black, black). 4x 2.2k (red, red, black, brown). 3x 4.7k (yellow, purple, black, brown). More resistors: 14x 10k (brown, black, black, red). 1x 12k (brown, red, black, red). 7x 15k (brow, green, black, red). 5x 22k (red, red, black, red). 1x 33k (orange, orange, black, red). 1x 47k (yellow, purple, black, red). 4x 68k (blue, grey, black, red). More resistors: 2x 100k (brown, black, black, orange). 1x 150k (brown, green, black, orange). 1x 330k (orange, orange, black, orange). 1x 1M (brown, black, black, yellow). Note that 3 bridges have been added on the IN, OUT and SW pads - since we don't use input/output gain pots and power switches. Add 6x 1N4148 diodes. They are polarized, make sure that the black ring follows the pattern silkscreened on the PCB. Add 2x 2.4V Zener diodes (this photo of an older board shows 2.7V, but the right value is 2.4V). They are polarized too. Add the polarity protection diode (1N4001 or 1N4004). It is polarized. Add the ceramic capacitors. They are not polarized: 1x 10pF (labelled 100). 2x 100pF (labelled 101). 1x 330pF (labelled 331). 6x 560pF (labelled 561). 20x 100nF (labelled 104). 4x 220nF (labelled 224). Add the IC sockets. Add the film capacitors (2x 33nF, 2x 1nF, 2x 6.8nF or 5.6nF). They are clearly labelled with their value, and are not polarized. Add the 4x 2N3906 transistors, and the 2N3904 transistor. Beware of their polarity! Add the electrolytic capacitors. The 6x 4.7uF capacitors are not polarized (a + and - are silkscreened on the PCB, don't bother with those). The 5x 100uF and 2x 220uF capacitors are polarized. The white stripe on the edge of the capacitor indicates the minus lead (which is also the shortest one). Here is another view of the board: Add the tantalum capacitor. A stripe indicates the + the lead. Add the 20k trimmer. Add the connectors and the 2 voltage regulators (7905 and 7805). Don't mix them up, these are different parts! You can finally insert all ICs The last step consists in tuning the filter, to make sure that the cutoff frequency of the filter follows a musical scale: increasing the cutoff setting on the Shruthi by 12 (or playing a note 1 octave = 12 semitones higher) should double the cutoff frequency. First, you'll need to assemble the filter and control boards. Maybe you can start screwing them together onto the bottom plate of the enclosure or you can just temporarily sandwich female 1x8 and 1x6 connectors between the boards for testing. Dial the following settings on the Shruthi-1: Oscillator 1 shape: none Oscillator 2 shape: none Filter cutoff: 64 Filter resonance: 63 (maximum value) Filter envelope and LFO modulations: 0 Play on the keyboard. You should hear a pure tone (sine wave), which does not come from the Shruthi-1 oscillators but from the filter self-oscillating. Adjust the V/Oct trimmer so that the intervals are respected - that is to say, when you play C3 then C4, you should hear two notes, maybe not C3s and C4s, but they must be one octave apart. If you do not have a good sense of pitch, you can try a software tuner like Tuna Pitch on OS X. If the filter is correctly tuned, you should be able to play the filter \"self oscillation tone\" across roughly 4 octaves with correct tuning. Troubleshooting RED: +5V BLUE: -5V 1 : Mixer output (raw oscillators signal) 2 : Filter output 3 : VCA output 4 : Delay mixer input (this is what goes into the delay: input signal + feedback) 5 : Delay output. This signal is referenced to +2.5V 6 : Output amp output. This is the sum of the signal at the output of the VCA + the delay output attenuated according to the dry/wet control. F : Filter cutoff expo converter input. Should swing by +/- 100mV when cutoff is adjusted. C : Delay clock. High frequency signal visible with a scope, should speed up/slow down proportionally to delay time. M : Wet signal attenuation CV. 0V when delay level is set to 63 ; 4.1V when delay level is set to 0. T : Delay time CV. 0V when delay time is set to 0 ; 1.0V when delay time is set to 127. License This circuit and PCB layout is made available under a cc-by-sa-3.0 license. Releases v0.2 First stable prototype. v0.1 used a digital pot to control the delay time and level and this was a rather bad design choice.","title":"Yellow magic filter board"},{"location":"shruthi/delay/#using-this-filter-board","text":"Important! The Shruthi-1 control board needs to send specific digital control signals to drive this filter board. Make sure that both the analog (CV1 to +5V) and digital (RX to +5V) ports of the filter and control boards are connected. Make sure that the Shruthi-1 firmware v0.97 (or above) is installed, and that the fil (filter board) setting is set to dly on the system settings page. The delay settings can be accessed by pressing the S2 switch (Filter page) a second time: Tim lev fdb eq. 60 48 12 0 The delay parameters are the following: tim (time) : Delay time. The delay time is expressed in arbitrary units. Due to parts tolerance, the actual delay time might vary by a few percents, and this parameter is not accurately calibrated. The delay time typically ranges from 30ms (0) to 550ms (127). This parameter has a logarithmic scale, so the intermediate delay time (64) is close to 120ms. lev (level) : Delay level. This controls the wet signal level. No delay effect can be heard when this parameter is set to 0. fdb (feedback) : Delay feedback. This parameter controls the level of the signal taken at the output of the delay loop and fed back to the input. eq. (fdbck. eq) : Feedback tone color. A simple EQ circuit is present in the feedback loop. When this parameter is set to 0, the signal fed back into the delay is colored by a low-pass filter with a cutoff of 500 Hz. This causes the echoes to get darker and darker, an effect which is not unlike reverb with short delay times. When this parameter is set to 15, the signal fed back into the delay is colored by a high-pass filter with a cutoff of 500 Hz. This gives the echoes a \"dub\" flavor. A few observations about the lo-fi-ness of the delay: Using a longer delay time causes a degradation of the sound quality. Unlike traditional analog BBD delays, this degradation is not a bandwidth reduction, but rather a combination of a bandwidth reduction and the addition of quantization noise. This is due to the 1-bit sigma/delta conversion used in the PT2399. The frequency response of the filter circuit in place around the PT2399 has a slight bump near 3kHz. This means that when feedback level is too high, a 3kHz tone will build up into the delay line. Whether this build-up is musically useful or annoying is up to you to decide, but we deliberately allowed this to occur. Thus, some combinations of the fdb and eq. parameter, particularly with eq. set to a high value and fdb greater than 10, will cause pathological feedback to occur. In order to make quantization noise less audible when long delay times are used, the signal is heavily amplified in the mixer at the input of the delay line, with a soft-limiter in place to prevent clipping. Don't be surprised if the echoes are more \"fuzzy\" than the original signal. This is particularly noticeable with high feedback times when many echoes add up to each other, causing the soft-limiter to get into action and add harmonics to the sound.","title":"Using this filter board"},{"location":"shruthi/delay/#schematics-and-pcb","text":"You can find the Eagle files for this board in the shruthi/hardware_design/pcb directory of the source code hosted on github . The schematics in PDF format are here . You can refer to Tim Stinchcombe's notes for an analysis of the filter core.","title":"Schematics and PCB"},{"location":"shruthi/delay/#bill-of-materials","text":"Bill of materials. Important note to builders using self-sourced PT2399s. Some batches of PT2399s are more prone to clock latchup when short delay times are used (something that happens when the board is powered up and the delay time is initialized to its minimal value). If you encounter problems with the delay - such as the delay randomly not working when the board is powered on - simply replace R58 by a higher value, such as 27k or 30k. This has the side-effect of shifting up the delay times range. The PT2399s that come with the kits have been tested and do not require the modification (R58 = 22k as printed on the board).","title":"Bill of materials"},{"location":"shruthi/delay/#assembly","text":"For parts placement, you can refer to this pdf file during assembly. Start with the smaller resistors: 6x 220R (red, red, black, black). 4x 470R (yellow, purple, black, black). 4x 2.2k (red, red, black, brown). 3x 4.7k (yellow, purple, black, brown). More resistors: 14x 10k (brown, black, black, red). 1x 12k (brown, red, black, red). 7x 15k (brow, green, black, red). 5x 22k (red, red, black, red). 1x 33k (orange, orange, black, red). 1x 47k (yellow, purple, black, red). 4x 68k (blue, grey, black, red). More resistors: 2x 100k (brown, black, black, orange). 1x 150k (brown, green, black, orange). 1x 330k (orange, orange, black, orange). 1x 1M (brown, black, black, yellow). Note that 3 bridges have been added on the IN, OUT and SW pads - since we don't use input/output gain pots and power switches. Add 6x 1N4148 diodes. They are polarized, make sure that the black ring follows the pattern silkscreened on the PCB. Add 2x 2.4V Zener diodes (this photo of an older board shows 2.7V, but the right value is 2.4V). They are polarized too. Add the polarity protection diode (1N4001 or 1N4004). It is polarized. Add the ceramic capacitors. They are not polarized: 1x 10pF (labelled 100). 2x 100pF (labelled 101). 1x 330pF (labelled 331). 6x 560pF (labelled 561). 20x 100nF (labelled 104). 4x 220nF (labelled 224). Add the IC sockets. Add the film capacitors (2x 33nF, 2x 1nF, 2x 6.8nF or 5.6nF). They are clearly labelled with their value, and are not polarized. Add the 4x 2N3906 transistors, and the 2N3904 transistor. Beware of their polarity! Add the electrolytic capacitors. The 6x 4.7uF capacitors are not polarized (a + and - are silkscreened on the PCB, don't bother with those). The 5x 100uF and 2x 220uF capacitors are polarized. The white stripe on the edge of the capacitor indicates the minus lead (which is also the shortest one). Here is another view of the board: Add the tantalum capacitor. A stripe indicates the + the lead. Add the 20k trimmer. Add the connectors and the 2 voltage regulators (7905 and 7805). Don't mix them up, these are different parts! You can finally insert all ICs The last step consists in tuning the filter, to make sure that the cutoff frequency of the filter follows a musical scale: increasing the cutoff setting on the Shruthi by 12 (or playing a note 1 octave = 12 semitones higher) should double the cutoff frequency. First, you'll need to assemble the filter and control boards. Maybe you can start screwing them together onto the bottom plate of the enclosure or you can just temporarily sandwich female 1x8 and 1x6 connectors between the boards for testing. Dial the following settings on the Shruthi-1: Oscillator 1 shape: none Oscillator 2 shape: none Filter cutoff: 64 Filter resonance: 63 (maximum value) Filter envelope and LFO modulations: 0 Play on the keyboard. You should hear a pure tone (sine wave), which does not come from the Shruthi-1 oscillators but from the filter self-oscillating. Adjust the V/Oct trimmer so that the intervals are respected - that is to say, when you play C3 then C4, you should hear two notes, maybe not C3s and C4s, but they must be one octave apart. If you do not have a good sense of pitch, you can try a software tuner like Tuna Pitch on OS X. If the filter is correctly tuned, you should be able to play the filter \"self oscillation tone\" across roughly 4 octaves with correct tuning.","title":"Assembly"},{"location":"shruthi/delay/#troubleshooting","text":"RED: +5V BLUE: -5V 1 : Mixer output (raw oscillators signal) 2 : Filter output 3 : VCA output 4 : Delay mixer input (this is what goes into the delay: input signal + feedback) 5 : Delay output. This signal is referenced to +2.5V 6 : Output amp output. This is the sum of the signal at the output of the VCA + the delay output attenuated according to the dry/wet control. F : Filter cutoff expo converter input. Should swing by +/- 100mV when cutoff is adjusted. C : Delay clock. High frequency signal visible with a scope, should speed up/slow down proportionally to delay time. M : Wet signal attenuation CV. 0V when delay level is set to 63 ; 4.1V when delay level is set to 0. T : Delay time CV. 0V when delay time is set to 0 ; 1.0V when delay time is set to 127.","title":"Troubleshooting"},{"location":"shruthi/delay/#license","text":"This circuit and PCB layout is made available under a cc-by-sa-3.0 license.","title":"License"},{"location":"shruthi/delay/#releases","text":"","title":"Releases"},{"location":"shruthi/delay/#v02","text":"First stable prototype. v0.1 used a digital pot to control the delay time and level and this was a rather bad design choice.","title":"v0.2"},{"location":"shruthi/digital/","text":"Schematics and PCB The digital/control board hosts the main microcontroller (ATMega644p), the switches/pots/LEDs, the LCD display, and the MIDI interface. It is powered by a regulated 5V supply located on the analog filter board. Here's a view of the board: \\ It has parts on both sides, but there's no overlap between the two regions, so when there's parts on one side, there won't be much action on the other side! The LCD has to be soldered last, since it will cover the ATMega644p pins. Otherwise you can start from whichever side you prefer. You can find the Eagle files for this board in the shruthi/hardware_design/pcb directory of the source code hosted on github . The schematics in PDF format are here . Bill of materials Full-page version Some notes: Resistors don't have to be 1% metal film, 5% carbon are fine for this board. But since there are 1% resistors with the same values in the filter board, it's a better deal to get 1% for everything. The reference from Farnell is for a 1+8 network that will have to be cut (ouch) to get the required network of 6 resistors. The reference from Digikey is a 1+7 network. The quartz sold on Reichelt have a surprisingly high capacitance (32pF). Buy at your own risks! Parts to avoid. Reichelt ST 24C64 BN6 . Slow as molasses. If you really insist on using it, you need a hardware fix (increase the value of the 2.2k pull-ups to 6.8k or 10k) and a software fix (change the write delay to 10ms, set the I2C speed to 25kHz). Reichelt RK09K113-LIN10K . Do not have a D-shaped shaft. The end of the shaft is supposed to look like a miniknob. Crystalfontz LCDs . Very clean and bright display at a cost: they draw too much current. You need to replace R20 by a 8R resistor, but then the display dim and there's some heavy \"motorboating\" in the sound whenever you play a note, unless you put a beefier power supply (a 500mA rated wall-wart might not be enough, worked well with 650mA or 1500mA wall-warts). Displaytech LCDs . Their metallic, conducting frame might cause shorts between the pins of the ATMega644p beneath. Assembly instructions If you are building a complete Shruthi-1 kit, it is recommended to build the filter board (or at least its power supply section) before starting this board. Getting ready Locate the following parts/bags from the kit: Some equipment you'll need: Soldering iron + solder (nothing fancy, a 15 or 20W will do). Cutters. We assume you know soldering. If you don't, look first at this tutorial . We highly recommend you to purchase a simple kit from adafruit or sparkfun to practice on something that you won't regret breaking. A last word: be patient! we know you're just a couple of hours away from playing your Shruthi-1, but if you do something stupid, those hours will turn into days or weeks. DISCLAIMER: We are not responsible for anything wrong (including electric shocks, malfunctions, fires, accidents involving a soldering iron) that might happen during the assembly of the kit. Everything you do while assembling the kit is at your own risks. Step 1 First, we will populate the bottom side of the board - starting by the shortest and smallest parts. Add the following resistors: R20 (68R, blue, grey, black, gold). This resistor sets the brightness of the LCD display. If you find a smaller resistor in your kit, such as 3.3 ohms (orange, orange, black, silver), instead of 68 ohms, use it there! This is because different LCD displays have different requirements in terms of brightness. R19 and R18 (220R, red, red, black, black) R1, R14 (10k, brown, black, black, red) R16 and R15 (2k2, red, red, black, brown) Step 2 Then, add the capacitors. These are small ceramic capacitors, and thus, they are not polarized. C1, C4, C8, C5 (100nF caps, not polarized). The latest revision of the board (v0.7) has two more of those, C9 and C10. C6, C7 (18pF caps, not polarized) The 18pF capacitors might look different from those on the picture, but you can recognize them with the 180 or 18 label. 100nF capacitors are labelled 104 . Step 3 Finally, add the diode D1, which is polarized . The black ring of the diode should point towards the MIDI connectors. Step 4 Add: The 20MHz quartz at the position labelled Q1. The trimmer (resistor adjustable with a screwdriver) R21. You can mount it in either orientations. Step 5 Add: The 3 IC sockets (2 DIL8 and 1 DIL40). Make sure that the notch is in the same direction as printed on the PCB. The 2 MIDI connectors. You can start by the biggest pad at the center to keep the part in place, then solder the other pads. At this step, you'll need to carefully cut, on the other side of the board, the leads of the parts (including the IC socket) in the area covered by the LCD module. Since there are a few SMT parts at the bottom of the LCD module PCB, you'll have to make sure that the leads are cut as short as possible to avoid unwanted shorts between the two boards. Step 6 <div class=\"warning\">The 220R resistors soldered at this step are current-limiting resistors for the LEDs - they set the brightness of the LEDs. The 220R value printed on the circuit board is suitable for standard low-intensity green, yellow or red LEDs - and a lower value could indeed damage the LEDs. For blue or white LEDs, a higher value, such as 1k, must be used.</div> Now insert and solder the small parts on the top side of the board: R2 to R9 (220R ; red, red, black, black - or if your kit is supplied with them: 1k ; brown, black, black, brown). C2, C3 (100nF caps marked 104 , not polarized). Step 7 Insert and solder the following parts: IC2 and IC3 (74hc165 and 74hc595). If you have an older version of the kits, these have to be soldered directly on the PCB - in which case you have to be very very careful about the orientation of the chips (the notch on the PCB must be on the same side as the notch on the chip), and of course not swapping them. The new batches of kits have IC sockets, so just solder the sockets here; and socket the chips. RN1 (10k). This part is a network of 6 resistors sharing a common pin. It is polarized : The common pin is marked by a white dot. This dot should be near the \"RN1\" and \"-\" markings of the board. Step 8 Add the LEDs. They are polarized , the shortest lead and flat side of the LED (-) are on the side of the switches ; the longest lead and rounded side of the LED (+) are on the side of the resistors. Note that the colors and types of LEDs vary from batch to batch of kits - but no matter how they look, they need to be soldered the same way! Step 9 Solder the 8-pin male connector through which the two boards will be connected. Here is a photo of a finished assembly, with the part to solder highlighted: The connection between the two boards is ensured by a 8-pin female header on the filter board, a 8-pin female header stacked onto it, and the connector you have just soldered. You might need to clip the leads of the header in the middle. \\ Step 10 Add the controls - the 4 potentiometers, the encoder and the 6 switches. If the 2 legs on the side of the potentiometers do not fit in the holes on the PCB, don't panic! There is a wide tolerance in the PCB plating process which can cause an excessive accumulation of conductor on the PCB holes. File the holes until the potentiometers fit. It is not recommended to leave these 2 joints unsoldered - they help keeping the potentiometers solidly attached to the PCB. Step 11: a first test! Even if the LCD screen is not soldered yet, you can already try to power up the Shruthi-1. Indeed, it is highly recommended to do so, since the LCD module will later cover some solder pads, preventing you to fix a bad solder point on the MCU. For now, the pads are still apparent, so it's a good time to make a first test. <div class=\"error\">When temporarily connecting the control board to a filter board, without any spacer in place, make sure that the solder points at the bottom of the control board do not touch parts on the filter board, especially the metal tab of the regulators. This could easily short and damage parts on the control board.</div> Insert the 3 ICs (ATMega644p, AT24C and 6N137) in their sockets on the bottom side of the board. Be careful with their orientation . Connect a filter board, or, if you have not assembled the filter, a 5V power supply to +5V and GND. The Shruthi-1 should boot and the 3rd and 7th LED should be lit. Press each of the switches several times to verify that the Shruthi reacts to key presses, and that all the LEDs are lit. Rotating the encoder should scroll through the different pages - which will be shown as different LED patterns. You can even connect it to a MIDI keyboard and an amp/mixer to play it. Step 12 If all sounds good, insert the 16x1 connector between the LCD module and the PCB, and solder it first to the LCD module, and then to the main PCB. Be careful and keep the module aligned with the PCB! As you can see on this picture, the PCB of the LCD module is maintained at a height of 2.5mm above the main PCB by the black plastic part of the 16x1 connector. No need to add some extra height. The 6 black \"feet\" of the LCD module rest on the PCB. Don't worry about shorts: the material of the LCD bezel does not conduct. Step 13 Finally, adjust the contrast of the LCD: Turn the screw of the trimpot R21 counterclockwise until you have reached the end. Power the Shruthi-1 and check that the display is very bright but illegible. Turn the trimpot a few turns clockwise (it really depends on the LCD type - from one or two turns for the red ones, to four or five for the blue ones). Step 14 If your filter board is ready, you can now add the spacers and screw the two boards together. If you are using an \"official\" plexiglass case, start with the following steps: Remove the protective sheets from the plexiglass panels Clean the panels to remove the dust Try putting together the 6 panels and check that the case does not appear bent / warped. If this happens, swap (inside <-> outside) the bottom panel ; then the side panels. The heat of the laser might bend the material by a fraction of mm ; so the concave side must be on the inside. Notice the little dot engraved on the bottom panel. It indicates the front side Ready to go? Start assembling the \"sandwich\" from the bottom to the top: The composition of the \"sandwich\" is, from bottom to top: 12mm screw (15mm in some kits) Bottom enclosure panel 2mm nut Filter PCB Washer 22mm Spacer (older kits have a 20mm spacer and four extra 2mm nuts) Digital/control PCB 6mm screw Troubleshooting When the digital board is powered, the LEDs show a x-x-x-x- pattern and the unit seems to freeze. This could be one of the following problems: Bad solder point on the 74hc165 or the resistor network. Damaged 74hc165 (this might happen if the solder points under the digital board made contact with another part on the filter board). Swapped 74hc165 and 74hc595. The Shruthi seems to boot correctly (LEDs 3 and 7 are lit), but the display is empty. If the display shows a filled line (16 7x5 filled squares) and an empty line: there's a communication problem between the LCD module and the MCU. One of the LCD module pins is not correctly soldered or is shorted with its neighbor. In last resort check the continuity between the pins of the MCU that are connected to the LCD. If you observe shorts between some of those pins, it's likely that the AVR has been damaged by an electrostatic discharge. If the display shows 2 filled lines: the contrast is set to its maximum value, in the wrong direction. Turn the R21 trimmer by about 5 turns (you'll notice it if you turn it in the wrong direction \u2013 you'll have reached the end of the trimmer and a slight click will be heard at each turn). If the display shows nothing: the contrast is set to an incorrect value. Try adjusting the R21 trimmer until you see the text or the filled line. Check for bad joint in the contrast trimpot \u2013 in particular check that the GND pin is correctly soldered. Grounded points are more difficult to solder due to the ground-plane absorbing the heat. Remember that even if the MCU is dead, blank, or removed from its socket, the LCD module will show a filled line. If you don't see the filled line or the splash screen, there's a problem with the contrast setting. MIDI does not work. When a MIDI note arrives in the Shruthi on the right channel, it shows a note icon in a corner of the screen. The first thing is to make sure that the controller/keyboard sends on the right channel, 1 by default. Other things to check: Is the 6N137 correctly oriented? Check that it has not been swapped with the eeprom chip. Check that pin 5 of the 6N137 is continuous with ground, and pin 8 is at a voltage of +5V. Check that pin 6 is at +5V, and drops to a lower voltage when a large string of MIDI messages is sent (for example, wiggle the pitch bend lever). The parameter values seem to be \"flickering\" \u2013 as if the pots were constantly tweaked by an invisible and ghostly hand. Your power supply is not providing enough current, and this cause oscillations on the +5V rail. Try a different power supply with a higher current rating. Kudos Todd Bailey for useful board layout reviews! Releases v0.8 Rounded corners Logo and text redesign v0.6, v0.7 Changed position of ISP header and modified routing of clock lines to reduce digital noise. Added an extra bypass cap on the MCU RST line, and near the digital supply pin for extra stability. Added extension port for external programmer or LED array. Added solder pads for MIDI connector. Changed MIDI pull-up resistor to 10k. Changed labeling of ports. v0.5 Original release.","title":"Digital control board"},{"location":"shruthi/digital/#schematics-and-pcb","text":"The digital/control board hosts the main microcontroller (ATMega644p), the switches/pots/LEDs, the LCD display, and the MIDI interface. It is powered by a regulated 5V supply located on the analog filter board. Here's a view of the board: \\ It has parts on both sides, but there's no overlap between the two regions, so when there's parts on one side, there won't be much action on the other side! The LCD has to be soldered last, since it will cover the ATMega644p pins. Otherwise you can start from whichever side you prefer. You can find the Eagle files for this board in the shruthi/hardware_design/pcb directory of the source code hosted on github . The schematics in PDF format are here .","title":"Schematics and PCB"},{"location":"shruthi/digital/#bill-of-materials","text":"Full-page version Some notes: Resistors don't have to be 1% metal film, 5% carbon are fine for this board. But since there are 1% resistors with the same values in the filter board, it's a better deal to get 1% for everything. The reference from Farnell is for a 1+8 network that will have to be cut (ouch) to get the required network of 6 resistors. The reference from Digikey is a 1+7 network. The quartz sold on Reichelt have a surprisingly high capacitance (32pF). Buy at your own risks!","title":"Bill of materials"},{"location":"shruthi/digital/#parts-to-avoid","text":"Reichelt ST 24C64 BN6 . Slow as molasses. If you really insist on using it, you need a hardware fix (increase the value of the 2.2k pull-ups to 6.8k or 10k) and a software fix (change the write delay to 10ms, set the I2C speed to 25kHz). Reichelt RK09K113-LIN10K . Do not have a D-shaped shaft. The end of the shaft is supposed to look like a miniknob. Crystalfontz LCDs . Very clean and bright display at a cost: they draw too much current. You need to replace R20 by a 8R resistor, but then the display dim and there's some heavy \"motorboating\" in the sound whenever you play a note, unless you put a beefier power supply (a 500mA rated wall-wart might not be enough, worked well with 650mA or 1500mA wall-warts). Displaytech LCDs . Their metallic, conducting frame might cause shorts between the pins of the ATMega644p beneath.","title":"Parts to avoid."},{"location":"shruthi/digital/#assembly-instructions","text":"If you are building a complete Shruthi-1 kit, it is recommended to build the filter board (or at least its power supply section) before starting this board.","title":"Assembly instructions"},{"location":"shruthi/digital/#getting-ready","text":"Locate the following parts/bags from the kit: Some equipment you'll need: Soldering iron + solder (nothing fancy, a 15 or 20W will do). Cutters. We assume you know soldering. If you don't, look first at this tutorial . We highly recommend you to purchase a simple kit from adafruit or sparkfun to practice on something that you won't regret breaking. A last word: be patient! we know you're just a couple of hours away from playing your Shruthi-1, but if you do something stupid, those hours will turn into days or weeks. DISCLAIMER: We are not responsible for anything wrong (including electric shocks, malfunctions, fires, accidents involving a soldering iron) that might happen during the assembly of the kit. Everything you do while assembling the kit is at your own risks.","title":"Getting ready"},{"location":"shruthi/digital/#step-1","text":"First, we will populate the bottom side of the board - starting by the shortest and smallest parts. Add the following resistors: R20 (68R, blue, grey, black, gold). This resistor sets the brightness of the LCD display. If you find a smaller resistor in your kit, such as 3.3 ohms (orange, orange, black, silver), instead of 68 ohms, use it there! This is because different LCD displays have different requirements in terms of brightness. R19 and R18 (220R, red, red, black, black) R1, R14 (10k, brown, black, black, red) R16 and R15 (2k2, red, red, black, brown)","title":"Step 1"},{"location":"shruthi/digital/#step-2","text":"Then, add the capacitors. These are small ceramic capacitors, and thus, they are not polarized. C1, C4, C8, C5 (100nF caps, not polarized). The latest revision of the board (v0.7) has two more of those, C9 and C10. C6, C7 (18pF caps, not polarized) The 18pF capacitors might look different from those on the picture, but you can recognize them with the 180 or 18 label. 100nF capacitors are labelled 104 .","title":"Step 2"},{"location":"shruthi/digital/#step-3","text":"Finally, add the diode D1, which is polarized . The black ring of the diode should point towards the MIDI connectors.","title":"Step 3"},{"location":"shruthi/digital/#step-4","text":"Add: The 20MHz quartz at the position labelled Q1. The trimmer (resistor adjustable with a screwdriver) R21. You can mount it in either orientations.","title":"Step 4"},{"location":"shruthi/digital/#step-5","text":"Add: The 3 IC sockets (2 DIL8 and 1 DIL40). Make sure that the notch is in the same direction as printed on the PCB. The 2 MIDI connectors. You can start by the biggest pad at the center to keep the part in place, then solder the other pads. At this step, you'll need to carefully cut, on the other side of the board, the leads of the parts (including the IC socket) in the area covered by the LCD module. Since there are a few SMT parts at the bottom of the LCD module PCB, you'll have to make sure that the leads are cut as short as possible to avoid unwanted shorts between the two boards.","title":"Step 5"},{"location":"shruthi/digital/#step-6","text":"<div class=\"warning\">The 220R resistors soldered at this step are current-limiting resistors for the LEDs - they set the brightness of the LEDs. The 220R value printed on the circuit board is suitable for standard low-intensity green, yellow or red LEDs - and a lower value could indeed damage the LEDs. For blue or white LEDs, a higher value, such as 1k, must be used.</div> Now insert and solder the small parts on the top side of the board: R2 to R9 (220R ; red, red, black, black - or if your kit is supplied with them: 1k ; brown, black, black, brown). C2, C3 (100nF caps marked 104 , not polarized).","title":"Step 6"},{"location":"shruthi/digital/#step-7","text":"Insert and solder the following parts: IC2 and IC3 (74hc165 and 74hc595). If you have an older version of the kits, these have to be soldered directly on the PCB - in which case you have to be very very careful about the orientation of the chips (the notch on the PCB must be on the same side as the notch on the chip), and of course not swapping them. The new batches of kits have IC sockets, so just solder the sockets here; and socket the chips. RN1 (10k). This part is a network of 6 resistors sharing a common pin. It is polarized : The common pin is marked by a white dot. This dot should be near the \"RN1\" and \"-\" markings of the board.","title":"Step 7"},{"location":"shruthi/digital/#step-8","text":"Add the LEDs. They are polarized , the shortest lead and flat side of the LED (-) are on the side of the switches ; the longest lead and rounded side of the LED (+) are on the side of the resistors. Note that the colors and types of LEDs vary from batch to batch of kits - but no matter how they look, they need to be soldered the same way!","title":"Step 8"},{"location":"shruthi/digital/#step-9","text":"Solder the 8-pin male connector through which the two boards will be connected. Here is a photo of a finished assembly, with the part to solder highlighted: The connection between the two boards is ensured by a 8-pin female header on the filter board, a 8-pin female header stacked onto it, and the connector you have just soldered. You might need to clip the leads of the header in the middle. \\","title":"Step 9"},{"location":"shruthi/digital/#step-10","text":"Add the controls - the 4 potentiometers, the encoder and the 6 switches. If the 2 legs on the side of the potentiometers do not fit in the holes on the PCB, don't panic! There is a wide tolerance in the PCB plating process which can cause an excessive accumulation of conductor on the PCB holes. File the holes until the potentiometers fit. It is not recommended to leave these 2 joints unsoldered - they help keeping the potentiometers solidly attached to the PCB.","title":"Step 10"},{"location":"shruthi/digital/#step-11-a-first-test","text":"Even if the LCD screen is not soldered yet, you can already try to power up the Shruthi-1. Indeed, it is highly recommended to do so, since the LCD module will later cover some solder pads, preventing you to fix a bad solder point on the MCU. For now, the pads are still apparent, so it's a good time to make a first test. <div class=\"error\">When temporarily connecting the control board to a filter board, without any spacer in place, make sure that the solder points at the bottom of the control board do not touch parts on the filter board, especially the metal tab of the regulators. This could easily short and damage parts on the control board.</div> Insert the 3 ICs (ATMega644p, AT24C and 6N137) in their sockets on the bottom side of the board. Be careful with their orientation . Connect a filter board, or, if you have not assembled the filter, a 5V power supply to +5V and GND. The Shruthi-1 should boot and the 3rd and 7th LED should be lit. Press each of the switches several times to verify that the Shruthi reacts to key presses, and that all the LEDs are lit. Rotating the encoder should scroll through the different pages - which will be shown as different LED patterns. You can even connect it to a MIDI keyboard and an amp/mixer to play it.","title":"Step 11: a first test!"},{"location":"shruthi/digital/#step-12","text":"If all sounds good, insert the 16x1 connector between the LCD module and the PCB, and solder it first to the LCD module, and then to the main PCB. Be careful and keep the module aligned with the PCB! As you can see on this picture, the PCB of the LCD module is maintained at a height of 2.5mm above the main PCB by the black plastic part of the 16x1 connector. No need to add some extra height. The 6 black \"feet\" of the LCD module rest on the PCB. Don't worry about shorts: the material of the LCD bezel does not conduct.","title":"Step 12"},{"location":"shruthi/digital/#step-13","text":"Finally, adjust the contrast of the LCD: Turn the screw of the trimpot R21 counterclockwise until you have reached the end. Power the Shruthi-1 and check that the display is very bright but illegible. Turn the trimpot a few turns clockwise (it really depends on the LCD type - from one or two turns for the red ones, to four or five for the blue ones).","title":"Step 13"},{"location":"shruthi/digital/#step-14","text":"If your filter board is ready, you can now add the spacers and screw the two boards together. If you are using an \"official\" plexiglass case, start with the following steps: Remove the protective sheets from the plexiglass panels Clean the panels to remove the dust Try putting together the 6 panels and check that the case does not appear bent / warped. If this happens, swap (inside <-> outside) the bottom panel ; then the side panels. The heat of the laser might bend the material by a fraction of mm ; so the concave side must be on the inside. Notice the little dot engraved on the bottom panel. It indicates the front side Ready to go? Start assembling the \"sandwich\" from the bottom to the top: The composition of the \"sandwich\" is, from bottom to top: 12mm screw (15mm in some kits) Bottom enclosure panel 2mm nut Filter PCB Washer 22mm Spacer (older kits have a 20mm spacer and four extra 2mm nuts) Digital/control PCB 6mm screw","title":"Step 14"},{"location":"shruthi/digital/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"shruthi/digital/#when-the-digital-board-is-powered-the-leds-show-a-x-x-x-x-pattern-and-the-unit-seems-to-freeze","text":"This could be one of the following problems: Bad solder point on the 74hc165 or the resistor network. Damaged 74hc165 (this might happen if the solder points under the digital board made contact with another part on the filter board). Swapped 74hc165 and 74hc595.","title":"When the digital board is powered, the LEDs show a x-x-x-x- pattern and the unit seems to freeze."},{"location":"shruthi/digital/#the-shruthi-seems-to-boot-correctly-leds-3-and-7-are-lit-but-the-display-is-empty","text":"If the display shows a filled line (16 7x5 filled squares) and an empty line: there's a communication problem between the LCD module and the MCU. One of the LCD module pins is not correctly soldered or is shorted with its neighbor. In last resort check the continuity between the pins of the MCU that are connected to the LCD. If you observe shorts between some of those pins, it's likely that the AVR has been damaged by an electrostatic discharge. If the display shows 2 filled lines: the contrast is set to its maximum value, in the wrong direction. Turn the R21 trimmer by about 5 turns (you'll notice it if you turn it in the wrong direction \u2013 you'll have reached the end of the trimmer and a slight click will be heard at each turn). If the display shows nothing: the contrast is set to an incorrect value. Try adjusting the R21 trimmer until you see the text or the filled line. Check for bad joint in the contrast trimpot \u2013 in particular check that the GND pin is correctly soldered. Grounded points are more difficult to solder due to the ground-plane absorbing the heat. Remember that even if the MCU is dead, blank, or removed from its socket, the LCD module will show a filled line. If you don't see the filled line or the splash screen, there's a problem with the contrast setting.","title":"The Shruthi seems to boot correctly (LEDs 3 and 7 are lit), but the display is empty."},{"location":"shruthi/digital/#midi-does-not-work","text":"When a MIDI note arrives in the Shruthi on the right channel, it shows a note icon in a corner of the screen. The first thing is to make sure that the controller/keyboard sends on the right channel, 1 by default. Other things to check: Is the 6N137 correctly oriented? Check that it has not been swapped with the eeprom chip. Check that pin 5 of the 6N137 is continuous with ground, and pin 8 is at a voltage of +5V. Check that pin 6 is at +5V, and drops to a lower voltage when a large string of MIDI messages is sent (for example, wiggle the pitch bend lever).","title":"MIDI does not work."},{"location":"shruthi/digital/#the-parameter-values-seem-to-be-flickering-as-if-the-pots-were-constantly-tweaked-by-an-invisible-and-ghostly-hand","text":"Your power supply is not providing enough current, and this cause oscillations on the +5V rail. Try a different power supply with a higher current rating.","title":"The parameter values seem to be \"flickering\" \u2013 as if the pots were constantly tweaked by an invisible and ghostly hand."},{"location":"shruthi/digital/#kudos","text":"Todd Bailey for useful board layout reviews!","title":"Kudos"},{"location":"shruthi/digital/#releases","text":"","title":"Releases"},{"location":"shruthi/digital/#v08","text":"Rounded corners Logo and text redesign","title":"v0.8"},{"location":"shruthi/digital/#v06-v07","text":"Changed position of ISP header and modified routing of clock lines to reduce digital noise. Added an extra bypass cap on the MCU RST line, and near the digital supply pin for extra stability. Added extension port for external programmer or LED array. Added solder pads for MIDI connector. Changed MIDI pull-up resistor to 10k. Changed labeling of ports.","title":"v0.6, v0.7"},{"location":"shruthi/digital/#v05","text":"Original release.","title":"v0.5"},{"location":"shruthi/digital_xt/","text":"Assembly instructions We assume you know soldering. If you don't, look first at this tutorial . DISCLAIMER: We are not responsible for anything wrong (including electric shocks, malfunctions, fires, accidents involving a soldering iron) that might happen during the assembly of the kit. Everything you do while assembling the kit is at your own risks. Note: There are a few mechanical changes (number, position and diameter of holes) between the production version of the board and the one shown in these instructions. This has no impact on the assembly procedure; and the parts and circuits used are the same. Resistors, first decade Add 11x 220R resistors (red, red, black, black, brown). Resistors are not polarized, but following our illustrations will give you bonus point if you ever request help on the forum. R15, R16 and R17 are used for current limiting in the MIDI I/O, their values are chosen to match the MIDI specifications. R31 to R38 are current-limiting resistors for the LEDs. You can increase their value to 1.0k or even 4.7k if you use blue or white LEDs. Flat top LEDs just look better given the 4.6mm thickness of the plexi & alu top panels. Resistors, second decade Add 2x 2.2k resistors (red, red, black, brown, brown) in positions R9 and R10. These are pull-up resistors for the I2C bus that connects the processor and the EEPROM memory storing the patches. Resistors, third decade Add 2x 10k resistors (brown, black, black, red, brown) in positions R18 and R19. R18 is part of the MIDI reception circuit (pull-up for the optocoupler output), while R19 keeps the RESET line of the microcontroller at a high logic level to keep it running. Bridges The volume pot R8 on the top right corner of the panel can modify the volume in two ways: digitally, by reducing the level of the VCA envelope; or in the analog domain by directly attenuating the final output level. The first option does not require messy wires and is the simplest to build - its drawback is that a loss of resolution in the VCA envelope can be heard at low volumes. The second option requires wiring - which can also cause noise and catch nasty signals if done wrong. Digital volume control Solder 3 bridges like this: They can be made of discarded resistor leads. Analog volume control Bridge the top right and top center pins (JP1) ; and solder wires to the 3 pads above the pot (JP2). Connect these wires to the 3 pads near the filter board's output jack. Diode Add the diode 1N4148 in position D1. The diode is polarized, the ring of the diode must be on the same side as the ring on the diagram printed on the board. This diode protects the MIDI in circuitry (optocoupler) from badly built MIDI cables or MIDI out circuitry. Quartz and friends Add the 20 MHz quartz (not polarized) and the two 18pF ceramic caps that surround it in positions C11 and C12. They are not polarized and the value 180 is printed on them (180 = \"18 with 0 extra zero pF = 18pF\"). These three parts form - with the help of some circuitry inside the microcontroller - an ultra-stable 20 MHz oscillator which defines the speed at which the microcontroller runs. The quartz is extremely precise and barely sensitive to temperature changes - this is why digital oscillators are stable and do not need tuning. Bypass capacitors Solder the 3x 100nF ceramic capacitors on the bottom side of the board. The number \"104\" is printed on them (10 x 10\\^4 pF = 100nF). These capacitors are not polarized. They are known as \"decoupling capacitors\" . Their role is to provide a local reservoir of energy to an integrated circuit (the microcontroller). This improves the stability of the power supply line, and ultimately prevents cross-talk or unexpected coupling/glitches between integrated circuits. Solder the 11x 100nF ceramic capacitors on the other side of the board, in positions C1, C2, C3, C5, C6, C7, C8, C9, C10, C13 and C14. They are also decoupling capacitors, working for the ICs they are located next to. Resistor networks Add 3x resistor networks in positions RN1, RN2, RN3. The code name of these parts is 9X-1-103LF, which means \"this is a 9-pin part made of many resistors sharing 1 common pin, each of them having a resistance of 10e3 = 10k\". These parts are polarized! The dot printed on the network indicates pin 1, which must be on the same side as the 1 printed on the PCB. In the Shruthi circuits, these parts play a role in detecting button presses - if a group of buttons is stuck it is worth checking the closest resistor network! IC sockets Make sure that the notch of IC sockets is oriented on the same side as the notch on the PCB symbol. This does not change anything electrically, but having the notch in the right position is a helpful hint for correctly inserting the IC in the next steps! Add 2x DIP8 sockets in positions OK1 and IC1. Add 8x DIP16 sockets in positions IC2, IC3, IC4, IC5, IC6, IC7, IC8, IC9. Flip the board and solder a socket on the back for IC10. Taller and taller... Add a 100\u00b5F electrolytic capacitor in position C4. This capacitor is polarized. The long lead goes on the \"+\" side (as printed on the PCB). The white stripe on the side of the capacitor indicates the negative side. This capacitor is a decoupling cap, and helps in preventing noise from the digital/logic circuits and the display to affect the analog circuitry downstairs... Switches, pots, connectors It's now time to solder all the tactile switches. They are not polarized. Solder the 1x8 male connector. The kit does not come with a 1x6 male connector for the other group of pads; but you'll have to solder one if you want to use the Shruthi XT with a special control board with multimode filtering or effects. Add all the potentiometers (they are all the same) and the encoder. Add the MIDI connectors. It is recommended to solder only one leg (as shown on the photo) - if necessary adjust their alignment; and once everything is okay, finish soldering all pins. Display Solder the 1x16 male connector to the display. Solder the display to the control board. Try to keep the display as close to the circuit board as possible! The display that comes with your kit is an OLED - it has a little inductor on its back that gets in the way, but we cut a hole in the board for that! If you want to use a LCD display instead of an OLED, there are two extra parts to add: A small resistor (3.3 ohm to 100 ohm - bridge for Newhaven Display parts). A trimmer/adjustable resistor (for contrast adjustment) in position R1. LEDs Put the 8 LEDs in place. Observe the symbol printed on the board. One side of the symbol is flat, the other is round. The flat side indicates the cathode (- pin) - which is also the short lead of the LED. The round side indicates the long lead. The base of LED lens should be elevated roughly 9mm above the PCB level. We recommend you to partially assemble the top of the case with the two panels (plexiglas and aluminum) in place to get the LED elevation right and keep them neatly aligned. Don't cut the leads of the LEDs fully - leave of few millimeters for later adjustments. Integrated circuits Insert the integrated circuits. Be careful with their orientation - the notch on the IC must be on the same side as the symbol printed on the PCB (and the notch of the socket if they have been correctly soldered). You can skip the following sections if you are not curious to know how your Shruthi works! The following paragraphs explain what each IC does. 74hc165 They are 8 to 1 parallel to serial converters. They take binary data from 8 inputs, and send them one by one on a single line - this allows multiple inputs to be monitored while using a single microcontroller line (okay, three: a data line, a clock and a latch). Several 74hc165s can be daisy-chained. They are used for reading buttons state. There are 3 groups of buttons on the board, so 3 74hc165s in total. Non-responsive buttons are a symptom of faulty 74hc165s. Datasheet 74hc595 It is a 1 to 8 serial to parallel converter. It does the exact opposite of the 165s - take a sequence of 8 bits and send them to different outputs. This is what allows the 8 LEDs to be controlled from one single microcontroller line. Incorrect LED patterns are displayed when this part is faulty. Datasheet 6N137 It is an optocoupler. It allows two different devices to communicate (one sending data to the other) without any electrical connection between their circuitry. One side of the optocoupler is a LED, the other is a light sensor (photo-diode or photo-transistor) that converts the light of the LED back in electrical signals - all this isolated from external light in the darkness of the chip. The optocoupler is used here for MIDI communication. Concretely, this means that when you connect a MIDI keyboard to the Shruthi with a MIDI cable, you are actually connecting the MIDI keyboard to a little LED inside the Shruthi - whose on/off pattern is converted back into an electrical signal. What's the point of doing all this, rather than using a plain wired connection? This allows, for example, the connection between two devices running at different voltages (5V or 3.3V); this prevent ground loop problems; and this prevent any electrical problem/damage on one device to \"contaminate\" another through the MIDI cable (at worst, the optocoupler will be damaged). The people who designed MIDI knew what they were doing! If you have problems with MIDI reception, this is the part to look at. Datasheet CD4051 They are analog multiplexers. They work like an 8-position switch, whose position can be digitally controlled. They are used to connect all the 29 potentiometers to the microcontroller, which measures their value. For example, when the microcontroller wants to know the position of the cutoff potentiometer, it activates the CD4051 to which the potentiometer is hooked; and it selects one of the 8 positions connecting it to the potentiometer - a bit like telephone exchanges in the old times... Once the connection is established, it runs an analog to digital conversion, and the result is a number giving the position of the potentiometer. The microcontroller permanently does that to scan all potentiometers in a round-robin fashion, at a rate of 20 scans per second on idle potentiometers, and 250 scans per second once a potentiometer has been touched. Check these parts if some potentiometers are not responsive or if the display flickers with random values. Datasheet 24LC512 It is a 512kbits EEPROM with an I2C interface. It is used here to store patches and presets. The one in the kit is pre-programmed with the \"factory\" presets. Datasheet ATMega644p It is the main processor. It has 64kbytes of flash ; 4kbytes of RAM ; 2kbytes of EEPROM and runs at 20 MHz. It handles absolutely everything that happens in the Shruthi - except analog filtering! Of course, it runs code specially crafted for that, that has been programmed onto it during kit preparation. Datasheet Technical documents PCB and schematics The schematics in PDF format are available here . You can find the Eagle files for this board in the source code hosted on github (Note: if the files are not present in the main branch, check for the \"XT\" branch). If you need a reference during assembly, you can download this blueprint of the top and bottom sides of the board. Note that they are at 0.9 scale. Bill of materials The BOM can be browsed online at this address . Download the spreadsheet version . Licence and credits This circuit and PCB layout are made available under a cc-by-sa-3.0 license. The circuit has been designed by \u00c9milie Gillet, with contributions from Frank Daniels regarding UI and mechanical aspects. The firmware is released under a GPL3.0 license.","title":"XT control board"},{"location":"shruthi/digital_xt/#assembly-instructions","text":"We assume you know soldering. If you don't, look first at this tutorial . DISCLAIMER: We are not responsible for anything wrong (including electric shocks, malfunctions, fires, accidents involving a soldering iron) that might happen during the assembly of the kit. Everything you do while assembling the kit is at your own risks. Note: There are a few mechanical changes (number, position and diameter of holes) between the production version of the board and the one shown in these instructions. This has no impact on the assembly procedure; and the parts and circuits used are the same.","title":"Assembly instructions"},{"location":"shruthi/digital_xt/#resistors-first-decade","text":"Add 11x 220R resistors (red, red, black, black, brown). Resistors are not polarized, but following our illustrations will give you bonus point if you ever request help on the forum. R15, R16 and R17 are used for current limiting in the MIDI I/O, their values are chosen to match the MIDI specifications. R31 to R38 are current-limiting resistors for the LEDs. You can increase their value to 1.0k or even 4.7k if you use blue or white LEDs. Flat top LEDs just look better given the 4.6mm thickness of the plexi & alu top panels.","title":"Resistors, first decade"},{"location":"shruthi/digital_xt/#resistors-second-decade","text":"Add 2x 2.2k resistors (red, red, black, brown, brown) in positions R9 and R10. These are pull-up resistors for the I2C bus that connects the processor and the EEPROM memory storing the patches.","title":"Resistors, second decade"},{"location":"shruthi/digital_xt/#resistors-third-decade","text":"Add 2x 10k resistors (brown, black, black, red, brown) in positions R18 and R19. R18 is part of the MIDI reception circuit (pull-up for the optocoupler output), while R19 keeps the RESET line of the microcontroller at a high logic level to keep it running.","title":"Resistors, third decade"},{"location":"shruthi/digital_xt/#bridges","text":"The volume pot R8 on the top right corner of the panel can modify the volume in two ways: digitally, by reducing the level of the VCA envelope; or in the analog domain by directly attenuating the final output level. The first option does not require messy wires and is the simplest to build - its drawback is that a loss of resolution in the VCA envelope can be heard at low volumes. The second option requires wiring - which can also cause noise and catch nasty signals if done wrong.","title":"Bridges"},{"location":"shruthi/digital_xt/#digital-volume-control","text":"Solder 3 bridges like this: They can be made of discarded resistor leads.","title":"Digital volume control"},{"location":"shruthi/digital_xt/#analog-volume-control","text":"Bridge the top right and top center pins (JP1) ; and solder wires to the 3 pads above the pot (JP2). Connect these wires to the 3 pads near the filter board's output jack.","title":"Analog volume control"},{"location":"shruthi/digital_xt/#diode","text":"Add the diode 1N4148 in position D1. The diode is polarized, the ring of the diode must be on the same side as the ring on the diagram printed on the board. This diode protects the MIDI in circuitry (optocoupler) from badly built MIDI cables or MIDI out circuitry.","title":"Diode"},{"location":"shruthi/digital_xt/#quartz-and-friends","text":"Add the 20 MHz quartz (not polarized) and the two 18pF ceramic caps that surround it in positions C11 and C12. They are not polarized and the value 180 is printed on them (180 = \"18 with 0 extra zero pF = 18pF\"). These three parts form - with the help of some circuitry inside the microcontroller - an ultra-stable 20 MHz oscillator which defines the speed at which the microcontroller runs. The quartz is extremely precise and barely sensitive to temperature changes - this is why digital oscillators are stable and do not need tuning.","title":"Quartz and friends"},{"location":"shruthi/digital_xt/#bypass-capacitors","text":"Solder the 3x 100nF ceramic capacitors on the bottom side of the board. The number \"104\" is printed on them (10 x 10\\^4 pF = 100nF). These capacitors are not polarized. They are known as \"decoupling capacitors\" . Their role is to provide a local reservoir of energy to an integrated circuit (the microcontroller). This improves the stability of the power supply line, and ultimately prevents cross-talk or unexpected coupling/glitches between integrated circuits. Solder the 11x 100nF ceramic capacitors on the other side of the board, in positions C1, C2, C3, C5, C6, C7, C8, C9, C10, C13 and C14. They are also decoupling capacitors, working for the ICs they are located next to.","title":"Bypass capacitors"},{"location":"shruthi/digital_xt/#resistor-networks","text":"Add 3x resistor networks in positions RN1, RN2, RN3. The code name of these parts is 9X-1-103LF, which means \"this is a 9-pin part made of many resistors sharing 1 common pin, each of them having a resistance of 10e3 = 10k\". These parts are polarized! The dot printed on the network indicates pin 1, which must be on the same side as the 1 printed on the PCB. In the Shruthi circuits, these parts play a role in detecting button presses - if a group of buttons is stuck it is worth checking the closest resistor network!","title":"Resistor networks"},{"location":"shruthi/digital_xt/#ic-sockets","text":"Make sure that the notch of IC sockets is oriented on the same side as the notch on the PCB symbol. This does not change anything electrically, but having the notch in the right position is a helpful hint for correctly inserting the IC in the next steps! Add 2x DIP8 sockets in positions OK1 and IC1. Add 8x DIP16 sockets in positions IC2, IC3, IC4, IC5, IC6, IC7, IC8, IC9. Flip the board and solder a socket on the back for IC10.","title":"IC sockets"},{"location":"shruthi/digital_xt/#taller-and-taller","text":"Add a 100\u00b5F electrolytic capacitor in position C4. This capacitor is polarized. The long lead goes on the \"+\" side (as printed on the PCB). The white stripe on the side of the capacitor indicates the negative side. This capacitor is a decoupling cap, and helps in preventing noise from the digital/logic circuits and the display to affect the analog circuitry downstairs...","title":"Taller and taller..."},{"location":"shruthi/digital_xt/#switches-pots-connectors","text":"It's now time to solder all the tactile switches. They are not polarized. Solder the 1x8 male connector. The kit does not come with a 1x6 male connector for the other group of pads; but you'll have to solder one if you want to use the Shruthi XT with a special control board with multimode filtering or effects. Add all the potentiometers (they are all the same) and the encoder. Add the MIDI connectors. It is recommended to solder only one leg (as shown on the photo) - if necessary adjust their alignment; and once everything is okay, finish soldering all pins.","title":"Switches, pots, connectors"},{"location":"shruthi/digital_xt/#display","text":"Solder the 1x16 male connector to the display. Solder the display to the control board. Try to keep the display as close to the circuit board as possible! The display that comes with your kit is an OLED - it has a little inductor on its back that gets in the way, but we cut a hole in the board for that! If you want to use a LCD display instead of an OLED, there are two extra parts to add: A small resistor (3.3 ohm to 100 ohm - bridge for Newhaven Display parts). A trimmer/adjustable resistor (for contrast adjustment) in position R1.","title":"Display"},{"location":"shruthi/digital_xt/#leds","text":"Put the 8 LEDs in place. Observe the symbol printed on the board. One side of the symbol is flat, the other is round. The flat side indicates the cathode (- pin) - which is also the short lead of the LED. The round side indicates the long lead. The base of LED lens should be elevated roughly 9mm above the PCB level. We recommend you to partially assemble the top of the case with the two panels (plexiglas and aluminum) in place to get the LED elevation right and keep them neatly aligned. Don't cut the leads of the LEDs fully - leave of few millimeters for later adjustments.","title":"LEDs"},{"location":"shruthi/digital_xt/#integrated-circuits","text":"Insert the integrated circuits. Be careful with their orientation - the notch on the IC must be on the same side as the symbol printed on the PCB (and the notch of the socket if they have been correctly soldered). You can skip the following sections if you are not curious to know how your Shruthi works! The following paragraphs explain what each IC does.","title":"Integrated circuits"},{"location":"shruthi/digital_xt/#74hc165","text":"They are 8 to 1 parallel to serial converters. They take binary data from 8 inputs, and send them one by one on a single line - this allows multiple inputs to be monitored while using a single microcontroller line (okay, three: a data line, a clock and a latch). Several 74hc165s can be daisy-chained. They are used for reading buttons state. There are 3 groups of buttons on the board, so 3 74hc165s in total. Non-responsive buttons are a symptom of faulty 74hc165s. Datasheet","title":"74hc165"},{"location":"shruthi/digital_xt/#74hc595","text":"It is a 1 to 8 serial to parallel converter. It does the exact opposite of the 165s - take a sequence of 8 bits and send them to different outputs. This is what allows the 8 LEDs to be controlled from one single microcontroller line. Incorrect LED patterns are displayed when this part is faulty. Datasheet","title":"74hc595"},{"location":"shruthi/digital_xt/#6n137","text":"It is an optocoupler. It allows two different devices to communicate (one sending data to the other) without any electrical connection between their circuitry. One side of the optocoupler is a LED, the other is a light sensor (photo-diode or photo-transistor) that converts the light of the LED back in electrical signals - all this isolated from external light in the darkness of the chip. The optocoupler is used here for MIDI communication. Concretely, this means that when you connect a MIDI keyboard to the Shruthi with a MIDI cable, you are actually connecting the MIDI keyboard to a little LED inside the Shruthi - whose on/off pattern is converted back into an electrical signal. What's the point of doing all this, rather than using a plain wired connection? This allows, for example, the connection between two devices running at different voltages (5V or 3.3V); this prevent ground loop problems; and this prevent any electrical problem/damage on one device to \"contaminate\" another through the MIDI cable (at worst, the optocoupler will be damaged). The people who designed MIDI knew what they were doing! If you have problems with MIDI reception, this is the part to look at. Datasheet","title":"6N137"},{"location":"shruthi/digital_xt/#cd4051","text":"They are analog multiplexers. They work like an 8-position switch, whose position can be digitally controlled. They are used to connect all the 29 potentiometers to the microcontroller, which measures their value. For example, when the microcontroller wants to know the position of the cutoff potentiometer, it activates the CD4051 to which the potentiometer is hooked; and it selects one of the 8 positions connecting it to the potentiometer - a bit like telephone exchanges in the old times... Once the connection is established, it runs an analog to digital conversion, and the result is a number giving the position of the potentiometer. The microcontroller permanently does that to scan all potentiometers in a round-robin fashion, at a rate of 20 scans per second on idle potentiometers, and 250 scans per second once a potentiometer has been touched. Check these parts if some potentiometers are not responsive or if the display flickers with random values. Datasheet","title":"CD4051"},{"location":"shruthi/digital_xt/#24lc512","text":"It is a 512kbits EEPROM with an I2C interface. It is used here to store patches and presets. The one in the kit is pre-programmed with the \"factory\" presets. Datasheet","title":"24LC512"},{"location":"shruthi/digital_xt/#atmega644p","text":"It is the main processor. It has 64kbytes of flash ; 4kbytes of RAM ; 2kbytes of EEPROM and runs at 20 MHz. It handles absolutely everything that happens in the Shruthi - except analog filtering! Of course, it runs code specially crafted for that, that has been programmed onto it during kit preparation. Datasheet","title":"ATMega644p"},{"location":"shruthi/digital_xt/#technical-documents","text":"","title":"Technical documents"},{"location":"shruthi/digital_xt/#pcb-and-schematics","text":"The schematics in PDF format are available here . You can find the Eagle files for this board in the source code hosted on github (Note: if the files are not present in the main branch, check for the \"XT\" branch). If you need a reference during assembly, you can download this blueprint of the top and bottom sides of the board. Note that they are at 0.9 scale.","title":"PCB and schematics"},{"location":"shruthi/digital_xt/#bill-of-materials","text":"The BOM can be browsed online at this address . Download the spreadsheet version .","title":"Bill of materials"},{"location":"shruthi/digital_xt/#licence-and-credits","text":"This circuit and PCB layout are made available under a cc-by-sa-3.0 license. The circuit has been designed by \u00c9milie Gillet, with contributions from Frank Daniels regarding UI and mechanical aspects. The firmware is released under a GPL3.0 license.","title":"Licence and credits"},{"location":"shruthi/dsp/","text":"This filter board is a bit unusual. Contrary to its friends, it does not feature any analog signal processing modules. Instead, the oscillators signals (along with the audio input) are converted back into the digital domain and processed by another AVR microcontroller. You don't get the warmth of analogue, but instead, you gain plenty of whacky filter and FX combinations! We are not ashamed of saying that the sounds coming out of this filter board are pure lo-fi. At best, it's Amiga-scronch, at worst, it's [insert here the name of your favorite Arduino-based bleeper] crap. In your dreams, this filter board will sound like a WTPA, but when you wake up it won't, and there will be an Alpaca sleeping on your couch. The signal processing is done with a 12-bits resolution ; except for everything involving delay lines in which case the samples are converted to crunchy 8-bits when written to the delay line. Using this filter board Please make sure that both the analog (CV1 to +5V) and digital (RX to +5V) ports of the filter and control boards are connected. Beware! Only the Shruthi-1 firmware v0.93 or above generates the digital signals required to control this filter board. These digital signals are sent through the output labelled TX> . This means that you can use the programmer and the digital filter board at the same time. To activate the digital filter board, select dsp in the system settings page. If you don't do so, you will not get any sound from the board. When pressing the S2 switch (Filter page) a second time, a new page is displayed allowing you to configure the filter and the effects. Mod fx. pr1 pr2 l>f del 30 8 The parameters are the following: mod (mode): Filter configuration. The options are l>f (low-pass filter sent to an FX), h>f (high-pass filter sent to an FX), f>l (FX applied first, sent to a LPF), f>h (FX applied first, sent to a HPF), and [fx]{style=\"text-align:right;\"} (no filtering, just the DCA and the FX). fx. (fx progr.): Digital effect to apply. pr1 (param. 1): First parameter of the digital effect. pr2 (param. 2): Second parameter of the digital effect. Here is a list of the available effect programs. Name Description Param 1 Param 2 distrt Distortion Amount of foldback distortion Amount of fuzz crushr Bit crusher Sample rate reduction Bit depth reduction +cmbfl Comb filter with positive feedback Cutoff frequency Feedback amount -cmbfl Comb filter with negative feedback Cutoff frequency Feedback amount ringmd Ring modulator Carrier frequency Amount delay Simple delay Delay time Amount fb dly Delay with 30% feedback Delay time Amount dubdly Delay with 80% feedback Delay time Amount !fbdelay Delay with 30% feedback and no antialiasing Delay time Amount !dbdly Delay with 80% feedback and no antialiasing Delay time Amount /16 dl Tempo-synchronized delay Feedback amount Amount /12 dl Tempo-synchronized delay Feedback amount Amount /8 dl Tempo-synchronized delay Feedback amount Amount 3/16 dl Tempo-synchronized delay Feedback amount Amount looper Looper Loop duration/Pitch Trigger pitch Pitch shifter Relative pitch Amount The looper works as follows. When trigger is below 32, it lets the input goes through, and keeps ready a small loop (less than 1 second), whose duration is adjusted by the first parameter. When trigger is above 32, it stops playing the incoming signal and instead plays the recorded loop. The playback pitch can be controlled by the first parameter. Try mapping the pitch bend lever or modwheel to CV1, and an envelope to CV2, and connect an external audio source: every time you press a key, the audio starts looping, and you can use the pitch bend lever to \"scratch\" it. The pitch-shifter pitch parameter works as follows: 64 is the original pitch, 65 is the original +1 quarter-tone, 63 is the original -1 quarter-tone. For example, use 64 - 2 x 12 = 40 to generate a sub-octave, or 64 + 2 x 7 = 78 to generate a fifth. Try modulating the pitch with an LFO to get a chorus effect. There is no flanger program, because a flanger is just a comb filter modulated by a LFO! Thus, you can use the positive or negative feedback comb-filter, and route an LFO to CV1 to make it shine and shimmer. Try something different from an LFO (for example a step sequencer) for more fun! Given the limited amount of RAM on an ATMega328p (2kb), some pretty heavy downsampling happens when the delay time exceeds 30ms, and the echoes sound more like smudgy bitcrushed sludge than echoes - but early BBD based delay pedals sound like that, too. The first 3 delays, and the tempo-synchronized ones, use a 1-pole low-pass filter on the delay line input and output to make things a bit more tolerable. The versions with a \"!\" in the name don't use any filtering and will sound like a circuit-bent Dub Barbie. The G blinkenlight indicates the output level, the R blinkenlight indicates the input level. Dirty technical details Signal path The Shruthi-1 output signals are PWM-modulated: they have a high frequency peak at the PWM modulation frequency (39kHz) which would cause some horrible amount of aliasing if sampled directly. For this reason, the mix of the oscillators and external audio input is filtered by an 8-pole Chebyshev filter (response in blue) with a cutoff frequency of 16kHz. After being digitally processed on the AVR, the signal is converted back to the analogue domain by a proper 12-bits DAC, and further filtered to remove high frequency components (something that is not done on the other filter boards, since there is an analog filter to do all this cleaning up!). Chebyshev filters have some ripple in the pass-band (and even more if you constrain RC components values to be in the E24/E6 series), but they are steep! The response of this final filter is plotted in green on the graph above. The ripple translates into some slightly \"resonant\" coloration of the high-end. At least that's what Sonic Visualizer told me. What about the CVs? The original plan was to filter the 5 CV signals (VCA, cutoff, resonance, CV1, CV2) with passive RC filters with a 150 Hz cutoff (R = 47k, C = 22n), and sample them using the ADC of the AVR. We even had found a smart way of doing this: use a timer clocked at 80kHz, sample from the oscillators signal every even frame, and from one of the CVs on every odd frame. This plan did not work well for three reasons: The extra code required to round-robin and switch the ADC, but most importantly the ISR preludes/postludes (10 register to push, then pop, twice per sample), ended up using too much CPU. The ADC clock needed to be run at a pretty high speed (actually above the maximum rated speed), with incessant switching between the channels, to allow the sampling of the audio signal and the CVs. This caused all kinds of annoying signal degradations. The RC filter was not good enough at removing the PWM carrier from the CV signals. This introduced a lot of nasty ringing noise on all the CVs. Digital filtering of the CV signals did help - but introduced a delay/slew rate limitation that harmed the envelope speed. Suddenly it was all foamy and bubbly. The solution? It is a digital filter board after all, so let's send the CVs digitally. No kidding. When the filter board is set to dsp on the Shruthi digital board, the second UART of the main ATMega644p (whose TX line is exposed on the Output expansion port) runs at 115200 baud and transmits the CVs. The ATMega328p on the digital filter board reads them. It means that: This filter board can only be controlled by a Shruthi-1 . You cannot use it as a stand-alone filter by feeding CVs into it. Indeed, it will not do anything with the signals fed to the VCA, frequency, resonance, CV1 and CV2 inputs. Well, it is not entirely true: this filter board can be controlled by whatever speaks our patent-pending CV update through a 115200 bps serial link protocol. The protocol consists of repeatedly sending the following sequence of 12 bytes. At the exception of the first byte in the sequence, all values are in the 0-254 (0xfe) range. The interleaving of cutoff / VCA values allows a higher refresh rate for those sensitive signals. Beginning of sequence marker, always equal to 0xff. Cutoff value. Configuration byte 0xmn, where the nibble m is the configuration of the filter (0 for LP, 1 for BP, 2 for HP), and where the nibble n is the FX program number. VCA value. Tempo byte. Cutoff value. Resonance value. VCA value. FX parameter 1 value (CV1). Cutoff value. FX parameter 2 value (CV2). VCA value. Note that the PCB still has the 5 passive RC filters on the CV inputs and traces connecting them to the ADC inputs of the AVR, and that you can build a version of the DSP firmware that reads them, instead of receiving the data from the serial link (Just #define USE_ANALOG_CV in dsp.h ). So if analog CVs and gritty digital noises are your thing, you can hack them back - but beware that some effects will be broken because of the increased CPU load. Schematics and PCB You can find the Eagle files for this board in the dsp/hardware_design/pcb directory of the source code hosted on github . The schematics in PDF format are here . Bill of materials Bill of materials . If you want to process some CV signals (beware: you'll need to write code for that!), the following parts can be added: Index Description Value Quantity Reichelt Digikey Farnell Other R24, R25, R27, R28, R29 Resistor 1% 47k 5 METALL 47,0k 47.5KXBK-ND 9341960 C21, C22, C24, C26, C28 Film cap 22n 5 MKS-2-5 22N BC1646-ND 1166080 . Firmware The firmware code is hosted on github , in the dsp directory. It can be built and sent to the MCU with: make -f dsp/makefile bake Sorry, there's no \"firmware update over MIDI\" thing for this, since the MCU on the board runs independently of the ATMega644p on the digital board -- which is the guy connected to the MIDI input. If you want to hack your own FX algos, the place to look at is one of the void FxEngine::RenderEffectName static methods. Your mission, if you accept it, is to transform (in place) the buffer of kAudioBlockSize samples called samples_ . Samples are 12 bits, signed (from -2048 to +2047). You can read the parameters with filtered_cv(CV_1) and filtered_cv(CV_2) . You have roughly 200 CPU cycles per sample, and if you want to time your code, you can probe the >TX pin (pin 3) of the AVR - when this line is high the MCU is processing samples, when it is low it is, as we say in french, en train de se branler la nouille . License w00t, this filter board is made available under a cc-by-sa-3.0 license. Releases v0.2 Added bypass caps on Vcc/2 line. Added tStop/bStop layers on \"Shruti\" text. Increased CV filtering caps (yeah, before realizing they won't be needed...). v0.1 First prototype.","title":"DSP filter board"},{"location":"shruthi/dsp/#using-this-filter-board","text":"Please make sure that both the analog (CV1 to +5V) and digital (RX to +5V) ports of the filter and control boards are connected. Beware! Only the Shruthi-1 firmware v0.93 or above generates the digital signals required to control this filter board. These digital signals are sent through the output labelled TX> . This means that you can use the programmer and the digital filter board at the same time. To activate the digital filter board, select dsp in the system settings page. If you don't do so, you will not get any sound from the board. When pressing the S2 switch (Filter page) a second time, a new page is displayed allowing you to configure the filter and the effects. Mod fx. pr1 pr2 l>f del 30 8 The parameters are the following: mod (mode): Filter configuration. The options are l>f (low-pass filter sent to an FX), h>f (high-pass filter sent to an FX), f>l (FX applied first, sent to a LPF), f>h (FX applied first, sent to a HPF), and [fx]{style=\"text-align:right;\"} (no filtering, just the DCA and the FX). fx. (fx progr.): Digital effect to apply. pr1 (param. 1): First parameter of the digital effect. pr2 (param. 2): Second parameter of the digital effect. Here is a list of the available effect programs. Name Description Param 1 Param 2 distrt Distortion Amount of foldback distortion Amount of fuzz crushr Bit crusher Sample rate reduction Bit depth reduction +cmbfl Comb filter with positive feedback Cutoff frequency Feedback amount -cmbfl Comb filter with negative feedback Cutoff frequency Feedback amount ringmd Ring modulator Carrier frequency Amount delay Simple delay Delay time Amount fb dly Delay with 30% feedback Delay time Amount dubdly Delay with 80% feedback Delay time Amount !fbdelay Delay with 30% feedback and no antialiasing Delay time Amount !dbdly Delay with 80% feedback and no antialiasing Delay time Amount /16 dl Tempo-synchronized delay Feedback amount Amount /12 dl Tempo-synchronized delay Feedback amount Amount /8 dl Tempo-synchronized delay Feedback amount Amount 3/16 dl Tempo-synchronized delay Feedback amount Amount looper Looper Loop duration/Pitch Trigger pitch Pitch shifter Relative pitch Amount The looper works as follows. When trigger is below 32, it lets the input goes through, and keeps ready a small loop (less than 1 second), whose duration is adjusted by the first parameter. When trigger is above 32, it stops playing the incoming signal and instead plays the recorded loop. The playback pitch can be controlled by the first parameter. Try mapping the pitch bend lever or modwheel to CV1, and an envelope to CV2, and connect an external audio source: every time you press a key, the audio starts looping, and you can use the pitch bend lever to \"scratch\" it. The pitch-shifter pitch parameter works as follows: 64 is the original pitch, 65 is the original +1 quarter-tone, 63 is the original -1 quarter-tone. For example, use 64 - 2 x 12 = 40 to generate a sub-octave, or 64 + 2 x 7 = 78 to generate a fifth. Try modulating the pitch with an LFO to get a chorus effect. There is no flanger program, because a flanger is just a comb filter modulated by a LFO! Thus, you can use the positive or negative feedback comb-filter, and route an LFO to CV1 to make it shine and shimmer. Try something different from an LFO (for example a step sequencer) for more fun! Given the limited amount of RAM on an ATMega328p (2kb), some pretty heavy downsampling happens when the delay time exceeds 30ms, and the echoes sound more like smudgy bitcrushed sludge than echoes - but early BBD based delay pedals sound like that, too. The first 3 delays, and the tempo-synchronized ones, use a 1-pole low-pass filter on the delay line input and output to make things a bit more tolerable. The versions with a \"!\" in the name don't use any filtering and will sound like a circuit-bent Dub Barbie. The G blinkenlight indicates the output level, the R blinkenlight indicates the input level.","title":"Using this filter board"},{"location":"shruthi/dsp/#dirty-technical-details","text":"","title":"Dirty technical details"},{"location":"shruthi/dsp/#signal-path","text":"The Shruthi-1 output signals are PWM-modulated: they have a high frequency peak at the PWM modulation frequency (39kHz) which would cause some horrible amount of aliasing if sampled directly. For this reason, the mix of the oscillators and external audio input is filtered by an 8-pole Chebyshev filter (response in blue) with a cutoff frequency of 16kHz. After being digitally processed on the AVR, the signal is converted back to the analogue domain by a proper 12-bits DAC, and further filtered to remove high frequency components (something that is not done on the other filter boards, since there is an analog filter to do all this cleaning up!). Chebyshev filters have some ripple in the pass-band (and even more if you constrain RC components values to be in the E24/E6 series), but they are steep! The response of this final filter is plotted in green on the graph above. The ripple translates into some slightly \"resonant\" coloration of the high-end. At least that's what Sonic Visualizer told me.","title":"Signal path"},{"location":"shruthi/dsp/#what-about-the-cvs","text":"The original plan was to filter the 5 CV signals (VCA, cutoff, resonance, CV1, CV2) with passive RC filters with a 150 Hz cutoff (R = 47k, C = 22n), and sample them using the ADC of the AVR. We even had found a smart way of doing this: use a timer clocked at 80kHz, sample from the oscillators signal every even frame, and from one of the CVs on every odd frame. This plan did not work well for three reasons: The extra code required to round-robin and switch the ADC, but most importantly the ISR preludes/postludes (10 register to push, then pop, twice per sample), ended up using too much CPU. The ADC clock needed to be run at a pretty high speed (actually above the maximum rated speed), with incessant switching between the channels, to allow the sampling of the audio signal and the CVs. This caused all kinds of annoying signal degradations. The RC filter was not good enough at removing the PWM carrier from the CV signals. This introduced a lot of nasty ringing noise on all the CVs. Digital filtering of the CV signals did help - but introduced a delay/slew rate limitation that harmed the envelope speed. Suddenly it was all foamy and bubbly. The solution? It is a digital filter board after all, so let's send the CVs digitally. No kidding. When the filter board is set to dsp on the Shruthi digital board, the second UART of the main ATMega644p (whose TX line is exposed on the Output expansion port) runs at 115200 baud and transmits the CVs. The ATMega328p on the digital filter board reads them. It means that: This filter board can only be controlled by a Shruthi-1 . You cannot use it as a stand-alone filter by feeding CVs into it. Indeed, it will not do anything with the signals fed to the VCA, frequency, resonance, CV1 and CV2 inputs. Well, it is not entirely true: this filter board can be controlled by whatever speaks our patent-pending CV update through a 115200 bps serial link protocol. The protocol consists of repeatedly sending the following sequence of 12 bytes. At the exception of the first byte in the sequence, all values are in the 0-254 (0xfe) range. The interleaving of cutoff / VCA values allows a higher refresh rate for those sensitive signals. Beginning of sequence marker, always equal to 0xff. Cutoff value. Configuration byte 0xmn, where the nibble m is the configuration of the filter (0 for LP, 1 for BP, 2 for HP), and where the nibble n is the FX program number. VCA value. Tempo byte. Cutoff value. Resonance value. VCA value. FX parameter 1 value (CV1). Cutoff value. FX parameter 2 value (CV2). VCA value. Note that the PCB still has the 5 passive RC filters on the CV inputs and traces connecting them to the ADC inputs of the AVR, and that you can build a version of the DSP firmware that reads them, instead of receiving the data from the serial link (Just #define USE_ANALOG_CV in dsp.h ). So if analog CVs and gritty digital noises are your thing, you can hack them back - but beware that some effects will be broken because of the increased CPU load.","title":"What about the CVs?"},{"location":"shruthi/dsp/#schematics-and-pcb","text":"You can find the Eagle files for this board in the dsp/hardware_design/pcb directory of the source code hosted on github . The schematics in PDF format are here .","title":"Schematics and PCB"},{"location":"shruthi/dsp/#bill-of-materials","text":"Bill of materials . If you want to process some CV signals (beware: you'll need to write code for that!), the following parts can be added: Index Description Value Quantity Reichelt Digikey Farnell Other R24, R25, R27, R28, R29 Resistor 1% 47k 5 METALL 47,0k 47.5KXBK-ND 9341960 C21, C22, C24, C26, C28 Film cap 22n 5 MKS-2-5 22N BC1646-ND 1166080 .","title":"Bill of materials"},{"location":"shruthi/dsp/#firmware","text":"The firmware code is hosted on github , in the dsp directory. It can be built and sent to the MCU with: make -f dsp/makefile bake Sorry, there's no \"firmware update over MIDI\" thing for this, since the MCU on the board runs independently of the ATMega644p on the digital board -- which is the guy connected to the MIDI input. If you want to hack your own FX algos, the place to look at is one of the void FxEngine::RenderEffectName static methods. Your mission, if you accept it, is to transform (in place) the buffer of kAudioBlockSize samples called samples_ . Samples are 12 bits, signed (from -2048 to +2047). You can read the parameters with filtered_cv(CV_1) and filtered_cv(CV_2) . You have roughly 200 CPU cycles per sample, and if you want to time your code, you can probe the >TX pin (pin 3) of the AVR - when this line is high the MCU is processing samples, when it is low it is, as we say in french, en train de se branler la nouille .","title":"Firmware"},{"location":"shruthi/dsp/#license","text":"w00t, this filter board is made available under a cc-by-sa-3.0 license.","title":"License"},{"location":"shruthi/dsp/#releases","text":"","title":"Releases"},{"location":"shruthi/dsp/#v02","text":"Added bypass caps on Vcc/2 line. Added tStop/bStop layers on \"Shruti\" text. Increased CV filtering caps (yeah, before realizing they won't be needed...).","title":"v0.2"},{"location":"shruthi/dsp/#v01","text":"First prototype.","title":"v0.1"},{"location":"shruthi/firmware/","text":"Where? The firmware code is hosted on github . Latest version (v1.02) . What? To build the firmware you need: A GCC toolchain for the AVR platform, the AVR includes/libraries, and the AVRDude utility. All those guys are bundled with the Arduino development environment, which you can get here ; or with CrossPack . If you use Windows, you can find them in WinAVR . Make sure your avr-gcc is as close as possible to 4.3.3 since the most recent versions of gcc are performing optimizations differently and can cause the firmware to grow out of the size constraints. Python (2.5 or above) and numpy . I love numpy! To flash it, you need either: An AVR ISP programmer, with a 2x3 connector. The one used for the Shruthi development is this one . OR you can also use the firmware update by MIDI procedure described at the end of the user manual. It will take longer to load your program using this method (1 min vs 5s) - thus it is recommended only if you are really scared of wires and circuits! The Shruthi build environment is command-line / makefile based. OS X is the system on which Mutable instruments develops ; but getting it to work on Linux is straightforward. On Windows machines you might have to fiddle a bit with system paths to get things to work. How? Building the firmware Get the source from github (or run git clone ... ). Move to the directory created by git (or the directory created when decompressing the .zip). Run git submodule init and git submodule update to pull the dependencies. Edit the avrlib/makefile.mk file (extended by all makefiles) to change the path (AVR_TOOLS_PATH / AVR_ETC_PATH) to the directory containing the AVR toolchain. This path depends on your system. In the same file, change PROGRAMMER to the reference of your ISP programmer (don't care about this if you want to upload your modified firmware by MIDI). Build the resources: make resources . Pre-compiled resource files ( resources.cc , resources.h ) are already bundled with the source code, so if you don't modify the Python resources file, you don't need this step. Build the firmware: make . Make sure that the firmware size is below 64512 bytes: make size (If you don't have figlet and cowsay installed, you're going to miss some awesome Moose action, but you can still type: cat shruthi1.size and add the first 2 numbers). Note that trying to upload with the standard MIDI update procedure a firmware size too large can \"brick\" your unit. If you want to upload the firmware by MIDI (or realease a mod to the community): make midi (you need python installed on your computer for this step). The resulting file is in build/shruthi1/shruthi1.mid . Bootloader development The \"firmware update by MIDI\" feature is made possible by a 1k bootloader programmed into the chips distributed with the kits. The source code of this bootloader can be compiled with make -f bootloader/makefile ; and uploaded with make -f bootloader/makefile upload Starting from a blank chip The single command: make bake_all first sets up the fuses at a slow speed ; and then flashes the firmware, bootloader and internal eeprom at high speed. Installing the factory presets This is not properly speaking firmware development, but hey, here we go. The factory data for the eeprom is in this file . Play the .syx file into the Shruthi (with its firmware installed of course). Some notes about the code AVR development library (avrlib) Most of the code directly dealing with the hardware is in the avrlib directory, which is an import for the avril project . You'll find there various template classes allowing hardware resources (serial ports, switches, LCD display...) to be manipulated with a friendly, high-level syntax... without the cost associated with abstraction since everything is flattened/evaluated/inlined at compile time. A good example (I think) of what C** can bring to embedded development. Resources All the data residing in program flash ROM (strings, lookup tables, waveforms) is contained in the shruthi/resources.h and shruthi/resources.cc files, which are automatically generated from some python code (this is where the wavetable generation happens). If you want to add a string to your program, add the string to the list shruthi/resources/strings.py , build the resources, and use the ResourcesManager::LoadStringResource(STR_RES_MY_STRING, buffer, size); idiom to copy it to RAM whenever you want to access it. Code tour Core data structures Patch ( patch.h ) is the data structure holding the synthesis parameters. SequencerSettings ( sequencer_settings.h ) is the data structure holding the sequencer configuration (tempo, quantize, arpeggiator pattern) and the sequence itself. SystemSettings ( system_settings.h ) is holding the global configuration data (MIDI options, transpose, tuning). Storage ( storage.h ) contains the routines for loading patch or sequence data from the internal or external eeprom ; and for parsing incoming SysEx MIDI messages (since all of them are related to reception/transmission of user data). Synthesis Envelope ( envelope.h ) has two instances for the two envelope generators. Just like Lfo in lfo.h . Oscillator ( oscillator.h ) contains the main oscillator code. To add an oscillator algorithm: Add the oscillator name in the oscillator names list in strings.py Add an entry in the OscillatorAlgorithm enum in patch.h In oscillator.cc , locate the table of function pointers at the end of the file. Add an entry: &Osc::RenderMyAlgo . Note that you have to make sure that the string, enum entry, and function pointer entry are in the same order! For example, if you've added the string at the end of the list, you'll have to add the enum entry and function pointer entries at the end of their respective lists too. Add a void RenderMyAlgo(uint8_t* buffer) forward declaration in oscillator.h ; and implement void Oscillator::RenderMyAlgo(uint8_t* buffer) in oscillator.cc . Your function must fill kAudioBlockSize samples of audio into the buffer passed as an argument. The macros BEGIN_SAMPLE_LOOP , END_SAMPLE_LOOP and UPDATE_PHASE can be used to take care of phase incrementation and sync. RenderDirtyPwm is probably the simplest example to study! TransientGenerator ( transient_generator.h ) is the sound generator responsible for adding clicks/attacks at the beginning of the note. NoteStack ( note_stack.h ) is a stack (implemented as a linked list with \"pointers in a pool array\" instead of pointers) used for storing the depressed keys and doing voice allocation. SynthesisEngine ( synthesis_engine.h ) contains the bulk of the synthesis code, and integrates all the synthesis-related objects described above. The synthesis engine can handle several voices (at the moment only one) and start/stop a sound on each voice. However, it is not responsible for doing all the voice stealing / arpeggiation stuff. The classes responsible for turning sequencer data and incoming MIDI messages into actual notes routed to the synthesis voice are VoiceController ( voice_controller.h ) and VoiceAllocator ( voice_allocator.h ). VoiceAllocator is used in polychaining mode, and implements a LRU voice-stealing algorithm. VoiceController is used otherwise, and handles the note priority (through a NoteStack ) and all the additional events generated by the sequencer or arpeggiator. Interaction with the rest of the world \u00ae Editor ( editor.h ) is responsible for all the UI, pages navigation, etc. There are 3 modes for the editor, corresponding to the 5th key: patch ; sequence ; and performance. Each mode contains grouped pages. Each page has a UI Type (sequencer, traditional 4 parameters view). For each UI type, callback functions for drawing the screen, handling pots or encoder events are implemented. ParameterDefinitions ( parameter_definitions.h ) is the central repository of everything the Shruthi needs to know about each synthesis parameter: its name, unit, descriptive string, and range. It is used by the editor, the random patch generator, to validate incoming NRPN data, and to scale incoming CC data. MidiDispatcher ( midi_dispatcher.h ) is the class that will handle the reception of MIDI messages. All the handlers (NoteOn, ControlChange) will be inlined into the MIDI parsing state machine. Those handlers are responsible for updating the LCD display (status character), the Editor (step by step recording), the MIDI out and obviously the synthesis engine. Beast The main code is in shruthi.cc . It consists of short chunks of code, aka \"tasks\" called in turns. The most important task, called inbetween all the other ones, is AudioRenderingTask which fills as much as possible of the audio buffer. Very few things happens in timer ISR-land (clocked at 39kHz): Pop a sample from an audio buffer and write it to the PWM output Every 16th call, pop a nibble from the display buffer and write it to the LCD Every 16th call, pop a byte from the MIDI out buffer and write it to the UART (This means the Shruthi can only achieve 78% of the maximum MIDI bandwidth). Every 16th call, debounce the switches Every 32th call, do the math to keep track of the number of ms elapsed since boot Releases v1.02 This version improves the scanning rate of knobs for the \"classic\" (4-knob) Shruthi, and contains several minor bug fixes. v1.01 Major code rewrite! Synthesis Single-cycle LFO mode. Individual ADSR parameters are modulation destinations. Sequencing The warp modes for the sequencer/arpeggiator have been deprecated. The impro and rec modes for the sequencer have been deprecated. The internals of the sequencer/arpeggiator are now that of a reasonable 24 ppqn MIDI sequencer. External MIDI sync is tighter, and the Shruthi can output a MIDI clock to control other devices. Tempo-synchronized LFOs do not have the occasional reset/glitching they sometimes had in the previous version. The Warp setting has been replaced by an adjustable MIDI clock divider, which allows the arpeggiator or sequencer to run at other divisions than sixteenth notes, from 1/96 notes to whole notes. This new feature explains the disappearance of \"turbo\" tempi and dividers in the external clock mode. Performance and system Duophonic mode behaves in a more predictable way, especially when coupled with the arpeggiator. Arpeggiator, portamento/legato and sequencer settings are now saved with the patch. When an arp or sequence is already running, loading a new patch will only load the synth settings (to keep your sequence running...) Pressing the encoder for 1 second will latch whatever the synth is playing (arpeggio, sequence, or single note), and will put the unit in latched mode unless the encoder is pressed again for 1s. Using the latch function when no note is playing puts the synth in \"jam\" mode - you can scroll through preset scales using the knobs. It works with the sequencer and arpeggiator too, so it effectively replaces the \"test note\". It is no longer possible to individually save/load sequences. Sequences are now part of a patch. MIDI The MIDI split mode has been deprecated. The code handling CC/NRPN has been rewritten. Major benefit: knob moves are transmitted as CC rather than as NRPN - whenever possible of course. UI Support for the XT digital control board. The UI is much more responsive. The Performance page has been deprecated. The Triggers feature has been deprecated. What used to be the \"split point\" setting is now an option to choose the behaviour at boot: splash screen on/off and boot on the presets page on/off. Screensaver (for OLED displays). Filter board handling Support for an upcoming filter board by TubeOhm. v0.98 Minor bug fixes, and extended SysEx support for third party editors . v0.97 Synthesis The envelopes have a different behaviour - the attack does not reset 0 at the beginning of each note, but rather starts from the current level of the envelope. The way velocity is managed in the context of note priority handling has been changed. When you play and hold a note, play a new note and release it, the held note is retriggered with its original velocity. Phase increments are computed using a new interpolation technique, saving 1.3kb of code size. Filter board handling Support for the \"LP2+Delay\" filter board. UI When using the programmer, the screen shows the value of the edited parameter. v0.96 Synthesis The LFSR used for the noise oscillator can now be reset by oscillator sync. This allows the creation of pitched sounds with a very rich timbre. Constant values have been introduced in the mod matrix. They can be combined with operators to attenuate, translate, or quantize a modulation source by a known value. A Quantize operation has been added to the operators. It reduces the bit-depth of a modulation source to create a Sample & Hold like effect on any modulation. A Lag processor operation has been added to the operators. It smoothes the slope of a modulation source to create more progressive modulations. Two MIDI channel/note combo can be defined as \"triggers\". When such a MIDI message is received, a note is not played. Instead, a modulation source (\"trigger 1\" and \"trigger 2\" in the mod matrix) changes. This can be used to trigger effects (such as a pitch change or LFO speed boost) from a keyboard or an external MIDI sequencer. 2 new modulation destinations, \"env 1\" and \"env 2\" allow the envelopes to be triggered whenever a modulation source crosses a threshold. A new mixing mode, \"duo\", allows the synth to be used in a pseudo-duophonic mode. The least recently played note is played on osc 2, and the most recently played note is played on osc 1. 3 new mixing modes, \"2 steps\", \"4 steps\" and \"8 steps\" allow the oscillators (or oscillators, sub-oscillator and noise source) to be triggered rythmically at each note. A new mixing mode, \"seqmix\" allows the oscillators/sub/noise sources to be rythmically disabled according to the pattern input in the step sequencer. This allows very crude rythmic patterns to be programmed (using noise as a snare drum and the sub-oscillator as a kick). The attack time modulation destination now accepts both positive (faster attack) and negative (slower attack) modulations. Filter board handling The cutoff range of the Polivoks filter board has been shifted up by one octave. Code 256 bytes have been saved by using the same table for the lowest octaves of the triangle oscillator. 129 bytes have been saved by simplifying the \"vibes\" wavetable. A bug that caused random corruption of an unused memory area during program startup has been fixed. 2.5 kbytes have been saved by de-specialization the Oscillators code. v0.95 Synthesis A page has been added to configure the routing of the Polivoks filter board. The page showing the hpf settings for the SSM2044 filter board simultaneously displays the cutoff/resonance of the lpf - allowing both filters to be tweaked at the same time. Added a cutoff-coupling mode for the dual SVF filter board. MIDI notes in the 120-128 range are no longer wrapped to 108-116. Fixed a bug causing a faint VCA bleed with some specific combinations of modulation sources routed to the VCA. Added a new mixing mode, \"fold\", which equally mixes oscillator 1 and 2 and send the output to a fold-back distortion, the amount of which is controlled by \"mix\" Added a new mixing mode, \"bits\", which equally mixes oscillator 1 and 2 and send the output to a bit-reduction distortion, the amount of which is controlled by \"mix\". Code 512 bytes have been saved by using the same table for the lowest octaves of the triangle oscillator. UI Fixed a bug occurring when scrolling backwards from the second filter page. Fixed a bug preventing the tempo and LFO rate parameters to be edited with the pot, when the unit is configured in \"snap\" mode. v0.94 Synthesis Fixed a bug that caused a loudness drop of the vowel oscillator Fixed a bug that caused the filtered noise \"oscillator\" to output incorrect values when the parameter was set to a high value. The envelopes now have a smoother curve, and slower attack / decay / release times can be achieved. Fixed a timing bug that caused the main oscillators pitch to be off by 8cents. Code The z-family oscillators now share common code, saving \\~700 bytes of code. Resource table de-duplication saved \\~200 bytes of code. The vowel oscillator code has been simplified by \\~100 bytes. MIDI input is polled from the 39kHz audio interrupt rather than interrupt-driven. This saves \\~80 CPU cycles per byte of MIDI data received,since there is no extra ISR intro/outtro when a MIDI byte is received. MIDI implementation The Shruthi now uses an officially registered manufacturer ID for SysEx communication. As a result, patch dumps/backups made with previous versions willstill be readable with v0.94 and onwards, but patch dumps made with v0.94 won't be readable with earlier versions. CC90 and CC87 can be used to control the cutoff frequency and resonance of the second filter on the dual SVF filter board. v0.93 Synthesis A menu has been added to control the routing of the dual SVF filter board. A menu has been added to control the effects of the digital FX board. The wavetable synthesis code has been rewritten to allow interpolation between waveforms which are not contiguous in memory. This allows the definition of wavetables which are a subset, or a permutation, or a mix of the existing wavetables. 10 such wavetables have been added to oscillator 1, approximating classic Waldorf Microwave wavetables. MIDI Upon reception of a program change, the active patch number is updated (in v0.92, the patch was loaded but the patch number was not changed). Code Removed some cruft left after the oscillators rendering rewrite of v0.92. Saved 110 bytes of code. The classes and functions in the 'hal' directory are now an independent project called AVRil. I/O pins are now referenced by port/bit rather than by an Arduino-style pin number. v0.92 UI Patches can be tweaked from the load/save page. In this case, the 4 knobs have the functions assigned to them in the performance page for this patch. The Shruthi can be configured to boot directly on the presets page (aka \"presets mode\"). Non-blocking ADC scanning increases UI responsiveness. The \"mix\" and \"osc 1\" pages have been modified. The sub-oscillator settings are now on the same page as the oscillator 1 settings. Holding the load/save switch (S6) pressed down while rotating the encoder allows the values to be incremented/decremented by steps of 10. Useful for browsing patches! System Different options are available for using the 4 CV: 4 CV ins (assignable in mod matrix -- default setting), 32-knobs programmer, or simple mapping to cutoff, param1/param2 for pedals and joystick. External eeproms larger than 64kb are supported, up to 512kb. Note that when a 512kb eeprom is used, the last 64kb block is not used (this is due to the fact that 16-bit arithmetic is used to compute addresses, and that the address space includes the 16kb of the internal eeprom). Patches / sequences loading and saving can now be linked together (loading patch 15 simultaneously loads sequence 15...). Since it is not clear how this feature will be exposed in the UI, it is for now dormant. MIDI SysEx Patch request command (0x11 0x00). Upon reception of this command, the Shruthi dumps the currently edited patch. Might be useful for an editor! SysEx Patch write command (0x21 0x00 0xnn 0xnn). Upon reception of this command, the Shruthi writes the current patch to a target memory. Support for NRPN increment/decrement. The SysEx backup protocol has been extended to support backing up / restoring more than 16kb of patch data. A bank and program change message is sent whenever a preset is loaded. Bank change messages are handled, to allow patches above 128 to be loaded. Volume change messages (CC 7) are handled. A new MIDI out mode has been added in which only user-initiated knobs changes are sent to the MIDI out. This mode is ideal for using the Shruthi with both its IN/OUT ports connected to the same device. The other modes are not suitable for operation in this configuration since they can cause unwanted MIDI loops. Synthesis The shape of the envelope (approximation of an exponential) has been refined. The \"2 bits\" modulation destination is gone, since there are now better ways (extra TX pin, shift register out) to communicate with a filter board. A new modulation destination (replacing \"2 bits\") allows the attack of both envelopes to be sped up. This settings is particularly useful when velocity is used as a modulation source. The \"digital silencing\" of oscillators when envelopes have reached zero has been improved. The oscillators are now digitally silenced whenever the VCA destination in the modulation matrix has reached a value of zero. The noise source in the mixer is now refreshed at 40kHz instead of 10kHz, giving it a richer timbre. The phase counters are now 24 bits instead of 16 bits. This allows more subtle detuning effects between the oscillators, especially in the lowest notes. The audio engine has been rewritten from a \"breadth first\" to a \"depth first\" perspective, and as a result, is faster. As a result of the audio engine rewrite, the vowel oscillator can now be used with the noise and sub generators. The crossfading between wavetable zones is more subtle on the pulse oscillator (square with a parameter > 0). To make more room for upcoming features, the waves wavetable has been downsampled to 128 samples/waveform instead of 256. New mixing modes (>>4, >>8) allow the oscillators signal to be bitcrushed (sample rate reduction with a S&H) before being sent to the filter. A new feature (\"operators\") allows 2 pairs of modulation sources to be combined through a variety of mathematical operations (addition, multiplication, comparison) to yield two new complex modulation sources. Code Various code size optimizations saved 1kb. The modulation matrix processing code has been simplified. Changed compilation flags to achieve smaller code size. A menu in the UI and code infrastructure is ready to provide filter-board specific menus and parameters in future firmware revisions. v0.91 Improved encoder debouncing/decoding algorithm. Changed \"load\" label to \"browse\" in patch load/save page. v0.90 Original release.","title":"Firmware development"},{"location":"shruthi/firmware/#where","text":"The firmware code is hosted on github . Latest version (v1.02) .","title":"Where?"},{"location":"shruthi/firmware/#what","text":"To build the firmware you need: A GCC toolchain for the AVR platform, the AVR includes/libraries, and the AVRDude utility. All those guys are bundled with the Arduino development environment, which you can get here ; or with CrossPack . If you use Windows, you can find them in WinAVR . Make sure your avr-gcc is as close as possible to 4.3.3 since the most recent versions of gcc are performing optimizations differently and can cause the firmware to grow out of the size constraints. Python (2.5 or above) and numpy . I love numpy! To flash it, you need either: An AVR ISP programmer, with a 2x3 connector. The one used for the Shruthi development is this one . OR you can also use the firmware update by MIDI procedure described at the end of the user manual. It will take longer to load your program using this method (1 min vs 5s) - thus it is recommended only if you are really scared of wires and circuits! The Shruthi build environment is command-line / makefile based. OS X is the system on which Mutable instruments develops ; but getting it to work on Linux is straightforward. On Windows machines you might have to fiddle a bit with system paths to get things to work.","title":"What?"},{"location":"shruthi/firmware/#how","text":"","title":"How?"},{"location":"shruthi/firmware/#building-the-firmware","text":"Get the source from github (or run git clone ... ). Move to the directory created by git (or the directory created when decompressing the .zip). Run git submodule init and git submodule update to pull the dependencies. Edit the avrlib/makefile.mk file (extended by all makefiles) to change the path (AVR_TOOLS_PATH / AVR_ETC_PATH) to the directory containing the AVR toolchain. This path depends on your system. In the same file, change PROGRAMMER to the reference of your ISP programmer (don't care about this if you want to upload your modified firmware by MIDI). Build the resources: make resources . Pre-compiled resource files ( resources.cc , resources.h ) are already bundled with the source code, so if you don't modify the Python resources file, you don't need this step. Build the firmware: make . Make sure that the firmware size is below 64512 bytes: make size (If you don't have figlet and cowsay installed, you're going to miss some awesome Moose action, but you can still type: cat shruthi1.size and add the first 2 numbers). Note that trying to upload with the standard MIDI update procedure a firmware size too large can \"brick\" your unit. If you want to upload the firmware by MIDI (or realease a mod to the community): make midi (you need python installed on your computer for this step). The resulting file is in build/shruthi1/shruthi1.mid .","title":"Building the firmware"},{"location":"shruthi/firmware/#bootloader-development","text":"The \"firmware update by MIDI\" feature is made possible by a 1k bootloader programmed into the chips distributed with the kits. The source code of this bootloader can be compiled with make -f bootloader/makefile ; and uploaded with make -f bootloader/makefile upload","title":"Bootloader development"},{"location":"shruthi/firmware/#starting-from-a-blank-chip","text":"The single command: make bake_all first sets up the fuses at a slow speed ; and then flashes the firmware, bootloader and internal eeprom at high speed.","title":"Starting from a blank chip"},{"location":"shruthi/firmware/#installing-the-factory-presets","text":"This is not properly speaking firmware development, but hey, here we go. The factory data for the eeprom is in this file . Play the .syx file into the Shruthi (with its firmware installed of course).","title":"Installing the factory presets"},{"location":"shruthi/firmware/#some-notes-about-the-code","text":"","title":"Some notes about the code"},{"location":"shruthi/firmware/#avr-development-library-avrlib","text":"Most of the code directly dealing with the hardware is in the avrlib directory, which is an import for the avril project . You'll find there various template classes allowing hardware resources (serial ports, switches, LCD display...) to be manipulated with a friendly, high-level syntax... without the cost associated with abstraction since everything is flattened/evaluated/inlined at compile time. A good example (I think) of what C** can bring to embedded development.","title":"AVR development library (avrlib)"},{"location":"shruthi/firmware/#resources","text":"All the data residing in program flash ROM (strings, lookup tables, waveforms) is contained in the shruthi/resources.h and shruthi/resources.cc files, which are automatically generated from some python code (this is where the wavetable generation happens). If you want to add a string to your program, add the string to the list shruthi/resources/strings.py , build the resources, and use the ResourcesManager::LoadStringResource(STR_RES_MY_STRING, buffer, size); idiom to copy it to RAM whenever you want to access it.","title":"Resources"},{"location":"shruthi/firmware/#code-tour","text":"","title":"Code tour"},{"location":"shruthi/firmware/#core-data-structures","text":"Patch ( patch.h ) is the data structure holding the synthesis parameters. SequencerSettings ( sequencer_settings.h ) is the data structure holding the sequencer configuration (tempo, quantize, arpeggiator pattern) and the sequence itself. SystemSettings ( system_settings.h ) is holding the global configuration data (MIDI options, transpose, tuning). Storage ( storage.h ) contains the routines for loading patch or sequence data from the internal or external eeprom ; and for parsing incoming SysEx MIDI messages (since all of them are related to reception/transmission of user data).","title":"Core data structures"},{"location":"shruthi/firmware/#synthesis","text":"Envelope ( envelope.h ) has two instances for the two envelope generators. Just like Lfo in lfo.h . Oscillator ( oscillator.h ) contains the main oscillator code. To add an oscillator algorithm: Add the oscillator name in the oscillator names list in strings.py Add an entry in the OscillatorAlgorithm enum in patch.h In oscillator.cc , locate the table of function pointers at the end of the file. Add an entry: &Osc::RenderMyAlgo . Note that you have to make sure that the string, enum entry, and function pointer entry are in the same order! For example, if you've added the string at the end of the list, you'll have to add the enum entry and function pointer entries at the end of their respective lists too. Add a void RenderMyAlgo(uint8_t* buffer) forward declaration in oscillator.h ; and implement void Oscillator::RenderMyAlgo(uint8_t* buffer) in oscillator.cc . Your function must fill kAudioBlockSize samples of audio into the buffer passed as an argument. The macros BEGIN_SAMPLE_LOOP , END_SAMPLE_LOOP and UPDATE_PHASE can be used to take care of phase incrementation and sync. RenderDirtyPwm is probably the simplest example to study! TransientGenerator ( transient_generator.h ) is the sound generator responsible for adding clicks/attacks at the beginning of the note. NoteStack ( note_stack.h ) is a stack (implemented as a linked list with \"pointers in a pool array\" instead of pointers) used for storing the depressed keys and doing voice allocation. SynthesisEngine ( synthesis_engine.h ) contains the bulk of the synthesis code, and integrates all the synthesis-related objects described above. The synthesis engine can handle several voices (at the moment only one) and start/stop a sound on each voice. However, it is not responsible for doing all the voice stealing / arpeggiation stuff. The classes responsible for turning sequencer data and incoming MIDI messages into actual notes routed to the synthesis voice are VoiceController ( voice_controller.h ) and VoiceAllocator ( voice_allocator.h ). VoiceAllocator is used in polychaining mode, and implements a LRU voice-stealing algorithm. VoiceController is used otherwise, and handles the note priority (through a NoteStack ) and all the additional events generated by the sequencer or arpeggiator.","title":"Synthesis"},{"location":"shruthi/firmware/#interaction-with-the-rest-of-the-world","text":"Editor ( editor.h ) is responsible for all the UI, pages navigation, etc. There are 3 modes for the editor, corresponding to the 5th key: patch ; sequence ; and performance. Each mode contains grouped pages. Each page has a UI Type (sequencer, traditional 4 parameters view). For each UI type, callback functions for drawing the screen, handling pots or encoder events are implemented. ParameterDefinitions ( parameter_definitions.h ) is the central repository of everything the Shruthi needs to know about each synthesis parameter: its name, unit, descriptive string, and range. It is used by the editor, the random patch generator, to validate incoming NRPN data, and to scale incoming CC data. MidiDispatcher ( midi_dispatcher.h ) is the class that will handle the reception of MIDI messages. All the handlers (NoteOn, ControlChange) will be inlined into the MIDI parsing state machine. Those handlers are responsible for updating the LCD display (status character), the Editor (step by step recording), the MIDI out and obviously the synthesis engine.","title":"Interaction with the rest of the world \u00ae"},{"location":"shruthi/firmware/#beast","text":"The main code is in shruthi.cc . It consists of short chunks of code, aka \"tasks\" called in turns. The most important task, called inbetween all the other ones, is AudioRenderingTask which fills as much as possible of the audio buffer. Very few things happens in timer ISR-land (clocked at 39kHz): Pop a sample from an audio buffer and write it to the PWM output Every 16th call, pop a nibble from the display buffer and write it to the LCD Every 16th call, pop a byte from the MIDI out buffer and write it to the UART (This means the Shruthi can only achieve 78% of the maximum MIDI bandwidth). Every 16th call, debounce the switches Every 32th call, do the math to keep track of the number of ms elapsed since boot","title":"Beast"},{"location":"shruthi/firmware/#releases","text":"","title":"Releases"},{"location":"shruthi/firmware/#v102","text":"This version improves the scanning rate of knobs for the \"classic\" (4-knob) Shruthi, and contains several minor bug fixes.","title":"v1.02"},{"location":"shruthi/firmware/#v101","text":"Major code rewrite!","title":"v1.01"},{"location":"shruthi/firmware/#synthesis_1","text":"Single-cycle LFO mode. Individual ADSR parameters are modulation destinations.","title":"Synthesis"},{"location":"shruthi/firmware/#sequencing","text":"The warp modes for the sequencer/arpeggiator have been deprecated. The impro and rec modes for the sequencer have been deprecated. The internals of the sequencer/arpeggiator are now that of a reasonable 24 ppqn MIDI sequencer. External MIDI sync is tighter, and the Shruthi can output a MIDI clock to control other devices. Tempo-synchronized LFOs do not have the occasional reset/glitching they sometimes had in the previous version. The Warp setting has been replaced by an adjustable MIDI clock divider, which allows the arpeggiator or sequencer to run at other divisions than sixteenth notes, from 1/96 notes to whole notes. This new feature explains the disappearance of \"turbo\" tempi and dividers in the external clock mode.","title":"Sequencing"},{"location":"shruthi/firmware/#performance-and-system","text":"Duophonic mode behaves in a more predictable way, especially when coupled with the arpeggiator. Arpeggiator, portamento/legato and sequencer settings are now saved with the patch. When an arp or sequence is already running, loading a new patch will only load the synth settings (to keep your sequence running...) Pressing the encoder for 1 second will latch whatever the synth is playing (arpeggio, sequence, or single note), and will put the unit in latched mode unless the encoder is pressed again for 1s. Using the latch function when no note is playing puts the synth in \"jam\" mode - you can scroll through preset scales using the knobs. It works with the sequencer and arpeggiator too, so it effectively replaces the \"test note\". It is no longer possible to individually save/load sequences. Sequences are now part of a patch.","title":"Performance and system"},{"location":"shruthi/firmware/#midi","text":"The MIDI split mode has been deprecated. The code handling CC/NRPN has been rewritten. Major benefit: knob moves are transmitted as CC rather than as NRPN - whenever possible of course.","title":"MIDI"},{"location":"shruthi/firmware/#ui","text":"Support for the XT digital control board. The UI is much more responsive. The Performance page has been deprecated. The Triggers feature has been deprecated. What used to be the \"split point\" setting is now an option to choose the behaviour at boot: splash screen on/off and boot on the presets page on/off. Screensaver (for OLED displays).","title":"UI"},{"location":"shruthi/firmware/#filter-board-handling","text":"Support for an upcoming filter board by TubeOhm.","title":"Filter board handling"},{"location":"shruthi/firmware/#v098","text":"Minor bug fixes, and extended SysEx support for third party editors .","title":"v0.98"},{"location":"shruthi/firmware/#v097","text":"","title":"v0.97"},{"location":"shruthi/firmware/#synthesis_2","text":"The envelopes have a different behaviour - the attack does not reset 0 at the beginning of each note, but rather starts from the current level of the envelope. The way velocity is managed in the context of note priority handling has been changed. When you play and hold a note, play a new note and release it, the held note is retriggered with its original velocity. Phase increments are computed using a new interpolation technique, saving 1.3kb of code size.","title":"Synthesis"},{"location":"shruthi/firmware/#filter-board-handling_1","text":"Support for the \"LP2+Delay\" filter board.","title":"Filter board handling"},{"location":"shruthi/firmware/#ui_1","text":"When using the programmer, the screen shows the value of the edited parameter.","title":"UI"},{"location":"shruthi/firmware/#v096","text":"","title":"v0.96"},{"location":"shruthi/firmware/#synthesis_3","text":"The LFSR used for the noise oscillator can now be reset by oscillator sync. This allows the creation of pitched sounds with a very rich timbre. Constant values have been introduced in the mod matrix. They can be combined with operators to attenuate, translate, or quantize a modulation source by a known value. A Quantize operation has been added to the operators. It reduces the bit-depth of a modulation source to create a Sample & Hold like effect on any modulation. A Lag processor operation has been added to the operators. It smoothes the slope of a modulation source to create more progressive modulations. Two MIDI channel/note combo can be defined as \"triggers\". When such a MIDI message is received, a note is not played. Instead, a modulation source (\"trigger 1\" and \"trigger 2\" in the mod matrix) changes. This can be used to trigger effects (such as a pitch change or LFO speed boost) from a keyboard or an external MIDI sequencer. 2 new modulation destinations, \"env 1\" and \"env 2\" allow the envelopes to be triggered whenever a modulation source crosses a threshold. A new mixing mode, \"duo\", allows the synth to be used in a pseudo-duophonic mode. The least recently played note is played on osc 2, and the most recently played note is played on osc 1. 3 new mixing modes, \"2 steps\", \"4 steps\" and \"8 steps\" allow the oscillators (or oscillators, sub-oscillator and noise source) to be triggered rythmically at each note. A new mixing mode, \"seqmix\" allows the oscillators/sub/noise sources to be rythmically disabled according to the pattern input in the step sequencer. This allows very crude rythmic patterns to be programmed (using noise as a snare drum and the sub-oscillator as a kick). The attack time modulation destination now accepts both positive (faster attack) and negative (slower attack) modulations.","title":"Synthesis"},{"location":"shruthi/firmware/#filter-board-handling_2","text":"The cutoff range of the Polivoks filter board has been shifted up by one octave.","title":"Filter board handling"},{"location":"shruthi/firmware/#code","text":"256 bytes have been saved by using the same table for the lowest octaves of the triangle oscillator. 129 bytes have been saved by simplifying the \"vibes\" wavetable. A bug that caused random corruption of an unused memory area during program startup has been fixed. 2.5 kbytes have been saved by de-specialization the Oscillators code.","title":"Code"},{"location":"shruthi/firmware/#v095","text":"","title":"v0.95"},{"location":"shruthi/firmware/#synthesis_4","text":"A page has been added to configure the routing of the Polivoks filter board. The page showing the hpf settings for the SSM2044 filter board simultaneously displays the cutoff/resonance of the lpf - allowing both filters to be tweaked at the same time. Added a cutoff-coupling mode for the dual SVF filter board. MIDI notes in the 120-128 range are no longer wrapped to 108-116. Fixed a bug causing a faint VCA bleed with some specific combinations of modulation sources routed to the VCA. Added a new mixing mode, \"fold\", which equally mixes oscillator 1 and 2 and send the output to a fold-back distortion, the amount of which is controlled by \"mix\" Added a new mixing mode, \"bits\", which equally mixes oscillator 1 and 2 and send the output to a bit-reduction distortion, the amount of which is controlled by \"mix\".","title":"Synthesis"},{"location":"shruthi/firmware/#code_1","text":"512 bytes have been saved by using the same table for the lowest octaves of the triangle oscillator.","title":"Code"},{"location":"shruthi/firmware/#ui_2","text":"Fixed a bug occurring when scrolling backwards from the second filter page. Fixed a bug preventing the tempo and LFO rate parameters to be edited with the pot, when the unit is configured in \"snap\" mode.","title":"UI"},{"location":"shruthi/firmware/#v094","text":"","title":"v0.94"},{"location":"shruthi/firmware/#synthesis_5","text":"Fixed a bug that caused a loudness drop of the vowel oscillator Fixed a bug that caused the filtered noise \"oscillator\" to output incorrect values when the parameter was set to a high value. The envelopes now have a smoother curve, and slower attack / decay / release times can be achieved. Fixed a timing bug that caused the main oscillators pitch to be off by 8cents.","title":"Synthesis"},{"location":"shruthi/firmware/#code_2","text":"The z-family oscillators now share common code, saving \\~700 bytes of code. Resource table de-duplication saved \\~200 bytes of code. The vowel oscillator code has been simplified by \\~100 bytes. MIDI input is polled from the 39kHz audio interrupt rather than interrupt-driven. This saves \\~80 CPU cycles per byte of MIDI data received,since there is no extra ISR intro/outtro when a MIDI byte is received.","title":"Code"},{"location":"shruthi/firmware/#midi-implementation","text":"The Shruthi now uses an officially registered manufacturer ID for SysEx communication. As a result, patch dumps/backups made with previous versions willstill be readable with v0.94 and onwards, but patch dumps made with v0.94 won't be readable with earlier versions. CC90 and CC87 can be used to control the cutoff frequency and resonance of the second filter on the dual SVF filter board.","title":"MIDI implementation"},{"location":"shruthi/firmware/#v093","text":"","title":"v0.93"},{"location":"shruthi/firmware/#synthesis_6","text":"A menu has been added to control the routing of the dual SVF filter board. A menu has been added to control the effects of the digital FX board. The wavetable synthesis code has been rewritten to allow interpolation between waveforms which are not contiguous in memory. This allows the definition of wavetables which are a subset, or a permutation, or a mix of the existing wavetables. 10 such wavetables have been added to oscillator 1, approximating classic Waldorf Microwave wavetables.","title":"Synthesis"},{"location":"shruthi/firmware/#midi_1","text":"Upon reception of a program change, the active patch number is updated (in v0.92, the patch was loaded but the patch number was not changed).","title":"MIDI"},{"location":"shruthi/firmware/#code_3","text":"Removed some cruft left after the oscillators rendering rewrite of v0.92. Saved 110 bytes of code. The classes and functions in the 'hal' directory are now an independent project called AVRil. I/O pins are now referenced by port/bit rather than by an Arduino-style pin number.","title":"Code"},{"location":"shruthi/firmware/#v092","text":"","title":"v0.92"},{"location":"shruthi/firmware/#ui_3","text":"Patches can be tweaked from the load/save page. In this case, the 4 knobs have the functions assigned to them in the performance page for this patch. The Shruthi can be configured to boot directly on the presets page (aka \"presets mode\"). Non-blocking ADC scanning increases UI responsiveness. The \"mix\" and \"osc 1\" pages have been modified. The sub-oscillator settings are now on the same page as the oscillator 1 settings. Holding the load/save switch (S6) pressed down while rotating the encoder allows the values to be incremented/decremented by steps of 10. Useful for browsing patches!","title":"UI"},{"location":"shruthi/firmware/#system","text":"Different options are available for using the 4 CV: 4 CV ins (assignable in mod matrix -- default setting), 32-knobs programmer, or simple mapping to cutoff, param1/param2 for pedals and joystick. External eeproms larger than 64kb are supported, up to 512kb. Note that when a 512kb eeprom is used, the last 64kb block is not used (this is due to the fact that 16-bit arithmetic is used to compute addresses, and that the address space includes the 16kb of the internal eeprom). Patches / sequences loading and saving can now be linked together (loading patch 15 simultaneously loads sequence 15...). Since it is not clear how this feature will be exposed in the UI, it is for now dormant.","title":"System"},{"location":"shruthi/firmware/#midi_2","text":"SysEx Patch request command (0x11 0x00). Upon reception of this command, the Shruthi dumps the currently edited patch. Might be useful for an editor! SysEx Patch write command (0x21 0x00 0xnn 0xnn). Upon reception of this command, the Shruthi writes the current patch to a target memory. Support for NRPN increment/decrement. The SysEx backup protocol has been extended to support backing up / restoring more than 16kb of patch data. A bank and program change message is sent whenever a preset is loaded. Bank change messages are handled, to allow patches above 128 to be loaded. Volume change messages (CC 7) are handled. A new MIDI out mode has been added in which only user-initiated knobs changes are sent to the MIDI out. This mode is ideal for using the Shruthi with both its IN/OUT ports connected to the same device. The other modes are not suitable for operation in this configuration since they can cause unwanted MIDI loops.","title":"MIDI"},{"location":"shruthi/firmware/#synthesis_7","text":"The shape of the envelope (approximation of an exponential) has been refined. The \"2 bits\" modulation destination is gone, since there are now better ways (extra TX pin, shift register out) to communicate with a filter board. A new modulation destination (replacing \"2 bits\") allows the attack of both envelopes to be sped up. This settings is particularly useful when velocity is used as a modulation source. The \"digital silencing\" of oscillators when envelopes have reached zero has been improved. The oscillators are now digitally silenced whenever the VCA destination in the modulation matrix has reached a value of zero. The noise source in the mixer is now refreshed at 40kHz instead of 10kHz, giving it a richer timbre. The phase counters are now 24 bits instead of 16 bits. This allows more subtle detuning effects between the oscillators, especially in the lowest notes. The audio engine has been rewritten from a \"breadth first\" to a \"depth first\" perspective, and as a result, is faster. As a result of the audio engine rewrite, the vowel oscillator can now be used with the noise and sub generators. The crossfading between wavetable zones is more subtle on the pulse oscillator (square with a parameter > 0). To make more room for upcoming features, the waves wavetable has been downsampled to 128 samples/waveform instead of 256. New mixing modes (>>4, >>8) allow the oscillators signal to be bitcrushed (sample rate reduction with a S&H) before being sent to the filter. A new feature (\"operators\") allows 2 pairs of modulation sources to be combined through a variety of mathematical operations (addition, multiplication, comparison) to yield two new complex modulation sources.","title":"Synthesis"},{"location":"shruthi/firmware/#code_4","text":"Various code size optimizations saved 1kb. The modulation matrix processing code has been simplified. Changed compilation flags to achieve smaller code size. A menu in the UI and code infrastructure is ready to provide filter-board specific menus and parameters in future firmware revisions.","title":"Code"},{"location":"shruthi/firmware/#v091","text":"Improved encoder debouncing/decoding algorithm. Changed \"load\" label to \"browse\" in patch load/save page.","title":"v0.91"},{"location":"shruthi/firmware/#v090","text":"Original release.","title":"v0.90"},{"location":"shruthi/manual/","text":"This manual documents the version 1.00 of the firmware - which has been introduced with the Shruthi XT but can also be installed on the classic version of the Shruthi. Getting started Overview The Shruthi comes either in the classic version with only 4 knobs below the screen; or the XT version which provides hands-on controls on all synthesis parameters. The panel of the XT version is divided into 3 sections: oscillators/mixer/filter ; main control ; and modulations (LFOs/envelopes). The main control section is the same on the XT and on the classic versions. The main control section consist of the following elements: The LCD or OLED display shows, most of the time, the name and value of the 4 parameters that can be directly edited with the potentiometers under the screen. When a parameter is modified, the display temporarily shows the full name of the parameter and its value. In some other circumstances, the display might show a confirmation messages, the content of a sequence, etc. The clickable encoder can be used to navigate between parameters/pages, or to step through the values of a parameter. The four potentiometers below the display modify the synthesis parameters currently displayed on the active page. The 8 LEDs provide complementary information about the active page. The 6 switches facilitate navigation between pages. The switches S1 to S4 are used to cycle between groups of related pages ; S5 is used to switch between the synthesis pages and the sequencer/system pages ; and S6 is used to bring the load/save page to load and recall presets. The following connectors are available on the rear panel: 1 : 2.1mm DC power jack. The Shruthi can be powered with a 7.5V-9V unregulated supply, or with a 9V battery adapter. Make sure that the connector has a center pin (or tip) positive / outer collar (or sleeve) negative pin polarity. Most universal power supplies allows the polarity to be selected -- the polarity being often represented by a diagram like this: - (o +, or by the indication tip: + . The power supply has a reverse polarity protection. 2 : MIDI in. This input should be connected to the MIDI out port of a sound card, master keyboard, sequencer... 3 : MIDI out. This output can be used as a MIDI thru, but also to transmit the notes generated by the Shruthi's internal sequencer, backup data, or for polychaining units. 4 : Line-level, mono audio output. 5 : Line-level, mono audio input. Note that the external audio signal flows through the VCF and the VCA - you won't hear anything until a note or sequence is played by the Shruthi to \"open\" the VCA. In addition to the extra knobs for editing synthesis parameters, the XT additionally features: An on/off switch on the back panel. A global volume knob. A Jam button which holds a note and starts the sequencer/arpeggiator. Controls and navigation Pages The Shruthi parameters are edited by blocks of four (one per potentiometer). A set of four related parameters are grouped together on a page . For example, the Filter page will assign the four following functions to the four potentiometers: filter cutoff, filter resonance, envelope to filter modulation, LFO to filter modulation. The LEDs L1 to L6 display the currently active page. Moreover, the display is constantly showing which knob does what in the current page. For example, if the filter page is active, the display will show: Cut res env lfo 110 0 10 0 Pages are bundled together in groups, and repeatedly pressing one of the group switches cycles between the different pages in this group. For example, pressing S1 cycles between the oscillator 1 page, the oscillator 2 page, and the mixer page. Pages are also grouped into two large categories: one category contains all the pages related to sound synthesis -- the ones you'll navigate in when creating a sound -- and another category contains all the pages related to sequencing and to system settings. The switch S5 is used to toggle between the two categories. When the synthesis category is active, the LED on top of S5 is lit. When the sequencer category is active, this LED is not lit. The switches S1 , S2 , S3 and S4 cycle through different groups of pages as shown on this diagram: The upper list shows the pages in the synthesis category accessible from each switch, the lower list shows the pages in the sequencer category. L7 indicates which page category is active, and the leds L1-L6 show which page is active. Here's an example. The Shruthi displays: Cut res env lfo 110 0 10 0 L7 is lit (synthesis category) and L3 is lit: the filter page is active. Press S1 to jump into the oscillators group. L1 is lit, and the screen is now displaying: Sha prm rng sub saw 0 0 tr1 Press S1 again to move to the next page in the oscillators group. L2 is now lit, the screen is displaying: Sha prm rng tun squ 16 -12 12 Now press S5 to switch to the sequencer category. L7 is now off, L1 is lit. The active page is the clock page: Mod bpm gro amt stp 120 swi 0 Press S5 again to get back to the synthesis category. L7 is on, and you are back to the oscillator 2 page. Editing When a page is active, a summary of the four parameters modified by each potentiometer is displayed on screen. While tweaking a potentiometer, the full parameter name, its value, and the page name, are temporarily displayed on the screen: filter cutoff 89 After a short delay, the four parameters page summary is shown again. On the Shruthi XT , modifying any parameter through the switches or buttons on each side of the central section also brings this temporary display. Using the encoder. When the Shruthi is displaying a page summary, the rotary encoder can be used to scroll through the parameters. The name of the active parameter is capitalized. For example, resonance is here the active parameter: cut Res env lfo 110 0 10 0 Rotate the encoder clockwise to make env the active parameter, rotate the encoder counter-clockwise to make cut the active parameter. If you continue rotating the encoder clockwise for several steps, the next page, env 1 , will be shown, and its first parameter, atk , will become selected. Once a parameter is selected, click the encoder to edit it. The encoder is now used to increment/decrement the parameter value. Once the value has been set, click on the encoder again to move back to the 4 parameter summary. Note that potentiometer and encoder editing can be combined. For example, use a potentiometer to quickly adjust a parameter, and then, while the parameter name is still displayed on the screen, use the encoder to fine-tune it. A last trick: if you hold S6 while rotating the encoder, it will increment/decrement by 10 instead of 1. This is particularly useful for browsing long lists of patches... That's all you need to know about the pages/navigation system! Display status symbols The Shruthi sometimes flashes a symbol on the first line of the display to signal incoming MIDI messages or the completion of specific commands. Symbol Status (note icon) A Note On MIDI message has been received (pitch bend lever icon) A pitch bend message has been received \\~ A control change message has been received ! The Shruthi is busy accessing memory - this can interrupt sound generation x The patch has been reset to initial settings ? The patch has been randomized > Patch or sequence SysEx data is being sent + Patch or sequence SysEx data has been successfully received # The Shruthi has received invalid SysEx data (for example a SysEx message intended for another device) Reference The section describes one by one all the parameters accessible on the synthesis and sequencer pages. Synthesis Before digging into the pages details, here is a diagram of the Shruthi signal flow. The audio signal flow is represented in red (digital path) and then in orange (analog path): The oscillators 1 and 2 generate digital waveforms, which are combined together by the modulator. The default modulator is a balance control over the level of the two oscillators, but more esoteric modulation methods are available. The sub-oscillator (which is synchronized in pitch with the oscillator 1, but 1 octave lower) also generates a basic waveform. The click generator generates a short transient/click at the beginning of the note. Note that the sub-oscillator and the click generator cannot be used at the same time. It's bassy-beefy or clicky, not both. The output of the modulator, the sub-oscillator/click-generator and some additional noise are mixed together. You can adjust the balance of each ingredient. The result is converted into a pseudo analog (10 MHz / 1bit) audio signal, and mixed in the analog domain with an external signal coming from the Audio in jack. The result is then sent to an analog VCF and VCA, to produce the final audio signal. Some filter boards might offer other signal transformations such as additional filters, effects, distortions... Each of these modules have parameters (represented by the blue arrows) which can be controlled by any of the modulation sources listed below. However, some connections are already \"hardwired\" (or rather \"softwired\" in the firmware): The oscillators' pitch always track the note played on the keyboard. The filter cutoff frequency always tracks the note. Again, this can be disabled or attenuated by applying a negative modulation from note pitch to cutoff frequency. The rationale behind this choice is that most of the time, you want 1:1 tracking, so this frees up a slot in the modulation matrix for something more interesting! Lfo 2 and Envelope 1 are always connected to the filter, their modulation amount being controlled by dedicated parameters on the filter page. The following routing programmed in the init patch: Source Destination Amount Lfo 1 Oscillator 1 coarse pitch 0 Lfo 1 Oscillator 2 coarse pitch 0 Lfo 2 Oscillator 1 PWM 0 Lfo 2 Oscillator 2 PWM 0 Lfo 2 Oscillators balance 0 Step sequencer Oscillators balance 0 Velocity Oscillator 1 PWM 0 Velocity Oscillator 2 PWM 0 Envelope 2 VCA gain 100% Velocity VCA gain 25% Bender Oscillator 1+2 fine pitch 2 semitones LFO Oscillator 1+2 fine pitch (vibrato) 2 semitones Oscillator 1 Sha prm rng sub saw 0 0 sq1 sha (shape) : Oscillator 1 waveform shape. prm (parameter) : Oscillator 1 parameter. This changes the timbre of the generated waveform, in a waveform-specific way (see below). rng (range) : Oscillator 1 pitch, from -24 semitones to 24 semitones (relative the pitch of the MIDI note). sub (subosc) : Sub-oscillator shape (see below). The following is a list of all the available waveforms, with some applications and a description of what adjusting the parameter setting actually does. none : Silence This simply switches off the oscillator. This might be useful for filtering/gating external signals, or to temporarily mute an oscillator when editing a patch. saw : Sawtooth This waveform is perfect for basses and brass sounds. The parameter controls the waveshapping - when its value is increased, an increasingly large section of the waveform is shifted up. Note that this is not intended to be a perfect, drawn with a ruler, sawtooth. It contains a bit of high-pass filtering to make it sound more Juno-y. This waveform is band-limited. Thus, only a limited amount of aliasing artifacts will be heard when playing high-pitched notes. square : Square wave The parameter controls the pulse-width. This waveform is perfect for simulating a clarinet, for basses, \"hollow\" sounds or Depeche Mode-like leads. Note that this is not intended to be a perfect, drawn with a ruler, square wave. It contains a bit of high-pass filtering to make it sound more Juno-y. This waveform is band-limited and only a limited amount aliasing will be heard when playing high-pitched notes. Note that there's a slight difference in sound when moving the parameter from 0 to 1. To offer the best sound quality, the pulse width = 50% flavor is read straight from a wavetable at full sample rate, while the pulse width > 50% flavor is obtained from two dephased sawtooth waves, evaluated at half the sample rate. For bass sounds, for which aliasing is not going to be a problem, it is recommended to use pwm instead of square to get a beefier sound. triang : Triangle A pure waveform, which serves as a good basis for flute or soundchip-like leads. The parameter controls some kind of waveshapping, clipping the bottom of the waveform. This waveform is band-limited and will still sound fine above C5. zsaw : Phase-distortion sawtooth with filter sweep This waveform uses phase distortion to recreate a low-pass filtered sawtooth by progressively \"pinching\" the phase of a sine wave. The parameter controls the brightness of the sound: from a sine wave to a sawtooth, then from a sawtooth to a sawtooth gone through an ugly transistor amp. Good for dirty bass guitar sounds or clavinets. zreso : Phase-distortion sawtooth with resonant filter sweep This waveform uses phase distortion to recreate a sawtooth sent through a low-pass filter with high resonance. The parameter controls the resonance frequency. Useful for doubly-filtered sounds, formants, or anything where its synthetic, cheesy, feel will shine. ztri : Phase-distortion resonant triangle monster This thing is hard to describe and must be experienced. It sounds like a resonant filter sweep, but has a very hollow, synthetic quality. It may or may not have been in the Casio CZ-101. This waveform is likely to result in whacky sounds, vaguely evoking hardsync. zpulse : Phase-distortion trapezoidal creature Yet another waveform that makes little sense. When the parameter is set to 0, it sounds like a fat superposition of a square wave and a sawtooth. Sweeping the parameter value progressively increases what sounds like the resonance of an odd, goofily saturated analogue filter. zsync : Phase-distortion/self-sync trick You know the trick: one oscillator playing a low-frequency square wave and another oscillator a higher-frequency sine wave, the first one resetting the phase of the second... and the two of them sent into a ring-modulator! Now roll this into one single sound generator, the parameter of which controls the frequency ratio of the two oscillators: we call it zsync... The resulting sound is close to a Jew's harp or Morsing - band-passey and formantey. pad : Stack of 4 detuned sawtooth waves As the name implies, this waveform made of four stacked sawtooth waves is useful for pads (when a copious amount of filtering is applied) or for harsh trance leads. The parameter controls the amount of detuning between the four waves. Note that no bandlimiting is happening here, so this thing doesn't sound quite good above C5... but it's doing a perfect job in the bass range! fm : Minimal 2-operators FM The parameter controls the modulation strength. This oscillator provides the base material for metallic sounds, bells, metallophones, or the next 386 DX hit. When the fm oscillator is selected, the range parameter plays a slightly different role than usual: instead of controlling the main pitch of the note, it controls the modulator frequency, and has a drastic impact on the timbre. waves , tampur , digitl , metall , bowed , slap , organ , male : wavetables, wavetables, wavetables! All these waveforms are wavetables, comprising 16 single-cycle waveforms. The parameter scans the wavetable, smoothly interpolating between each waveform. Some of these tables are \"transwaves\": the single cycle waveforms were extracted from different \"stages\" of a sample, and you can somehow recreate the original sample by using an envelope that will sweep the parameter from 0 to 127. waves are 16 basic waveforms, or rather two series of 8 basic waveforms: waveforms 9-16 are one octave higher. tampur is a transwave extracted from a looped Tampura note. digitl is a PPG-wave classic. metall is made from single cycle waveforms extracted from classic D50 patches. bowed is a transwave extracted from cello sounds. slap is a transwave extracted from an SQ-80 slap bass patch. organ contains 16 different mixtures of pure tones, ready for some \"Light my fire\" action. male is another PPG-wave classic, it sounds vaguely like a human male voice. user : user wavetable This wavetable has two peculiarities: it is smaller than the other ones (8 single cycle waveforms, each of them being 129 samples long), and it resides in RAM instead of residing in flash ROM. By default, it is loaded with the same content as digitl , but its content can be altered by SysEx messages . You can find here some examples of MIDI files containing user wavetables. 8bits : bitwise anarchy A palette of 8-bits sounding waveforms obtained by applying bitwise operations to a basic sawtooth wave (something now known as \"biscuiting\"). crush : bit-crushed sine and triangle wave From 0-63, this oscillator will produce a bit-crushed sine wave ; 63 corresponding to the maximum amount of decimation. From 64-127, this will produce a bit-crushed triangle wave, 64 corresponding to the maximum amount of decimation. As a result, the transition from the two waveforms is smooth since the bit-crushing is very heavy when the two ends meet. A parameter value near 120 yields a very typical NES bass sound. pwm : my first Arduino synth This waveform is a shamelessly naive square wave. The parameter controls the pulse-width. Contrary to square , this waveform stinks aliasing - but for notes below C2 it is not a real problem: it becomes much more aggressive and \"in your face\" than square . noise : Filtered noise generator The parameter controls the frequency of a simple 1-pole low-pass/high-pass filter in which is sent white noise. From 0 to 63, high-frequency content is progressively added. From 63 to 127, low-frequency content is progressively removed. Perfect as a raw material for percussions or sound effects. vowel : Low-tech formant synthesis Changing the parameter will sweep between different vocal-like sounds (14 vowels and 2 consonants). Now. Spell. Daftpunk. Remaining wavetables... The remaining waveforms are an additional selection of wavetables. Some of them, like cello or vibes , are made of single-cycle waveforms extracted from samples. The others are inspired by some PPG classics! That's it for the oscillators waveforms. Oscillator 1 is linked to a sub-oscillator / transient generator. The first 6 settings correspond to the sub-oscillator, which is an oscillator of its own, playing always one or two octave lower than the oscillator 1. The next settings disable the sub-oscillator and enable various transient generators, which will produce a short, clicky sound at the beginning of the note: sq1 square sub-oscillator, 1 octave below osc. 1 tr1 triangle sub-oscillator, 1 octave below osc. 1 pl1 25% pulse sub-oscillator, 1 octave below osc. 1 sq2 square sub-oscillator, 2 octaves below osc. 1 tr2 triangle sub-oscillator, 2 octaves below osc. 1 pl2 25% pulse sub-oscillator, 2 octaves below osc. 1 click produces a discrete click (more obvious on sine/organ sounds). glitch produces a sound similar to that of a skipping CD. blow is a burst of noise with a slow attack. metal adds a metallic sounding, high-pitched click. pop adds a low-pitched discontinuity. The transient generator can be used for instance to add some punch to metallic-sounding or FM sounds, or for percussive effects. Oscillator 2 Sha prm rng tun saw 0 0 0 sha (shape) : Oscillator 2 waveform shape. The available waveforms are the same as for oscillator 1. prm (parameter) : Oscillator 2 parameter. rng (range) : Oscillator 2 pitch transposition, from -24 semitones to 24 semitones. tun (detune) : Fine detuning of Oscillator 2. Mixer Op. mix sub noi sum 32 0 0 op (operator) : Modulation operator (see below). mix (osc bal) : Oscillator 1&2 balance. Might do something different than balance when an operator different from sum is selected (see the Oscillator 1 section). sub (sub osc.) : Sub oscillator or transient generator level. noi (noise) : Noise level. The operator parameter controls how oscillator 1 and oscillator 2 are blended together. The different modulation modes are: Operator Description What does the mix parameter do? sum Mixing Adjusts the oscillator 1&2 balance sync Mixing and synchronization: oscillator 2's phase is reset whenever oscillator 1's phase is reset. You won't hear the detuning, but instead a timbral modulation Adjusts the oscillator 1&2 balance ring Ring modulation - oscillators' signals are scaled and multiplied Balance between the original sound and the output of the modulator xor XOR modulation. The bits of oscillator 1 and 2's digital values are exclusive-or'ed, and the result is shifted Shifts the output, with overflow fuzz Fuzz. Oscillator 1 and 2 are equally mixed and sent to a waveshapper with a warm tanh response Fuzz amount >> 4 Oscillator 1 and 2 are mixed and sent through a dirty 4x sample rate reduction Oscillator 1&2 balance >> 8 Oscillator 1 and 2 are mixed and sent through a dirty 8x sample rate reduction Oscillator 1&2 balance fold Oscillator 1 and 2 are mixed and sent through a foldback distortion Distortion amount bits Oscillator 1 and 2 are mixed and sent through a bit depth reducer Bit depth reduction amount duo Duophony Adjusts the oscillator 1&2 balance 2steps Oscillator 1 / 2 cycling - 4steps Sound source cycling - 8steps Sound source cycling - seqmix Sound source cycling - A few words about the last fancy modulation modes... In duophony mode, you can play two-note chords (or bass + melody). The first note of the chord will be assigned to oscillator 1, and the second note will be assigned to oscillator 2, like on the ARP Odyssey or the Polivoks. This works best when mix is set to 32 and when oscillator 1 and 2 are set to the same settings (otherwise small differences in timing can result in drastic changes as both notes of the chord will be assigned to different oscillators). If you play more than 2 notes, the least recently played note will be assigned to oscillator 2, the most recently played note to oscillator 1 ; and the other notes are ignored. The sub-oscillator follows the least recently played note. Note that the Shruthi is by design a monosynth, with one set of envelopes & LFOs, and one filter / VCA - both notes will go through the same filter and have the same envelope, resulting in a kind of weird paraphonic effect. Don't be surprised if you encounter pitch jumps, envelope clicks, weird voicing, or if things do not sound and feel as good as on a polysynth - all these are due to stubbornly trying to fit duophony into an essentially monophonic design. Ironically, the duophony mode works best with the arpeggiator - it will move through the chord in pairs of notes. Try it! In 2steps mode, oscillator 1 and oscillator 2 are alternatively on and off at each new note. In 4steps mode, oscillator 1, oscillator 2, the sub oscillator and the noise source are alternatively on and off at each new note. The first note you play is played by the sub-oscillator ; the second note by oscillator 1 ; the third by the noise source ; the fourth by oscillator 2. Try this with the arpeggiator and you get a mini drum pattern! 8steps does the same thing, but with a more complex cha-cha rhythmic pattern. Finally, in seqmix mode, the on/off status of the oscillators / sub / noise is controlled by the values in the step sequencer. 1 = osc 1 ; 2 = osc 2 ; 4 = sub ; 8 = noise ; and these values can be added up for combinations (osc 1 + noise = 1 + 8 = 9). The following table enumerates all combinations: Step sequencer value Osc 1 Osc 2 Sub Noise 0 - - - - 1 X - - - 2 - X - - 3 X X - - 4 - - X - 5 X - X - 6 - X X - 7 X X X - 8 - - - X 9 X - - X a - X - X b X X - X c - - X X d X - X X e - X X X f X X X X You can thus use this mode for programming simple drum patterns in the step sequencer - using the sub oscillator as a bass drum and the noise as a snare drum, and interweaving notes from the oscillators between the drum notes. Filter Cut res env lfo 66 0 16 37 cut (cutoff) : Filter cutoff frequency. res (resonance) : Filter resonance. env (env1->vcf) : Modulation amount from envelope 1 to VCF. If you want to set a negative modulation amount, you can patch env1 to the VCF in the modulations section and ignore this parameter. lfo (lfo2->vcf) : Modulation amount from LFO 2 to VCF. Again, if you want to set a negative modulation amount, you can patch the LFO 2 to the VCF in the modulations section and ignore this parameter. Note that a second page of filter settings might be available if a special filter board is used - for example, the dual multimode filter board has a second menu with the cutoff/resonance of the second filter, or the filter mode settings. Please refer to the documentation specific to each filter board! Envelope 1 / 2 Atk dec sus rel 0 44 20 60 atk (attack) : Envelope attack time. dec (decay) : Envelope decay time. sus (sustain) : Envelope sustain level. rel (release) : Envelope release time. Note that the envelopes are not linear, but have a moderate exponential slope for snappier action. LFO 1 / 2 Sha rat atk mod tri 52 0 fre sha (shape) : LFO waveform. The available LFO waveforms are: triangle, square, sample&hold, ramp (sawtooth), step (cycles through the sequence of values programmed in the step sequencer). 16 additional waveforms named \\~1 to \\~16 are also available. They are directly taken from one of the wavetables, are intended to be used with slow frequencies, and are very good at mimicking the sounds of machines or... human organs. rat (rate) : LFO rate. atk (attack) : LFO rise time. When this setting is non-zero, the LFO will take some amount of time to reach its maximum amplitude mod : LFO synchronization mode: when set to free , the LFO is free-running. When set to slave , the phase of the LFO is reset every time a new note is played. When set to master , the LFO will retrigger the envelope (LFO 1 retriggers envelope 1 and LFO 2 envelope 2). Finally, when set to 1 shot the LFO will turn into a single-cycle envelope triggered on every key press. Among the choices of LFO rates, the first values, which are prefixed by a \"x\", are tempo-synchronized settings. The number following the X corresponds to the number of sequencer steps that will be used to set up the LFO period: x16 simply means that the LFO will go through one cycle over the duration of 16 sequencer steps (4 beats). For example, if you set the LFO to a ramp, with a rate of x4 , and map it to the cutoff, the cutoff will raise over the duration of a beat and return to a low value at the beginning of each beat. With a x2 or x1 rate, square LFO mapped to the VCA, you can get old-school trancey gater effects. With a x2 rate, sample&hold LFO mapped to the cutoff and the basic arpeggiator pattern, with high resonance, you get a random bleeping at every note. Modulation matrix In this page, the routing between the modulation sources and destinations is configured. The first important thing about this page is that it works a bit differently from the others: the potentiometer P1 is used to select a patchcord, while P2 , P3 and P4 are used to edit it. Here is an example: Mod src dst amt 1 lf1 ~1 0 This page means: \"The patchcord #1 connects the LFO1 to the oscillator 1 pitch, and the corresponding modulation amount is set to 0\". By turning the first knob, you can scroll through the different connections in place, for example: mod src dst amt 9 en2 vca 63 \"The patchcord #9 connects the envelope 2 to the VCA gain, and the corresponding modulation amount is 63\". Once a patchcord is selected with the first knob, the source/destination/amount are edited with the 3 other knobs. Note that you can see in details the source and destination when tweaking one of those parameters: mod en>vca amount 62 When editing modulations, L6 blinks/is dimmed to reflect the value of the selected modulation source. The modulation sources are, in modern lovers precise order: lfo1 , lfo2 : LFO output (centered). stpseq : Step sequencer output. stpsq1 : Step sequencer's little brother 1: it cycles on the first 8 steps of the sequence. stpsq2 : Step sequencer's little brother 2: it cycles on the last 8 steps of the sequence. arp : Rhythmic gate signal, which outputs a high value when the arpeggiator or sequencer contains a note at the current step, or 0 when there is no note. mwheel : Modulation wheel value read from the MIDI input. afttch : Aftertouch value read from the MIDI input. bender : Pitch-bend controller value read from the MIDI input (centered). offset : A boring constant value. This is useful if you want to output a fixed value to one of the CV outs. cv1 , cv2 , cv3 , cv4 : Control voltages read from the CV input pins. By default, the input pins are floating, so it's likely that these modulation sources will sound just like noise. These modulation sources do nothing on the Shruthi XT (which does not have extra CV pads). cc A , cc B , cc C , cc D : Value of the Control Change 16, 17, 18 and 19. noise : Another noise generator! Mapped to the VCA, makes for some super snares! env1 , env2 : Envelopes. velo : Note velocity. random : A random value updated every time a new note is played. note : Pitch of the currently played note (centered). gate : Keyboard gate signal, null when no key is currently pressed. audio : Digital audio signal produced by the mixer. Please note that since the modulation matrix is recomputed at 976Hz, some serious aliasing is happening here. You're not going to do FM with this thing, most of the time it sounds like crap, but it's something fun to experiment with! op. 1 : Operator 1. op. 2 : Operator 2. The modulation destinations are, in modern lovers precise order: pwm1 : Oscillator 1 parameter (can be pulse width, but also waveshapping, phoneme, etc. depending on the oscillator type). pwm2 : Oscillator 2 parameter (can be pulse width, but also waveshapping, phoneme, etc. depending on the oscillator type). osc1 : Coarse oscillator 1 pitch, in a -16 / 16 semitones range. Also affects the sub-oscillator's pitch. osc2 : Coarse oscillator 2 pitch, in a -16 / 16 semitones range.. osc1+osc2 : Coupled oscillator 1+2 pitch, in a -4 / 4 semitones range. Also affects the sub-oscillator's pitch. fine : Fine oscillator 1+2 pitch, in a -1 / 1 semitones range. Also affects the sub-oscillator's pitch. mix : Oscillator 1&2 balance (or whatever the modulator does with the balance parameter). noise : Noise volume. subosc : Sub-oscillator volume. cutoff : Filter cutoff. reso : Filter resonance. vca : VCA gain. 13 cv1 , cv2 : Control signal for the CV output #1 and #2. When a special filter board is used, this controls a parameter of an additional sound processing unit, such as a secondary filter, a delay, etc. Please refer to the documentation specific to each filter board! attack : Envelope 1 and 2 attack speed. For example, map velocity to this modulation destination to have a faster attack time on notes played with a high velocity. tr11 , a1 , d1 , s1 , r1 : Envelope 1 trigger, attack, decay, sustain, release. tr12 , a2 , d2 , s2 , r2 : Envelope 2 trigger, attack, decay, sustain, release. atk : Envelope 1 & 2 attack time. lfo1 , lfo2 : Frequency modulation of the two LFOs. One thing that requires a bit of clarification is the notion of \"centered\" modulation source. Let's take an example. We have a triangle LFO mapped to the filter cutoff, with a modulation amount of 30. If the cutoff is set to 80, the actual value of the cutoff will oscillate between 50 (80-30) and 110 (80+30). On the other hand, if we have an envelope mapped to the cutoff with a modulation amount of 20, the cutoff will go from 80 to 120 (80 + 2 * 20), then down to 80 after the release. This is something to remember if you want to do PWM, for example. If you set the PWM modulation amount to 40, you also have to set the oscillator pulse width value to 40, so it will oscillates between 40-40 = 0 and 40+40=80. Otherwise, it will spend half of the time stuck at 0. But this makes things nicer for vibrato, tremolo, wah-wah or growl effects! Quirk ahoy! The modulation amount of the last patch cord is adjusted by the modwheel. Huh? Let's say you set patch cord 12 to go from LFO 1 to the oscillators fine pitch with an amount of 16: Mod src dst amt 12 lf1 ~ 16 This modulation will be applied with an amount proportional to the modwheel position - by default it won't be active until you start moving the modulation wheel, and to get it at full strength, you'll have to push the modulation wheel to the max. Operators Press the modulation matrix button twice to bring the operators page. In this page, you can configure the two \"operators\". An operator takes 2 modulation sources, applies a fancy (or not) mathematical operation on them, and the result is made available as a new modulation source in the modulation matrix. Op. in1 in2 out 1 lf1 lf2 add Use the first setting ( op. ) to select which operator to modify. The second and third options allows you to select which modulation destination you want to operate on. The last setting is the operation to apply: add adds the values of two modulation sources. prd computes the product of the two modulation sources. max takes the maximum of the two sources. min takes the minimum of the two sources. xor totally messes up the two sources. [=]{style=\"text-align:right;\"} outputs a large value if source 1 is above soure 2, 0 otherwise. [=]{style=\"text-align:left;\"} outputs a large value if source 1 is below soure 2, 0 otherwise. qtz source 1 is quantized into a number of values set up by source 2. lag source 1 is low-pass filtered, with a cutoff frequency set up by source 2. There are plenty of things to experiment with... Create a multi-stage envelope by taking the max of envelope 1 and 2 ; mask a LFO by the step sequencer ; build a chaotic LFO using feedback and xor modulation between the two LFOs ; Square the value of a LFO to change its shape... Here is a more precise example showing how to low-pass filter a square LFO to create a \"soft\" modulation source routed to the filter. First, route the operator 1 output to the filter cutoff: Mod src dst amt 1 op1 cut 63 Then, specify that operator 1 is LFO1 transformed by a \"lag processor\". Op. in1 in2 out 1 lf1 =4 lag The in2 is the filtering cutoff frequency. You can try setting this to velocity too: the harder the note is pressed, the harder the edges of the LFO are! Here is another example showing how to quantize an envelope to create a low-fi \"steppy\" modulation. First, route the operator 1 output to the filter cutoff: Mod src dst amt 1 op1 cut 63 Then, specify that operator 1 is a quantized version of the envelope 1: Op. in1 in2 out 1 en1 =4 qtz Sequencer and arpeggiator Before going further, let's get things straight: the Shruthi sequencer has little in common with the sequencer of, say, a TB-303: it is not intended to be a \"press play and let it do all the work\" thing. Indeed, there's no \"play\" button on the Shruthi! You have to think of it as an arpeggiator-like tool - something to help create complex riffs and patterns with limited keyboard action. Sequencer mode and clock Mod bpm gro amt stp 120 swi 0 mod (mode) : Sequencer/arpeggiator mode. This deserves some generous amount of explanations, please read further! bpm (bpm) : Arpeggiator/step sequencer/LFOs tempo in BPM. extern will sync the Shruthi clock to the ticks received from the MIDI input. gro (groove) : groove template. The options are swing (uneven distribution of pairs of 1/8th notes), shuffle (uneven distribution of pairs of 1/16th notes), push (push the beat), lag (sloppy drummer!), human (humanization) and monkey (humanization + shuffle). This setting only has an effect when amt is set to a non-zero value. The swing is only applied to the internal clock - not when the Shruthi is slaved to an external MIDI clock. amt (amount) : amount of groove to apply. Now let's dig into the sequencer modes... stp : step sequencer only When stp is selected, the arpeggiator and pattern sequencer are disabled. The only pulsating, modulating things running are the LFOs and the step sequencer. arp : arpeggiator When arp is selected, the chords played on the keyboard are arpeggiated. Releasing the keys for a short amount of time stops the arpeggio but keeps the clock ticking. Releasing the keys for a duration greater than that of a bar stops the arpeggio and resets the clock -- it will restart from the first beat once a chord will be played. seq : pattern player In this mode, the pattern programmed in the sequencer is triggered by playing a note on the keyboard. Depending on the note you play, the pattern is transposed: play C4 to play the pattern as recorded, C#4 to play it one semi-tone higher, B3 to play it one semi-tone lower, etc. The pattern will stop whenever the key is released -- but the clock will continue ticking for the duration of a bar - and if a key is pressed during this interval, the pattern will resume in time. This mode is most useful for playing and transposing a bassline. Arpeggiator Dir rng pat div ? 1 0 /16 dir (direction) : Arpeggiator direction. The options are up, down, up/down, random, and \"as played\". rng (range) : Arpeggiator range, in octaves, from 1 to 4. pat (pattern) : Arpeggiator rhythmic pattern. 15 patterns are available (see the chart below). The last option in the list, sequence uses the rhythmic pattern programmed in the sequencer. div (division) : This option modifies on which subdivison of the internal or external MIDI clock the arpeggiator and sequencer are aligned. Arpeggiator patterns 1: o o o o o o o o 2: ooo ooo ooo ooo 3: o o ooooo o oooo 4: o o oo oo o oo o 5: oooo oo oooo oo 6: o o o o 7: o o o o o o 8: o o o o o o 9: o o o o o o 10: oo oo oooo oo oo 11: ooooo oo oo ooo 12: o o o o o o 13: o oo o o o oo 14: o oooooo oo 15: o o o oo Pattern editor The pattern editor page is very different from the other pages. Here is how it looks like: |00| C3 - 7 0 | >|01| C3 - 7 0 | It contains 5 columns, showing, from left to right: The step number The note at this step The rhythmic event at this step: note (represented by a note icon), tie/slide (represented by a -- sign), or rest (empty) The velocity (applies only to steps with a note) The step sequencer/controller value at this step, from 0 to 15 (values from 10 to 15 are represented by the letters a to f) The pattern can be edited with the potentiometers. P1 scrolls through the steps, P2 changes the note at the current step. P3 changes the rhythmic event and velocity value at the current step. Finally, P4 modifies the controller value. The encoder can be used to scroll through the steps. Clicking the encoder enters the edit mode: a blinking cursor is shown, and the encoder is now used to increase/decrease the note value. Clicking the encoder again leaves the edit mode. While in edit mode, pressing a key on the MIDI keyboard will record the note number at the current step, and move to the next step. This can be seen as a naive \"step by step recording\" mode, which can be used while a sequence is playing. Three important notes: The pattern length is by default 16 steps, but this can be changed on the Rhythmic sequencer or Step sequencer pages. The note sequence, rhythmic pattern, and controller (steps) sequence all have the same length. The step sequence (controller values) have an effect only when the step sequencer is routed to a modulation destination in the modulation matrix! Rhythmic sequencer This page shows, on a single screen, the rhythmic content of the bar programmed in the pattern editor. It is particularly useful when programming a rhythmic pattern for the arpeggiator - a task for which the only information that really matter are the note velocities and rhythmic events. The first line of the screen shows the rhythmic events, the second line the programmed velocities: xxx x x x---x--- 777 7 6 54443111 Use P2 to move the cursor, P3 to change the rhythmic event/velocity at the selected step, and P4 to adjust the pattern duration. The encoder can be used for editing too: select a step, click, edit the step value, and click again when done. Step sequencer This page shows a different view of the controller values programmed in the pattern editor. step sequencer 0000ffffcccc4444 Use P2 to move the cursor, P3 to change the controller value at the selected step, and P4 to adjust the pattern duration. The encoder can be used for editing too: select a step, click, edit the step value, and click again when done. P1 can also be used to shift and cycle the sequence. Tuning settings Oct rag prt leg 0 equ 0 off oct (octave) : Transpose every note by -2, -1, 0, 1 or 2 octaves. rag (raga) : Scale/keyboard mapping. prt (portamento) : Portamento time. leg (legato) : Legato on/off. This option specifies how the Shruthi will interpret overlapping notes. When legato is off, the envelope retriggers every time a new note is played, and the portamento is always applied. When legato is on, the envelope retriggers only when the new note does not overlap with the previous one, and the portamento triggers only on overlapping notes. The different scales/keyboard mappings are: Name Description equal Equal temperament just Just intonation (frequency ratios to C are rational numbers) pythagorean Pythagorean scale 1/4 eb E and B are 1/4 tone lower 1/4 e E is 1/4 tone lower 1/4 ea E and A are 1/4 tone lower bhaira ... rasia A bunch of ragas of the Maihar gharana . Note that it is not possible to play notes outside of the raga - if you attempt to do so, the previously played note will be retriggered. The suggested mode of operation is to find out which keys are active in the raga, and improvise with them! Master tune and MIDI settings Tun chn mid 0 1 ful tun (tune) : Master tuning in the -1/+1 semitone range. chn (midi chan) : MIDI channel the Shruthi is tuned to. Use 0 to receive on all channels. mid (midi out) : Data sent to the MIDI out. Refer to this paragraph from the MIDI implementation section. System settings Pau sna fil sta 8 off lpf spl pau (pause) : Duration (in increments of 0.128 seconds) during which the long parameter name and value is shown on screen when a potentiometer is adjusted. When set to 0, the screen always shows the four parameters summary. This setting can also be used to enable a screen-saver: select one of the options prefixed by 's', and the display of the Shruthi will go blank after a few minutes of inactivity. This extends the life of OLED displays (but has no impact on LCD displays!). sna (snap) : Enables potentiometers' \"snap\" mode. This mode makes it less likely to accidentally change a parameter value when switching pages. Suppose you're tweaking the filter resonance with P2 -- you rotate it all the way down to 0. Then you switch to the oscillator 1 page to adjust the oscillator 2 parameter. If the current value of the parameter is set to 64, you'll hear a discontinuity, since the value of the parameter will instantly jump to 0 or 1 when you start touching the pot. When snap is on, things will happen differently: rotating the pot will have no effect until the position of the pot actually reflects the current value of the parameter. After that, the parameter value will track the potentiometer's position. Another way to explain it: when snap is on you have to move the pot to \"grab\" the current parameter value before the parameter is modified. fil (filter) : Enables software extensions for a specific filter board. The default, lpf must be selected for the SMR4 filter board. ssm must be selected for the legacy SSM2044 filter board. svf is for the dual SVF filter board, dsp the digital filter, pvk the Polivoks filter board, and dly the LP2+delay filter board. sta (startpage) : Selects on which page the Shruthi boots (splash screen, filter page, preset load/save page). The load/save page The Shruthi can save in persistent memory the following data: Patches (16 in internal memory, up to 464 on the external eeprom chip). A patch includes all synthesis parameters and the sequencer/arpeggiator data; at the exception of the tempo/clock settings and the system settings such as MIDI channel, transposition, etc. Global settings (in internal memory). To load/save a patch, press S6 from any of the synthesis/sequencer editing pages. To load/save global settings, press S6 from the tuning/MIDI settings pages, or from the system settings page. Patch load/save page browse :patch 1 init The first line shows the action being performed (load, save, or compare). The second line shows the program number and its name. Browsing the patch library Rotate the encoder to browse through the patches. Click the encoder to temporarily revert to the patch which was being edited before entering the load/save page: browse is replaced by compare on the screen. Click the encoder again to resume browsing patches. The Shruthi sends a MIDI program change message whenever a new patch is loaded. Note that when attempting to load a patch while a sequence or arpeggio is currently playing, the sequencer/arpeggiator settings stored with the patch are not loaded. This allows you to listen how different patches sound while keeping your sequence/arpeggio running. Saving When the browse page is displayed, press S6 again to jump to the save page. A blinking cursor is shown in front of the patch number: save :patch _1 init ok Click and rotate the encoder to select the program number. Click again when done. Rotate the encoder to move the cursor to a letter of the patch name you want to modify. Click and rotate the encoder to change the letter. Click again when done. Once the patch number and patch name have been set, move the cursor to the ok button. When selected, it will appear in brackets []{lang=\"ok\"} . Click the encoder to confirm... The patch is saved! To cancel and leave the save page, press any other switch. Special functions While the browse page is displayed, hold S6 and press: S1 to revert the current patch to init . S2 to program random values into all the parameters of the current patch. S3 to dump the current patch to the MIDI output as a SysEx block. S4 to bring up the global backup page . Global settings save page The default values of global settings such as octave transposition, MIDI channel, MIDI out mode, etc. are read from internal memory every time the Shruthi boots up. To use the current settings as default settings, press S6 while one of the tuning , MIDI or system settings pages are displayed. The display will show the following confirmation message: save midi/kbd settings? no Leds L1 , L3 , L5 and L7 will be lit. Rotate the encoder until ok is displayed instead of no . Click the encoder to confirm. Global backup by SysEx The global backup function is accessible by holding S6 and S4 together from the sequence or patch load pages. A confirmation message is displayed: start full midi backup? no Leds L1 , L3 , L5 and L7 will be lit. Rotate the encoder until ok is displayed instead of no . Click the encoder to confirm. The entire content of the Shruthi patch and sequence memory will be sent as a sequence of SysEx messages. Miscellaneous Latch While a note (in stp mode), arpeggio (in arp mode) or sequence (in seq mode) is playing, the encoder can be pressed for one second to latch the note. Dashes are shown on the display to indicate that the latch mode is active - for example: Mod-bpm-gro-amt stp 120 swi 0 Note off messages will be ignored. To leave the latch mode, press the encoder for one second. This will not immediately stop the arpeggiator/sequencer to give you some time to get back into action on the keyboard! Jam mode The Jam mode allows notes to be played, or sequences/arpeggios to be started and transposed without any external MIDI controller. On the Shruthi XT, the Jam mode is triggered with a dedicated button on the top-right section of the panel. The Jam mode can also be accessed by keeping the encoder pressed for one second while no note/arpeggio/sequence is playing. A note is played and held immediately when entering the Jam Mode. Turn the encoder to transpose it by semitone increments. Use the 4 main knobs to transpose it by octaves, along a pentatonic scale, or along two unusual scales. It is still possible to navigate to other pages and to tweak other parameters while the Jam mode is active. In this case, pressing the Jam button or holding the encoder will simply bring back the Jam mode page (root note selection). Pressing the Jam button / holding the encoder while the Jam Mode is active and the Jam mode page is shown will stop the sequencer/arpggio/note. Hardware selection The Shruthi firmware can run on 3 versions of the hardware: \"Classic\" version with 4 knobs. \"XT classic\" - original design by fcd72. \"XT\" - with aluminum panel, sold as a kit. The kits are sold with chips already configured for the correct version of the hardware. However, you might face the situation in which a chip configured for one version of the Shruthi is inserted into another version. This might lead to unexpected behavior such as flickering values on the screen, or buttons not correctly reacting to presses. To configure the correct version of the hardware, power the Shruthi on with the encoder pressed. The screen displays which version of the hardware is currently active. Repeat the procedure until the correct version is displayed. MIDI MIDI out modes The Shruthi can be used in a variety of MIDI configurations. In particular, different functions can be assigned to the MIDI out port, through the midi out option of the midi settings page. off The MIDI out port is disabled. This settings brings a tiny, tiny improvement in responsivity to the MIDI input and to knob movements, since no MIDI out means less work for the CPU. thru The MIDI out port outputs verbatim what was received on the MIDI input (soft-thru). This setting is not very CPU intensive, since no reformatting of the MIDI stream is done. seq The MIDI out port outputs only the note on and note off events processed by the synthesizer -- be they generated by the internal sequencer and arpeggiator, or received by MIDI. ctrl The MIDI out port outputs only NRPN and CC messages capturing knobs tweaking. This mode is ideal for using the Shruthi with both its IN/OUT ports connected to the same device. The other modes are not suitable for operation in this configuration since they can cause unwanted MIDI loops. full In this mode, every incoming message is forwarded to the Midi output. In addition, NRPNs and CC messages capturing the knob movements are inserted into the MIDI stream and written to the MIDI out. These messages can be used to record knob movements in a sequencer, or to synchronize 2 Shruthi in Unison mode. polychaining In this mode, several Shruthi units chained together by MIDI can behave like a polysynth. Each unit will implement a \"distributed voice-stealing\" scheme, in which they will either play a note, or forward it to the chain. To this purpose, each unit must be aware of the number of units that will follow in the chain. This is done through one of the 8 polychaining settings: 1>| indicate that this unit is at the end of the chain, 2>1 indicates that this unit is followed by one unit, 3>2 indicates that this unit is followed by 2 units, etc. Here's an example of configuration to turn 3 Shruthi units into a triphonic synth: The 3 units obviously have to be sent to a common audio mixer or sound card. Some caveats regarding the polychaining mode: The arpeggiator and sequencer do not work in polychaining mode ; and the LFOs of each unit won't be synchronized with each other There is a latency of up to 2ms between each unit. Thus, this feature works best on small chains. Any parameter change done on the first unit in the chain is forwarded downstream, so tweaking is possible (and encouraged). Furthermore, when a patch is loaded on the master unit, it is dumped as a SysEx to each unit of the chain for synchronization purposes. However, this doesn't work the other way round: if you tweak a parameter or reload a new patch on the last unit in the chain, the other units upstream won't be aware of it! Updating the Shruthi firmware by MIDI To update the Shruthi firmware, hold the S6 switch (or the OSC 2 SHAPE + switch on the XT) while the synth is being powered on. The screen remains empty, and the LEDs L1 , L3 , L5 and L7 are lit. The Shruthi is now waiting for SysEx data containing firmware update commands. This data is compiled into a MIDI file you can download on the Mutable Instruments website . During the firmware update procedure, the LEDs will light up one by one - the last LED being lit will also blink as the data is received. The update takes about 1 minute. If something goes wrong during the update procedure, the Shruthi is not bricked: it is possible to restart it with S6 held down, to retry the update procedure. If you want to use a dedicated SysEx transfer tool, we recommend Elektron's C6 tool available for both Windows and OS X, with the following timing settings: MIDI implementation A standard MIDI implementation chart can be viewed here . Received messages Note on/off (0x80 and 0x90), aftertouch (0xa0, 0xd0) and pitch-bend (0xe0) Note that the aftertouch is always global, and that its effect depends on the patching of the afttch modulation source in the modulation matrix (by default, none). Program change (0xc0) This loads a patch from the internal or external memory. You can use the bank MSB CC (0x00) to load patches above 127. Note that the patch numbers shown in the load/save page are numbered from 1, but the MIDI patch numbers are numbered from 0, so the first patch is loaded with program change 0 even if it appears to be #1 on the load/save page. Control changes (0xb0) The Shruthi responds to the following system control change messages: All sound off (0x78) Reset all controllers (0x79) All notes off (0x7b) Omni on/off (0x7c, 0x7d) Hold pedal (0x40) Most synthesis parameters are accessible by non-standard control changes or NRPNs. Please refer to the Parameters accessible by MIDI section. Clock tick (0xf8) This advances the system clock when the bpm setting is set to external or one of its multiples. Play and stop (0xfa and 0xfc) The Play message must be sent to activate the LFO, arpeggiator or sequencer when the bpm setting is set to external . The Stop message kills all notes and stops the sequencer or arpeggiator. System exclusive messages (0xf0). The Shruthi sends or receives System Exclusive messages for the following operations: Patch data dump Sequence data dump Wavetable dump Bulk memory dump Firmware update Post firmware-update reset Please refer to the SysEx data format section for more information. Synthesis parameters accessible by MIDI. Most of the synthesis parameters are accessible by NRPN or CC. Editing a parameter by CC is fool-proof: send any value between 0 and 127, and it will mapped to the range of the parameter. For example, when adjusting the oscillator 1 range, the value 0 will be mapped to -24, and the value 127 will be mapped to +24. There is a bit of resolution loss for parameters with a large range (eg: tempo). This is not the case when using NRPN: in this case, the value in the data entry message will need to be exactly the requested value (no scaling occurs). Since most parameters have their range in a subset of 0--127, only a data entry LSB message has to be sent. When the maximum value of the parameter exceeds 127, or when it accepts negative values, a data entry MSB will have to be sent. Negative values are represented using 2's complement. For example, the MIDI messages to send to set the Oscillator 1 range to -12: 176 99 0 (NRPN MSB set to 0) 176 98 2 (NRPN LSB set to 2, from the table below: Oscillator 1 range) 176 6 1 (Data Entry MSB set to 1 -- value above 127 or negative) 176 38 116 (Data Entry LSB set to 116, because 116 - 128 = -12) The following table summarizes all the synthesis parameters, with their NRPN and CC numbers: Parameter number Range NRPN number CC number Oscillator 1 shape 0-34 0 20 Oscillator 1 parameter 0-127 1 21 Oscillator 1 range -24-24 2 22 Modulation operator 0-13 3 28 Oscillator 2 shape 0-34 4 24 Oscillator 2 parameter 0-127 5 25 Oscillator 2 range -24-24 6 26 Oscillator 2 detune 0-127 7 27 Oscillator balance 0-63 8 29 Sub oscillator volume 0-63 9 30 Noise volume 0-63 10 31 Sub oscillator/transient generator shape 0-10 11 23 Filter cutoff 0-127 12 14, 74 Filter resonance 0-63 13 15, 71 Envelope->cutoff modulation amount 0-63 14 102 Lfo->cutoff modulation amount 0-63 15 103 Envelope 1 attack 0-127 16 104 Envelope 1 decay 0-127 17 105 Envelope 1 sustain 0-127 18 106 Envelope 1 release 0-127 19 107 Envelope 2 attack 0-127 20 108, 73 Envelope 2 decay 0-127 21 109 Envelope 2 sustain 0-127 22 110 Envelope 2 release 0-127 23 111 LFO 1 waveform 0-20 24 112 LFO 1 rate 0-143 25 113 LFO 1 rise time 0-127 26 114 LFO 1 master/slave 0-3 27 115 LFO 2 waveform 0-20 28 116 LFO 2 rate 0-143 29 117 LFO 2 rise time 0-127 30 118 LFO 2 master/slave 0-3 31 119 Modulation n source 0-27 32 + 3 * (n - 1) Modulation n destination 0-26 33 + 3 * (n - 1) Modulation n amount -63-63 34 + 3 * (n - 1) Operator n source 1 0-31 94 + 3 * (n - 1) Operator n source 2 0-31 95 + 3 * (n - 1) Operator n operation 0-9 96 + 3 * (n - 1) Sequencer mode 0-2 100 75 Tempo 35-248 101 Groove template 0-5 102 76 Groove amount 0-127 103 77 Arpeggiator direction 0-3 104 78 Arpeggiator range 1-4 105 79 Arpeggiator pattern 0-15 106 80 Sequencer clock division 0-11 107 81 Octave transposition 0-11 82 Scale/raga 0-32 83 Portamento 0-63 84 Legato 0-1 68 The following control changes are specific to special filter boards: Parameter CC number SVF Filter cutoff 2 12 SVF Filter resonance 2 13 SVF Filter mode 1 85 SVF Filter mode 2 86 DSP FX param 1 12 DSP FX param 2 13 DSP FX mode 87 DSP FX program 88 Polivoks filter mode 89 Polivoks overdrive 90 Polivoks FM feedback 91 4PM filter mode 92 4PM resonance flavor 93 Delay time 12 Delay level 13 Delay feedback 94 Delay EQ flavor 95 SysEx data format SysEx messages all share the same format: 0xf0 (SysEx) 0x00 0x21 0x02 (Manufacturer ID for Mutable Instruments) 0x00 0x02 (Product ID for Shruthi) Command Argument Payload Checksum 0xf7 (End of SysEx) Command indicates what the receiver should do with the data in the payload block, and argument is a byte that might contain an additional piece of information about what to do with the data. Payload is a sequence of bytes in nibblized form. For example, the sequence 0x80 0x56 0x13 is transmitted as 0x08 0x00 0x05 0x06 0x01 0x03 . Checksum is equal to the nibblized-sum, modulo 256, of the bytes. In the example above, the checksum is equal to 0x80 + 0x56 + 0x13 = 0xe9 and is transmitted as 0x0e 0x09 . Patch transfer For patch transfer, command is equal to 0x01 and argument is null. The payload is a 92 bytes (184 nibbles) data structure described here . Upon reception, the Shruthi checks the patch data, and loads it in memory, in place of the currently edited patch. When receiving a patch by SysEx, the received patch is not written to persistent patch memory, it is only temporarily loaded in memory so you can edit it, and if you're happy with it, save it yourself. Since you don't risk overwriting stuff in memory when using SysEx patch transfer, use it and abuse it! For example, embed at the beginning of each of your tracks a dump of the patch, so your Shruthi will always recall the correct patch settings when you play the track back. Sequence transfer For sequence transfer, command is equal to 0x02 and argument is null. The payload is a 32 bytes (64 nibbles) data structure described here . Upon reception, the Shruthi loads the sequence data in memory, in place of the currently edited sequence. Waveform transfer For waveform transfer, command is equal to 0x03 and argument is null. The payload is a sequence of 8x129 bytes (2064 nibbles) describing 8 single cycle waveforms, each of them being 129 samples long. The period must be 128 samples - the 129th sample must be equal to the first one and is used for interpolation wrap-around. The waveform is described with 8 bits unsigned samples. Storage memory dump The storage memory of the Shruthi is 2 + 8n kb large: 2kb of internal eeprom and 8n kb of external eeprom. It is partitioned as follows: Logical range Physical medium Physical range Content 0x0000 - 0x0010 Internal eeprom 0x0000 - 0x0010 System settings 0x0010 - 0x05d0 Internal eeprom 0x0010 - 0x05d0 16 internal patches 0x05d0 - 0x07d0 Internal eeprom 0x05d0 - 0x07d0 16 internal sequences 0x07d0 - 0x0800 Internal eeprom 0x07f0 - 0x0800 unused 0x0800 - 0x1f00 External eeprom 0x0000 - 0x1700 64 external patches 0x1f00 - 0x2700 External eeprom 0x1700 - 0x1f00 64 external sequences 0x2700 - 0x2800 External eeprom 0x1f00 - 0x2000 unused 0x2800 - 0x3f00 External eeprom 0x0000 - 0x1700 64 external patches 0x3f00 - 0x4700 External eeprom 0x1700 - 0x1f00 64 external sequences 0x4700 - 0x4800 External eeprom 0x1f00 - 0x2000 unused And so on as the external eeprom size increases... When doing a bulk backup, command is equal 0x40 , argument is a block index, from 0 to 127, and payload is a 128 bytes (256 nibbles) memory block. Upon reception, the Shruthi copies the received 128 bytes block to the logical address argument x 128. Thus, the first 16384 bytes of memory are addressed by this scheme. The next 16384 bytes of memory are transmitted by using the 0x41 command, and so on. Transfer request For a patch transfer, command is equal to 0x11 and argument is null. The payload is empty. In other words, the full SysEx string is: 0xf0 0x00 0x21 0x02 0x00 0x02 0x11 0x00 0x00 0x00 0xf7 (the last pair of 0x00 being the checksum). Upon reception, the Shruthi dumps the current patch to the MIDI out. For a sequence transfer, command is equal to 0x12 . Write request For a patch write request, command is equal to 0x21 , argument is null, and the payload is a 14-bits integer indicating a memory slot number (0-based indexing). Upon reception, the Shruthi writes the current patch to the memory location designated by the number. For a sequence write request, command is equal to 0x22 . For example, to write the current patch to slot 303 (302 in 0-based indexing, 0x012e in hexadecimal), the message is: 0xf0 (SysEx) 0x00 0x21 0x02 (Mutable Instruments) 0x00 0x02 (Shruthi) 0x21 (Patch write command) 0x00 (No argument) 0x00 0x01 0x02 0x0e (Patch number nibbles) 0x02 0x0f (Checkum) 0xf7 (End of SysEx) Firmware update For firmware update, command is equal 0x7e , argument is null, and payload contains a 256 bytes (512 nibbles) block of code/data to be written to flash ROM. Upon reception of this message, the Shruthi writes the data block in flash ROM at the address pointer, and increments the address pointer by 256. The address pointer is initialized at 0x0000 At the end of the update procedure, a SysEx message with command = 0x7f, argument = 0x00 and no payload is sent. Upon reception, the Shruthi reboots into the newly updated firmware. Credits The following patches have been programmed by Florian Fourmy: Flo bass Follow! ElectroB The following patches have been programmed by stuartm: woblbass digobass pythagor noleleva ahhparis repliknt pwmstrng dahkand deetoon cowgirl voxelito woodtock The following patches have been programmed by Trackdriver: bitbass shorty VICdbass sawwy reason puddle blopbass borg fatbass wowwy pulsar stringe bigStrng simplBra pwmBrass arpSynth wasp rendezVo fullbell loFiFlut NESsie noisBell woice wavesurf lazrBird The remaining patches have been programmed by \u00c9milie Gillet","title":"Manual"},{"location":"shruthi/manual/#getting-started","text":"","title":"Getting started"},{"location":"shruthi/manual/#overview","text":"The Shruthi comes either in the classic version with only 4 knobs below the screen; or the XT version which provides hands-on controls on all synthesis parameters. The panel of the XT version is divided into 3 sections: oscillators/mixer/filter ; main control ; and modulations (LFOs/envelopes). The main control section is the same on the XT and on the classic versions. The main control section consist of the following elements: The LCD or OLED display shows, most of the time, the name and value of the 4 parameters that can be directly edited with the potentiometers under the screen. When a parameter is modified, the display temporarily shows the full name of the parameter and its value. In some other circumstances, the display might show a confirmation messages, the content of a sequence, etc. The clickable encoder can be used to navigate between parameters/pages, or to step through the values of a parameter. The four potentiometers below the display modify the synthesis parameters currently displayed on the active page. The 8 LEDs provide complementary information about the active page. The 6 switches facilitate navigation between pages. The switches S1 to S4 are used to cycle between groups of related pages ; S5 is used to switch between the synthesis pages and the sequencer/system pages ; and S6 is used to bring the load/save page to load and recall presets. The following connectors are available on the rear panel: 1 : 2.1mm DC power jack. The Shruthi can be powered with a 7.5V-9V unregulated supply, or with a 9V battery adapter. Make sure that the connector has a center pin (or tip) positive / outer collar (or sleeve) negative pin polarity. Most universal power supplies allows the polarity to be selected -- the polarity being often represented by a diagram like this: - (o +, or by the indication tip: + . The power supply has a reverse polarity protection. 2 : MIDI in. This input should be connected to the MIDI out port of a sound card, master keyboard, sequencer... 3 : MIDI out. This output can be used as a MIDI thru, but also to transmit the notes generated by the Shruthi's internal sequencer, backup data, or for polychaining units. 4 : Line-level, mono audio output. 5 : Line-level, mono audio input. Note that the external audio signal flows through the VCF and the VCA - you won't hear anything until a note or sequence is played by the Shruthi to \"open\" the VCA. In addition to the extra knobs for editing synthesis parameters, the XT additionally features: An on/off switch on the back panel. A global volume knob. A Jam button which holds a note and starts the sequencer/arpeggiator.","title":"Overview"},{"location":"shruthi/manual/#controls-and-navigation","text":"","title":"Controls and navigation"},{"location":"shruthi/manual/#pages","text":"The Shruthi parameters are edited by blocks of four (one per potentiometer). A set of four related parameters are grouped together on a page . For example, the Filter page will assign the four following functions to the four potentiometers: filter cutoff, filter resonance, envelope to filter modulation, LFO to filter modulation. The LEDs L1 to L6 display the currently active page. Moreover, the display is constantly showing which knob does what in the current page. For example, if the filter page is active, the display will show: Cut res env lfo 110 0 10 0 Pages are bundled together in groups, and repeatedly pressing one of the group switches cycles between the different pages in this group. For example, pressing S1 cycles between the oscillator 1 page, the oscillator 2 page, and the mixer page. Pages are also grouped into two large categories: one category contains all the pages related to sound synthesis -- the ones you'll navigate in when creating a sound -- and another category contains all the pages related to sequencing and to system settings. The switch S5 is used to toggle between the two categories. When the synthesis category is active, the LED on top of S5 is lit. When the sequencer category is active, this LED is not lit. The switches S1 , S2 , S3 and S4 cycle through different groups of pages as shown on this diagram: The upper list shows the pages in the synthesis category accessible from each switch, the lower list shows the pages in the sequencer category. L7 indicates which page category is active, and the leds L1-L6 show which page is active. Here's an example. The Shruthi displays: Cut res env lfo 110 0 10 0 L7 is lit (synthesis category) and L3 is lit: the filter page is active. Press S1 to jump into the oscillators group. L1 is lit, and the screen is now displaying: Sha prm rng sub saw 0 0 tr1 Press S1 again to move to the next page in the oscillators group. L2 is now lit, the screen is displaying: Sha prm rng tun squ 16 -12 12 Now press S5 to switch to the sequencer category. L7 is now off, L1 is lit. The active page is the clock page: Mod bpm gro amt stp 120 swi 0 Press S5 again to get back to the synthesis category. L7 is on, and you are back to the oscillator 2 page.","title":"Pages"},{"location":"shruthi/manual/#editing","text":"When a page is active, a summary of the four parameters modified by each potentiometer is displayed on screen. While tweaking a potentiometer, the full parameter name, its value, and the page name, are temporarily displayed on the screen: filter cutoff 89 After a short delay, the four parameters page summary is shown again. On the Shruthi XT , modifying any parameter through the switches or buttons on each side of the central section also brings this temporary display.","title":"Editing"},{"location":"shruthi/manual/#using-the-encoder","text":"When the Shruthi is displaying a page summary, the rotary encoder can be used to scroll through the parameters. The name of the active parameter is capitalized. For example, resonance is here the active parameter: cut Res env lfo 110 0 10 0 Rotate the encoder clockwise to make env the active parameter, rotate the encoder counter-clockwise to make cut the active parameter. If you continue rotating the encoder clockwise for several steps, the next page, env 1 , will be shown, and its first parameter, atk , will become selected. Once a parameter is selected, click the encoder to edit it. The encoder is now used to increment/decrement the parameter value. Once the value has been set, click on the encoder again to move back to the 4 parameter summary. Note that potentiometer and encoder editing can be combined. For example, use a potentiometer to quickly adjust a parameter, and then, while the parameter name is still displayed on the screen, use the encoder to fine-tune it. A last trick: if you hold S6 while rotating the encoder, it will increment/decrement by 10 instead of 1. This is particularly useful for browsing long lists of patches... That's all you need to know about the pages/navigation system!","title":"Using the encoder."},{"location":"shruthi/manual/#display-status-symbols","text":"The Shruthi sometimes flashes a symbol on the first line of the display to signal incoming MIDI messages or the completion of specific commands. Symbol Status (note icon) A Note On MIDI message has been received (pitch bend lever icon) A pitch bend message has been received \\~ A control change message has been received ! The Shruthi is busy accessing memory - this can interrupt sound generation x The patch has been reset to initial settings ? The patch has been randomized > Patch or sequence SysEx data is being sent + Patch or sequence SysEx data has been successfully received # The Shruthi has received invalid SysEx data (for example a SysEx message intended for another device)","title":"Display status symbols"},{"location":"shruthi/manual/#reference","text":"The section describes one by one all the parameters accessible on the synthesis and sequencer pages.","title":"Reference"},{"location":"shruthi/manual/#synthesis","text":"Before digging into the pages details, here is a diagram of the Shruthi signal flow. The audio signal flow is represented in red (digital path) and then in orange (analog path): The oscillators 1 and 2 generate digital waveforms, which are combined together by the modulator. The default modulator is a balance control over the level of the two oscillators, but more esoteric modulation methods are available. The sub-oscillator (which is synchronized in pitch with the oscillator 1, but 1 octave lower) also generates a basic waveform. The click generator generates a short transient/click at the beginning of the note. Note that the sub-oscillator and the click generator cannot be used at the same time. It's bassy-beefy or clicky, not both. The output of the modulator, the sub-oscillator/click-generator and some additional noise are mixed together. You can adjust the balance of each ingredient. The result is converted into a pseudo analog (10 MHz / 1bit) audio signal, and mixed in the analog domain with an external signal coming from the Audio in jack. The result is then sent to an analog VCF and VCA, to produce the final audio signal. Some filter boards might offer other signal transformations such as additional filters, effects, distortions... Each of these modules have parameters (represented by the blue arrows) which can be controlled by any of the modulation sources listed below. However, some connections are already \"hardwired\" (or rather \"softwired\" in the firmware): The oscillators' pitch always track the note played on the keyboard. The filter cutoff frequency always tracks the note. Again, this can be disabled or attenuated by applying a negative modulation from note pitch to cutoff frequency. The rationale behind this choice is that most of the time, you want 1:1 tracking, so this frees up a slot in the modulation matrix for something more interesting! Lfo 2 and Envelope 1 are always connected to the filter, their modulation amount being controlled by dedicated parameters on the filter page. The following routing programmed in the init patch: Source Destination Amount Lfo 1 Oscillator 1 coarse pitch 0 Lfo 1 Oscillator 2 coarse pitch 0 Lfo 2 Oscillator 1 PWM 0 Lfo 2 Oscillator 2 PWM 0 Lfo 2 Oscillators balance 0 Step sequencer Oscillators balance 0 Velocity Oscillator 1 PWM 0 Velocity Oscillator 2 PWM 0 Envelope 2 VCA gain 100% Velocity VCA gain 25% Bender Oscillator 1+2 fine pitch 2 semitones LFO Oscillator 1+2 fine pitch (vibrato) 2 semitones","title":"Synthesis"},{"location":"shruthi/manual/#oscillator-1","text":"Sha prm rng sub saw 0 0 sq1 sha (shape) : Oscillator 1 waveform shape. prm (parameter) : Oscillator 1 parameter. This changes the timbre of the generated waveform, in a waveform-specific way (see below). rng (range) : Oscillator 1 pitch, from -24 semitones to 24 semitones (relative the pitch of the MIDI note). sub (subosc) : Sub-oscillator shape (see below). The following is a list of all the available waveforms, with some applications and a description of what adjusting the parameter setting actually does.","title":"Oscillator 1"},{"location":"shruthi/manual/#none-silence","text":"This simply switches off the oscillator. This might be useful for filtering/gating external signals, or to temporarily mute an oscillator when editing a patch.","title":"none: Silence"},{"location":"shruthi/manual/#saw-sawtooth","text":"This waveform is perfect for basses and brass sounds. The parameter controls the waveshapping - when its value is increased, an increasingly large section of the waveform is shifted up. Note that this is not intended to be a perfect, drawn with a ruler, sawtooth. It contains a bit of high-pass filtering to make it sound more Juno-y. This waveform is band-limited. Thus, only a limited amount of aliasing artifacts will be heard when playing high-pitched notes.","title":"saw: Sawtooth"},{"location":"shruthi/manual/#square-square-wave","text":"The parameter controls the pulse-width. This waveform is perfect for simulating a clarinet, for basses, \"hollow\" sounds or Depeche Mode-like leads. Note that this is not intended to be a perfect, drawn with a ruler, square wave. It contains a bit of high-pass filtering to make it sound more Juno-y. This waveform is band-limited and only a limited amount aliasing will be heard when playing high-pitched notes. Note that there's a slight difference in sound when moving the parameter from 0 to 1. To offer the best sound quality, the pulse width = 50% flavor is read straight from a wavetable at full sample rate, while the pulse width > 50% flavor is obtained from two dephased sawtooth waves, evaluated at half the sample rate. For bass sounds, for which aliasing is not going to be a problem, it is recommended to use pwm instead of square to get a beefier sound.","title":"square: Square wave"},{"location":"shruthi/manual/#triang-triangle","text":"A pure waveform, which serves as a good basis for flute or soundchip-like leads. The parameter controls some kind of waveshapping, clipping the bottom of the waveform. This waveform is band-limited and will still sound fine above C5.","title":"triang: Triangle"},{"location":"shruthi/manual/#zsaw-phase-distortion-sawtooth-with-filter-sweep","text":"This waveform uses phase distortion to recreate a low-pass filtered sawtooth by progressively \"pinching\" the phase of a sine wave. The parameter controls the brightness of the sound: from a sine wave to a sawtooth, then from a sawtooth to a sawtooth gone through an ugly transistor amp. Good for dirty bass guitar sounds or clavinets.","title":"zsaw: Phase-distortion sawtooth with filter sweep"},{"location":"shruthi/manual/#zreso-phase-distortion-sawtooth-with-resonant-filter-sweep","text":"This waveform uses phase distortion to recreate a sawtooth sent through a low-pass filter with high resonance. The parameter controls the resonance frequency. Useful for doubly-filtered sounds, formants, or anything where its synthetic, cheesy, feel will shine.","title":"zreso: Phase-distortion sawtooth with resonant filter sweep"},{"location":"shruthi/manual/#ztri-phase-distortion-resonant-triangle-monster","text":"This thing is hard to describe and must be experienced. It sounds like a resonant filter sweep, but has a very hollow, synthetic quality. It may or may not have been in the Casio CZ-101. This waveform is likely to result in whacky sounds, vaguely evoking hardsync.","title":"ztri: Phase-distortion resonant triangle monster"},{"location":"shruthi/manual/#zpulse-phase-distortion-trapezoidal-creature","text":"Yet another waveform that makes little sense. When the parameter is set to 0, it sounds like a fat superposition of a square wave and a sawtooth. Sweeping the parameter value progressively increases what sounds like the resonance of an odd, goofily saturated analogue filter.","title":"zpulse: Phase-distortion trapezoidal creature"},{"location":"shruthi/manual/#zsync-phase-distortionself-sync-trick","text":"You know the trick: one oscillator playing a low-frequency square wave and another oscillator a higher-frequency sine wave, the first one resetting the phase of the second... and the two of them sent into a ring-modulator! Now roll this into one single sound generator, the parameter of which controls the frequency ratio of the two oscillators: we call it zsync... The resulting sound is close to a Jew's harp or Morsing - band-passey and formantey.","title":"zsync: Phase-distortion/self-sync trick"},{"location":"shruthi/manual/#pad-stack-of-4-detuned-sawtooth-waves","text":"As the name implies, this waveform made of four stacked sawtooth waves is useful for pads (when a copious amount of filtering is applied) or for harsh trance leads. The parameter controls the amount of detuning between the four waves. Note that no bandlimiting is happening here, so this thing doesn't sound quite good above C5... but it's doing a perfect job in the bass range!","title":"pad: Stack of 4 detuned sawtooth waves"},{"location":"shruthi/manual/#fm-minimal-2-operators-fm","text":"The parameter controls the modulation strength. This oscillator provides the base material for metallic sounds, bells, metallophones, or the next 386 DX hit. When the fm oscillator is selected, the range parameter plays a slightly different role than usual: instead of controlling the main pitch of the note, it controls the modulator frequency, and has a drastic impact on the timbre.","title":"fm: Minimal 2-operators FM"},{"location":"shruthi/manual/#waves-tampur-digitl-metall-bowed-slap-organ-male-wavetables-wavetables-wavetables","text":"All these waveforms are wavetables, comprising 16 single-cycle waveforms. The parameter scans the wavetable, smoothly interpolating between each waveform. Some of these tables are \"transwaves\": the single cycle waveforms were extracted from different \"stages\" of a sample, and you can somehow recreate the original sample by using an envelope that will sweep the parameter from 0 to 127. waves are 16 basic waveforms, or rather two series of 8 basic waveforms: waveforms 9-16 are one octave higher. tampur is a transwave extracted from a looped Tampura note. digitl is a PPG-wave classic. metall is made from single cycle waveforms extracted from classic D50 patches. bowed is a transwave extracted from cello sounds. slap is a transwave extracted from an SQ-80 slap bass patch. organ contains 16 different mixtures of pure tones, ready for some \"Light my fire\" action. male is another PPG-wave classic, it sounds vaguely like a human male voice.","title":"waves, tampur, digitl, metall, bowed, slap, organ, male: wavetables, wavetables, wavetables!"},{"location":"shruthi/manual/#user-user-wavetable","text":"This wavetable has two peculiarities: it is smaller than the other ones (8 single cycle waveforms, each of them being 129 samples long), and it resides in RAM instead of residing in flash ROM. By default, it is loaded with the same content as digitl , but its content can be altered by SysEx messages . You can find here some examples of MIDI files containing user wavetables.","title":"user: user wavetable"},{"location":"shruthi/manual/#8bits-bitwise-anarchy","text":"A palette of 8-bits sounding waveforms obtained by applying bitwise operations to a basic sawtooth wave (something now known as \"biscuiting\").","title":"8bits: bitwise anarchy"},{"location":"shruthi/manual/#crush-bit-crushed-sine-and-triangle-wave","text":"From 0-63, this oscillator will produce a bit-crushed sine wave ; 63 corresponding to the maximum amount of decimation. From 64-127, this will produce a bit-crushed triangle wave, 64 corresponding to the maximum amount of decimation. As a result, the transition from the two waveforms is smooth since the bit-crushing is very heavy when the two ends meet. A parameter value near 120 yields a very typical NES bass sound.","title":"crush: bit-crushed sine and triangle wave"},{"location":"shruthi/manual/#pwm-my-first-arduino-synth","text":"This waveform is a shamelessly naive square wave. The parameter controls the pulse-width. Contrary to square , this waveform stinks aliasing - but for notes below C2 it is not a real problem: it becomes much more aggressive and \"in your face\" than square .","title":"pwm: my first Arduino synth"},{"location":"shruthi/manual/#noise-filtered-noise-generator","text":"The parameter controls the frequency of a simple 1-pole low-pass/high-pass filter in which is sent white noise. From 0 to 63, high-frequency content is progressively added. From 63 to 127, low-frequency content is progressively removed. Perfect as a raw material for percussions or sound effects.","title":"noise: Filtered noise generator"},{"location":"shruthi/manual/#vowel-low-tech-formant-synthesis","text":"Changing the parameter will sweep between different vocal-like sounds (14 vowels and 2 consonants). Now. Spell. Daftpunk.","title":"vowel: Low-tech formant synthesis"},{"location":"shruthi/manual/#remaining-wavetables","text":"The remaining waveforms are an additional selection of wavetables. Some of them, like cello or vibes , are made of single-cycle waveforms extracted from samples. The others are inspired by some PPG classics! That's it for the oscillators waveforms. Oscillator 1 is linked to a sub-oscillator / transient generator. The first 6 settings correspond to the sub-oscillator, which is an oscillator of its own, playing always one or two octave lower than the oscillator 1. The next settings disable the sub-oscillator and enable various transient generators, which will produce a short, clicky sound at the beginning of the note: sq1 square sub-oscillator, 1 octave below osc. 1 tr1 triangle sub-oscillator, 1 octave below osc. 1 pl1 25% pulse sub-oscillator, 1 octave below osc. 1 sq2 square sub-oscillator, 2 octaves below osc. 1 tr2 triangle sub-oscillator, 2 octaves below osc. 1 pl2 25% pulse sub-oscillator, 2 octaves below osc. 1 click produces a discrete click (more obvious on sine/organ sounds). glitch produces a sound similar to that of a skipping CD. blow is a burst of noise with a slow attack. metal adds a metallic sounding, high-pitched click. pop adds a low-pitched discontinuity. The transient generator can be used for instance to add some punch to metallic-sounding or FM sounds, or for percussive effects.","title":"Remaining wavetables..."},{"location":"shruthi/manual/#oscillator-2","text":"Sha prm rng tun saw 0 0 0 sha (shape) : Oscillator 2 waveform shape. The available waveforms are the same as for oscillator 1. prm (parameter) : Oscillator 2 parameter. rng (range) : Oscillator 2 pitch transposition, from -24 semitones to 24 semitones. tun (detune) : Fine detuning of Oscillator 2.","title":"Oscillator 2"},{"location":"shruthi/manual/#mixer","text":"Op. mix sub noi sum 32 0 0 op (operator) : Modulation operator (see below). mix (osc bal) : Oscillator 1&2 balance. Might do something different than balance when an operator different from sum is selected (see the Oscillator 1 section). sub (sub osc.) : Sub oscillator or transient generator level. noi (noise) : Noise level. The operator parameter controls how oscillator 1 and oscillator 2 are blended together. The different modulation modes are: Operator Description What does the mix parameter do? sum Mixing Adjusts the oscillator 1&2 balance sync Mixing and synchronization: oscillator 2's phase is reset whenever oscillator 1's phase is reset. You won't hear the detuning, but instead a timbral modulation Adjusts the oscillator 1&2 balance ring Ring modulation - oscillators' signals are scaled and multiplied Balance between the original sound and the output of the modulator xor XOR modulation. The bits of oscillator 1 and 2's digital values are exclusive-or'ed, and the result is shifted Shifts the output, with overflow fuzz Fuzz. Oscillator 1 and 2 are equally mixed and sent to a waveshapper with a warm tanh response Fuzz amount >> 4 Oscillator 1 and 2 are mixed and sent through a dirty 4x sample rate reduction Oscillator 1&2 balance >> 8 Oscillator 1 and 2 are mixed and sent through a dirty 8x sample rate reduction Oscillator 1&2 balance fold Oscillator 1 and 2 are mixed and sent through a foldback distortion Distortion amount bits Oscillator 1 and 2 are mixed and sent through a bit depth reducer Bit depth reduction amount duo Duophony Adjusts the oscillator 1&2 balance 2steps Oscillator 1 / 2 cycling - 4steps Sound source cycling - 8steps Sound source cycling - seqmix Sound source cycling - A few words about the last fancy modulation modes... In duophony mode, you can play two-note chords (or bass + melody). The first note of the chord will be assigned to oscillator 1, and the second note will be assigned to oscillator 2, like on the ARP Odyssey or the Polivoks. This works best when mix is set to 32 and when oscillator 1 and 2 are set to the same settings (otherwise small differences in timing can result in drastic changes as both notes of the chord will be assigned to different oscillators). If you play more than 2 notes, the least recently played note will be assigned to oscillator 2, the most recently played note to oscillator 1 ; and the other notes are ignored. The sub-oscillator follows the least recently played note. Note that the Shruthi is by design a monosynth, with one set of envelopes & LFOs, and one filter / VCA - both notes will go through the same filter and have the same envelope, resulting in a kind of weird paraphonic effect. Don't be surprised if you encounter pitch jumps, envelope clicks, weird voicing, or if things do not sound and feel as good as on a polysynth - all these are due to stubbornly trying to fit duophony into an essentially monophonic design. Ironically, the duophony mode works best with the arpeggiator - it will move through the chord in pairs of notes. Try it! In 2steps mode, oscillator 1 and oscillator 2 are alternatively on and off at each new note. In 4steps mode, oscillator 1, oscillator 2, the sub oscillator and the noise source are alternatively on and off at each new note. The first note you play is played by the sub-oscillator ; the second note by oscillator 1 ; the third by the noise source ; the fourth by oscillator 2. Try this with the arpeggiator and you get a mini drum pattern! 8steps does the same thing, but with a more complex cha-cha rhythmic pattern. Finally, in seqmix mode, the on/off status of the oscillators / sub / noise is controlled by the values in the step sequencer. 1 = osc 1 ; 2 = osc 2 ; 4 = sub ; 8 = noise ; and these values can be added up for combinations (osc 1 + noise = 1 + 8 = 9). The following table enumerates all combinations: Step sequencer value Osc 1 Osc 2 Sub Noise 0 - - - - 1 X - - - 2 - X - - 3 X X - - 4 - - X - 5 X - X - 6 - X X - 7 X X X - 8 - - - X 9 X - - X a - X - X b X X - X c - - X X d X - X X e - X X X f X X X X You can thus use this mode for programming simple drum patterns in the step sequencer - using the sub oscillator as a bass drum and the noise as a snare drum, and interweaving notes from the oscillators between the drum notes.","title":"Mixer"},{"location":"shruthi/manual/#filter","text":"Cut res env lfo 66 0 16 37 cut (cutoff) : Filter cutoff frequency. res (resonance) : Filter resonance. env (env1->vcf) : Modulation amount from envelope 1 to VCF. If you want to set a negative modulation amount, you can patch env1 to the VCF in the modulations section and ignore this parameter. lfo (lfo2->vcf) : Modulation amount from LFO 2 to VCF. Again, if you want to set a negative modulation amount, you can patch the LFO 2 to the VCF in the modulations section and ignore this parameter. Note that a second page of filter settings might be available if a special filter board is used - for example, the dual multimode filter board has a second menu with the cutoff/resonance of the second filter, or the filter mode settings. Please refer to the documentation specific to each filter board!","title":"Filter"},{"location":"shruthi/manual/#envelope-1-2","text":"Atk dec sus rel 0 44 20 60 atk (attack) : Envelope attack time. dec (decay) : Envelope decay time. sus (sustain) : Envelope sustain level. rel (release) : Envelope release time. Note that the envelopes are not linear, but have a moderate exponential slope for snappier action.","title":"Envelope 1 / 2"},{"location":"shruthi/manual/#lfo-1-2","text":"Sha rat atk mod tri 52 0 fre sha (shape) : LFO waveform. The available LFO waveforms are: triangle, square, sample&hold, ramp (sawtooth), step (cycles through the sequence of values programmed in the step sequencer). 16 additional waveforms named \\~1 to \\~16 are also available. They are directly taken from one of the wavetables, are intended to be used with slow frequencies, and are very good at mimicking the sounds of machines or... human organs. rat (rate) : LFO rate. atk (attack) : LFO rise time. When this setting is non-zero, the LFO will take some amount of time to reach its maximum amplitude mod : LFO synchronization mode: when set to free , the LFO is free-running. When set to slave , the phase of the LFO is reset every time a new note is played. When set to master , the LFO will retrigger the envelope (LFO 1 retriggers envelope 1 and LFO 2 envelope 2). Finally, when set to 1 shot the LFO will turn into a single-cycle envelope triggered on every key press. Among the choices of LFO rates, the first values, which are prefixed by a \"x\", are tempo-synchronized settings. The number following the X corresponds to the number of sequencer steps that will be used to set up the LFO period: x16 simply means that the LFO will go through one cycle over the duration of 16 sequencer steps (4 beats). For example, if you set the LFO to a ramp, with a rate of x4 , and map it to the cutoff, the cutoff will raise over the duration of a beat and return to a low value at the beginning of each beat. With a x2 or x1 rate, square LFO mapped to the VCA, you can get old-school trancey gater effects. With a x2 rate, sample&hold LFO mapped to the cutoff and the basic arpeggiator pattern, with high resonance, you get a random bleeping at every note.","title":"LFO 1 / 2"},{"location":"shruthi/manual/#modulation-matrix","text":"In this page, the routing between the modulation sources and destinations is configured. The first important thing about this page is that it works a bit differently from the others: the potentiometer P1 is used to select a patchcord, while P2 , P3 and P4 are used to edit it. Here is an example: Mod src dst amt 1 lf1 ~1 0 This page means: \"The patchcord #1 connects the LFO1 to the oscillator 1 pitch, and the corresponding modulation amount is set to 0\". By turning the first knob, you can scroll through the different connections in place, for example: mod src dst amt 9 en2 vca 63 \"The patchcord #9 connects the envelope 2 to the VCA gain, and the corresponding modulation amount is 63\". Once a patchcord is selected with the first knob, the source/destination/amount are edited with the 3 other knobs. Note that you can see in details the source and destination when tweaking one of those parameters: mod en>vca amount 62 When editing modulations, L6 blinks/is dimmed to reflect the value of the selected modulation source. The modulation sources are, in modern lovers precise order: lfo1 , lfo2 : LFO output (centered). stpseq : Step sequencer output. stpsq1 : Step sequencer's little brother 1: it cycles on the first 8 steps of the sequence. stpsq2 : Step sequencer's little brother 2: it cycles on the last 8 steps of the sequence. arp : Rhythmic gate signal, which outputs a high value when the arpeggiator or sequencer contains a note at the current step, or 0 when there is no note. mwheel : Modulation wheel value read from the MIDI input. afttch : Aftertouch value read from the MIDI input. bender : Pitch-bend controller value read from the MIDI input (centered). offset : A boring constant value. This is useful if you want to output a fixed value to one of the CV outs. cv1 , cv2 , cv3 , cv4 : Control voltages read from the CV input pins. By default, the input pins are floating, so it's likely that these modulation sources will sound just like noise. These modulation sources do nothing on the Shruthi XT (which does not have extra CV pads). cc A , cc B , cc C , cc D : Value of the Control Change 16, 17, 18 and 19. noise : Another noise generator! Mapped to the VCA, makes for some super snares! env1 , env2 : Envelopes. velo : Note velocity. random : A random value updated every time a new note is played. note : Pitch of the currently played note (centered). gate : Keyboard gate signal, null when no key is currently pressed. audio : Digital audio signal produced by the mixer. Please note that since the modulation matrix is recomputed at 976Hz, some serious aliasing is happening here. You're not going to do FM with this thing, most of the time it sounds like crap, but it's something fun to experiment with! op. 1 : Operator 1. op. 2 : Operator 2. The modulation destinations are, in modern lovers precise order: pwm1 : Oscillator 1 parameter (can be pulse width, but also waveshapping, phoneme, etc. depending on the oscillator type). pwm2 : Oscillator 2 parameter (can be pulse width, but also waveshapping, phoneme, etc. depending on the oscillator type). osc1 : Coarse oscillator 1 pitch, in a -16 / 16 semitones range. Also affects the sub-oscillator's pitch. osc2 : Coarse oscillator 2 pitch, in a -16 / 16 semitones range.. osc1+osc2 : Coupled oscillator 1+2 pitch, in a -4 / 4 semitones range. Also affects the sub-oscillator's pitch. fine : Fine oscillator 1+2 pitch, in a -1 / 1 semitones range. Also affects the sub-oscillator's pitch. mix : Oscillator 1&2 balance (or whatever the modulator does with the balance parameter). noise : Noise volume. subosc : Sub-oscillator volume. cutoff : Filter cutoff. reso : Filter resonance. vca : VCA gain. 13 cv1 , cv2 : Control signal for the CV output #1 and #2. When a special filter board is used, this controls a parameter of an additional sound processing unit, such as a secondary filter, a delay, etc. Please refer to the documentation specific to each filter board! attack : Envelope 1 and 2 attack speed. For example, map velocity to this modulation destination to have a faster attack time on notes played with a high velocity. tr11 , a1 , d1 , s1 , r1 : Envelope 1 trigger, attack, decay, sustain, release. tr12 , a2 , d2 , s2 , r2 : Envelope 2 trigger, attack, decay, sustain, release. atk : Envelope 1 & 2 attack time. lfo1 , lfo2 : Frequency modulation of the two LFOs. One thing that requires a bit of clarification is the notion of \"centered\" modulation source. Let's take an example. We have a triangle LFO mapped to the filter cutoff, with a modulation amount of 30. If the cutoff is set to 80, the actual value of the cutoff will oscillate between 50 (80-30) and 110 (80+30). On the other hand, if we have an envelope mapped to the cutoff with a modulation amount of 20, the cutoff will go from 80 to 120 (80 + 2 * 20), then down to 80 after the release. This is something to remember if you want to do PWM, for example. If you set the PWM modulation amount to 40, you also have to set the oscillator pulse width value to 40, so it will oscillates between 40-40 = 0 and 40+40=80. Otherwise, it will spend half of the time stuck at 0. But this makes things nicer for vibrato, tremolo, wah-wah or growl effects! Quirk ahoy! The modulation amount of the last patch cord is adjusted by the modwheel. Huh? Let's say you set patch cord 12 to go from LFO 1 to the oscillators fine pitch with an amount of 16: Mod src dst amt 12 lf1 ~ 16 This modulation will be applied with an amount proportional to the modwheel position - by default it won't be active until you start moving the modulation wheel, and to get it at full strength, you'll have to push the modulation wheel to the max.","title":"Modulation matrix"},{"location":"shruthi/manual/#operators","text":"Press the modulation matrix button twice to bring the operators page. In this page, you can configure the two \"operators\". An operator takes 2 modulation sources, applies a fancy (or not) mathematical operation on them, and the result is made available as a new modulation source in the modulation matrix. Op. in1 in2 out 1 lf1 lf2 add Use the first setting ( op. ) to select which operator to modify. The second and third options allows you to select which modulation destination you want to operate on. The last setting is the operation to apply: add adds the values of two modulation sources. prd computes the product of the two modulation sources. max takes the maximum of the two sources. min takes the minimum of the two sources. xor totally messes up the two sources. [=]{style=\"text-align:right;\"} outputs a large value if source 1 is above soure 2, 0 otherwise. [=]{style=\"text-align:left;\"} outputs a large value if source 1 is below soure 2, 0 otherwise. qtz source 1 is quantized into a number of values set up by source 2. lag source 1 is low-pass filtered, with a cutoff frequency set up by source 2. There are plenty of things to experiment with... Create a multi-stage envelope by taking the max of envelope 1 and 2 ; mask a LFO by the step sequencer ; build a chaotic LFO using feedback and xor modulation between the two LFOs ; Square the value of a LFO to change its shape... Here is a more precise example showing how to low-pass filter a square LFO to create a \"soft\" modulation source routed to the filter. First, route the operator 1 output to the filter cutoff: Mod src dst amt 1 op1 cut 63 Then, specify that operator 1 is LFO1 transformed by a \"lag processor\". Op. in1 in2 out 1 lf1 =4 lag The in2 is the filtering cutoff frequency. You can try setting this to velocity too: the harder the note is pressed, the harder the edges of the LFO are! Here is another example showing how to quantize an envelope to create a low-fi \"steppy\" modulation. First, route the operator 1 output to the filter cutoff: Mod src dst amt 1 op1 cut 63 Then, specify that operator 1 is a quantized version of the envelope 1: Op. in1 in2 out 1 en1 =4 qtz","title":"Operators"},{"location":"shruthi/manual/#sequencer-and-arpeggiator","text":"Before going further, let's get things straight: the Shruthi sequencer has little in common with the sequencer of, say, a TB-303: it is not intended to be a \"press play and let it do all the work\" thing. Indeed, there's no \"play\" button on the Shruthi! You have to think of it as an arpeggiator-like tool - something to help create complex riffs and patterns with limited keyboard action.","title":"Sequencer and arpeggiator"},{"location":"shruthi/manual/#sequencer-mode-and-clock","text":"Mod bpm gro amt stp 120 swi 0 mod (mode) : Sequencer/arpeggiator mode. This deserves some generous amount of explanations, please read further! bpm (bpm) : Arpeggiator/step sequencer/LFOs tempo in BPM. extern will sync the Shruthi clock to the ticks received from the MIDI input. gro (groove) : groove template. The options are swing (uneven distribution of pairs of 1/8th notes), shuffle (uneven distribution of pairs of 1/16th notes), push (push the beat), lag (sloppy drummer!), human (humanization) and monkey (humanization + shuffle). This setting only has an effect when amt is set to a non-zero value. The swing is only applied to the internal clock - not when the Shruthi is slaved to an external MIDI clock. amt (amount) : amount of groove to apply. Now let's dig into the sequencer modes...","title":"Sequencer mode and clock"},{"location":"shruthi/manual/#stp-step-sequencer-only","text":"When stp is selected, the arpeggiator and pattern sequencer are disabled. The only pulsating, modulating things running are the LFOs and the step sequencer.","title":"stp: step sequencer only"},{"location":"shruthi/manual/#arp-arpeggiator","text":"When arp is selected, the chords played on the keyboard are arpeggiated. Releasing the keys for a short amount of time stops the arpeggio but keeps the clock ticking. Releasing the keys for a duration greater than that of a bar stops the arpeggio and resets the clock -- it will restart from the first beat once a chord will be played.","title":"arp: arpeggiator"},{"location":"shruthi/manual/#seq-pattern-player","text":"In this mode, the pattern programmed in the sequencer is triggered by playing a note on the keyboard. Depending on the note you play, the pattern is transposed: play C4 to play the pattern as recorded, C#4 to play it one semi-tone higher, B3 to play it one semi-tone lower, etc. The pattern will stop whenever the key is released -- but the clock will continue ticking for the duration of a bar - and if a key is pressed during this interval, the pattern will resume in time. This mode is most useful for playing and transposing a bassline.","title":"seq: pattern player"},{"location":"shruthi/manual/#arpeggiator","text":"Dir rng pat div ? 1 0 /16 dir (direction) : Arpeggiator direction. The options are up, down, up/down, random, and \"as played\". rng (range) : Arpeggiator range, in octaves, from 1 to 4. pat (pattern) : Arpeggiator rhythmic pattern. 15 patterns are available (see the chart below). The last option in the list, sequence uses the rhythmic pattern programmed in the sequencer. div (division) : This option modifies on which subdivison of the internal or external MIDI clock the arpeggiator and sequencer are aligned.","title":"Arpeggiator"},{"location":"shruthi/manual/#arpeggiator-patterns","text":"1: o o o o o o o o 2: ooo ooo ooo ooo 3: o o ooooo o oooo 4: o o oo oo o oo o 5: oooo oo oooo oo 6: o o o o 7: o o o o o o 8: o o o o o o 9: o o o o o o 10: oo oo oooo oo oo 11: ooooo oo oo ooo 12: o o o o o o 13: o oo o o o oo 14: o oooooo oo 15: o o o oo","title":"Arpeggiator patterns"},{"location":"shruthi/manual/#pattern-editor","text":"The pattern editor page is very different from the other pages. Here is how it looks like: |00| C3 - 7 0 | >|01| C3 - 7 0 | It contains 5 columns, showing, from left to right: The step number The note at this step The rhythmic event at this step: note (represented by a note icon), tie/slide (represented by a -- sign), or rest (empty) The velocity (applies only to steps with a note) The step sequencer/controller value at this step, from 0 to 15 (values from 10 to 15 are represented by the letters a to f) The pattern can be edited with the potentiometers. P1 scrolls through the steps, P2 changes the note at the current step. P3 changes the rhythmic event and velocity value at the current step. Finally, P4 modifies the controller value. The encoder can be used to scroll through the steps. Clicking the encoder enters the edit mode: a blinking cursor is shown, and the encoder is now used to increase/decrease the note value. Clicking the encoder again leaves the edit mode. While in edit mode, pressing a key on the MIDI keyboard will record the note number at the current step, and move to the next step. This can be seen as a naive \"step by step recording\" mode, which can be used while a sequence is playing. Three important notes: The pattern length is by default 16 steps, but this can be changed on the Rhythmic sequencer or Step sequencer pages. The note sequence, rhythmic pattern, and controller (steps) sequence all have the same length. The step sequence (controller values) have an effect only when the step sequencer is routed to a modulation destination in the modulation matrix!","title":"Pattern editor"},{"location":"shruthi/manual/#rhythmic-sequencer","text":"This page shows, on a single screen, the rhythmic content of the bar programmed in the pattern editor. It is particularly useful when programming a rhythmic pattern for the arpeggiator - a task for which the only information that really matter are the note velocities and rhythmic events. The first line of the screen shows the rhythmic events, the second line the programmed velocities: xxx x x x---x--- 777 7 6 54443111 Use P2 to move the cursor, P3 to change the rhythmic event/velocity at the selected step, and P4 to adjust the pattern duration. The encoder can be used for editing too: select a step, click, edit the step value, and click again when done.","title":"Rhythmic sequencer"},{"location":"shruthi/manual/#step-sequencer","text":"This page shows a different view of the controller values programmed in the pattern editor. step sequencer 0000ffffcccc4444 Use P2 to move the cursor, P3 to change the controller value at the selected step, and P4 to adjust the pattern duration. The encoder can be used for editing too: select a step, click, edit the step value, and click again when done. P1 can also be used to shift and cycle the sequence.","title":"Step sequencer"},{"location":"shruthi/manual/#tuning-settings","text":"Oct rag prt leg 0 equ 0 off oct (octave) : Transpose every note by -2, -1, 0, 1 or 2 octaves. rag (raga) : Scale/keyboard mapping. prt (portamento) : Portamento time. leg (legato) : Legato on/off. This option specifies how the Shruthi will interpret overlapping notes. When legato is off, the envelope retriggers every time a new note is played, and the portamento is always applied. When legato is on, the envelope retriggers only when the new note does not overlap with the previous one, and the portamento triggers only on overlapping notes. The different scales/keyboard mappings are: Name Description equal Equal temperament just Just intonation (frequency ratios to C are rational numbers) pythagorean Pythagorean scale 1/4 eb E and B are 1/4 tone lower 1/4 e E is 1/4 tone lower 1/4 ea E and A are 1/4 tone lower bhaira ... rasia A bunch of ragas of the Maihar gharana . Note that it is not possible to play notes outside of the raga - if you attempt to do so, the previously played note will be retriggered. The suggested mode of operation is to find out which keys are active in the raga, and improvise with them!","title":"Tuning settings"},{"location":"shruthi/manual/#master-tune-and-midi-settings","text":"Tun chn mid 0 1 ful tun (tune) : Master tuning in the -1/+1 semitone range. chn (midi chan) : MIDI channel the Shruthi is tuned to. Use 0 to receive on all channels. mid (midi out) : Data sent to the MIDI out. Refer to this paragraph from the MIDI implementation section.","title":"Master tune and MIDI settings"},{"location":"shruthi/manual/#system-settings","text":"Pau sna fil sta 8 off lpf spl pau (pause) : Duration (in increments of 0.128 seconds) during which the long parameter name and value is shown on screen when a potentiometer is adjusted. When set to 0, the screen always shows the four parameters summary. This setting can also be used to enable a screen-saver: select one of the options prefixed by 's', and the display of the Shruthi will go blank after a few minutes of inactivity. This extends the life of OLED displays (but has no impact on LCD displays!). sna (snap) : Enables potentiometers' \"snap\" mode. This mode makes it less likely to accidentally change a parameter value when switching pages. Suppose you're tweaking the filter resonance with P2 -- you rotate it all the way down to 0. Then you switch to the oscillator 1 page to adjust the oscillator 2 parameter. If the current value of the parameter is set to 64, you'll hear a discontinuity, since the value of the parameter will instantly jump to 0 or 1 when you start touching the pot. When snap is on, things will happen differently: rotating the pot will have no effect until the position of the pot actually reflects the current value of the parameter. After that, the parameter value will track the potentiometer's position. Another way to explain it: when snap is on you have to move the pot to \"grab\" the current parameter value before the parameter is modified. fil (filter) : Enables software extensions for a specific filter board. The default, lpf must be selected for the SMR4 filter board. ssm must be selected for the legacy SSM2044 filter board. svf is for the dual SVF filter board, dsp the digital filter, pvk the Polivoks filter board, and dly the LP2+delay filter board. sta (startpage) : Selects on which page the Shruthi boots (splash screen, filter page, preset load/save page).","title":"System settings"},{"location":"shruthi/manual/#the-loadsave-page","text":"The Shruthi can save in persistent memory the following data: Patches (16 in internal memory, up to 464 on the external eeprom chip). A patch includes all synthesis parameters and the sequencer/arpeggiator data; at the exception of the tempo/clock settings and the system settings such as MIDI channel, transposition, etc. Global settings (in internal memory). To load/save a patch, press S6 from any of the synthesis/sequencer editing pages. To load/save global settings, press S6 from the tuning/MIDI settings pages, or from the system settings page.","title":"The load/save page"},{"location":"shruthi/manual/#patch-loadsave-page","text":"browse :patch 1 init The first line shows the action being performed (load, save, or compare). The second line shows the program number and its name.","title":"Patch load/save page"},{"location":"shruthi/manual/#browsing-the-patch-library","text":"Rotate the encoder to browse through the patches. Click the encoder to temporarily revert to the patch which was being edited before entering the load/save page: browse is replaced by compare on the screen. Click the encoder again to resume browsing patches. The Shruthi sends a MIDI program change message whenever a new patch is loaded. Note that when attempting to load a patch while a sequence or arpeggio is currently playing, the sequencer/arpeggiator settings stored with the patch are not loaded. This allows you to listen how different patches sound while keeping your sequence/arpeggio running.","title":"Browsing the patch library"},{"location":"shruthi/manual/#saving","text":"When the browse page is displayed, press S6 again to jump to the save page. A blinking cursor is shown in front of the patch number: save :patch _1 init ok Click and rotate the encoder to select the program number. Click again when done. Rotate the encoder to move the cursor to a letter of the patch name you want to modify. Click and rotate the encoder to change the letter. Click again when done. Once the patch number and patch name have been set, move the cursor to the ok button. When selected, it will appear in brackets []{lang=\"ok\"} . Click the encoder to confirm... The patch is saved! To cancel and leave the save page, press any other switch.","title":"Saving"},{"location":"shruthi/manual/#special-functions","text":"While the browse page is displayed, hold S6 and press: S1 to revert the current patch to init . S2 to program random values into all the parameters of the current patch. S3 to dump the current patch to the MIDI output as a SysEx block. S4 to bring up the global backup page .","title":"Special functions"},{"location":"shruthi/manual/#global-settings-save-page","text":"The default values of global settings such as octave transposition, MIDI channel, MIDI out mode, etc. are read from internal memory every time the Shruthi boots up. To use the current settings as default settings, press S6 while one of the tuning , MIDI or system settings pages are displayed. The display will show the following confirmation message: save midi/kbd settings? no Leds L1 , L3 , L5 and L7 will be lit. Rotate the encoder until ok is displayed instead of no . Click the encoder to confirm.","title":"Global settings save page"},{"location":"shruthi/manual/#global-backup-by-sysex","text":"The global backup function is accessible by holding S6 and S4 together from the sequence or patch load pages. A confirmation message is displayed: start full midi backup? no Leds L1 , L3 , L5 and L7 will be lit. Rotate the encoder until ok is displayed instead of no . Click the encoder to confirm. The entire content of the Shruthi patch and sequence memory will be sent as a sequence of SysEx messages.","title":" Global backup by SysEx"},{"location":"shruthi/manual/#miscellaneous","text":"","title":"Miscellaneous"},{"location":"shruthi/manual/#latch","text":"While a note (in stp mode), arpeggio (in arp mode) or sequence (in seq mode) is playing, the encoder can be pressed for one second to latch the note. Dashes are shown on the display to indicate that the latch mode is active - for example: Mod-bpm-gro-amt stp 120 swi 0 Note off messages will be ignored. To leave the latch mode, press the encoder for one second. This will not immediately stop the arpeggiator/sequencer to give you some time to get back into action on the keyboard!","title":"Latch"},{"location":"shruthi/manual/#jam-mode","text":"The Jam mode allows notes to be played, or sequences/arpeggios to be started and transposed without any external MIDI controller. On the Shruthi XT, the Jam mode is triggered with a dedicated button on the top-right section of the panel. The Jam mode can also be accessed by keeping the encoder pressed for one second while no note/arpeggio/sequence is playing. A note is played and held immediately when entering the Jam Mode. Turn the encoder to transpose it by semitone increments. Use the 4 main knobs to transpose it by octaves, along a pentatonic scale, or along two unusual scales. It is still possible to navigate to other pages and to tweak other parameters while the Jam mode is active. In this case, pressing the Jam button or holding the encoder will simply bring back the Jam mode page (root note selection). Pressing the Jam button / holding the encoder while the Jam Mode is active and the Jam mode page is shown will stop the sequencer/arpggio/note.","title":"Jam mode"},{"location":"shruthi/manual/#hardware-selection","text":"The Shruthi firmware can run on 3 versions of the hardware: \"Classic\" version with 4 knobs. \"XT classic\" - original design by fcd72. \"XT\" - with aluminum panel, sold as a kit. The kits are sold with chips already configured for the correct version of the hardware. However, you might face the situation in which a chip configured for one version of the Shruthi is inserted into another version. This might lead to unexpected behavior such as flickering values on the screen, or buttons not correctly reacting to presses. To configure the correct version of the hardware, power the Shruthi on with the encoder pressed. The screen displays which version of the hardware is currently active. Repeat the procedure until the correct version is displayed.","title":"Hardware selection"},{"location":"shruthi/manual/#midi","text":"","title":"MIDI"},{"location":"shruthi/manual/#midi-out-modes","text":"The Shruthi can be used in a variety of MIDI configurations. In particular, different functions can be assigned to the MIDI out port, through the midi out option of the midi settings page.","title":"MIDI out modes"},{"location":"shruthi/manual/#off","text":"The MIDI out port is disabled. This settings brings a tiny, tiny improvement in responsivity to the MIDI input and to knob movements, since no MIDI out means less work for the CPU.","title":"off"},{"location":"shruthi/manual/#thru","text":"The MIDI out port outputs verbatim what was received on the MIDI input (soft-thru). This setting is not very CPU intensive, since no reformatting of the MIDI stream is done.","title":"thru"},{"location":"shruthi/manual/#seq","text":"The MIDI out port outputs only the note on and note off events processed by the synthesizer -- be they generated by the internal sequencer and arpeggiator, or received by MIDI.","title":"seq"},{"location":"shruthi/manual/#ctrl","text":"The MIDI out port outputs only NRPN and CC messages capturing knobs tweaking. This mode is ideal for using the Shruthi with both its IN/OUT ports connected to the same device. The other modes are not suitable for operation in this configuration since they can cause unwanted MIDI loops.","title":"ctrl"},{"location":"shruthi/manual/#full","text":"In this mode, every incoming message is forwarded to the Midi output. In addition, NRPNs and CC messages capturing the knob movements are inserted into the MIDI stream and written to the MIDI out. These messages can be used to record knob movements in a sequencer, or to synchronize 2 Shruthi in Unison mode.","title":"full"},{"location":"shruthi/manual/#polychaining","text":"In this mode, several Shruthi units chained together by MIDI can behave like a polysynth. Each unit will implement a \"distributed voice-stealing\" scheme, in which they will either play a note, or forward it to the chain. To this purpose, each unit must be aware of the number of units that will follow in the chain. This is done through one of the 8 polychaining settings: 1>| indicate that this unit is at the end of the chain, 2>1 indicates that this unit is followed by one unit, 3>2 indicates that this unit is followed by 2 units, etc. Here's an example of configuration to turn 3 Shruthi units into a triphonic synth: The 3 units obviously have to be sent to a common audio mixer or sound card. Some caveats regarding the polychaining mode: The arpeggiator and sequencer do not work in polychaining mode ; and the LFOs of each unit won't be synchronized with each other There is a latency of up to 2ms between each unit. Thus, this feature works best on small chains. Any parameter change done on the first unit in the chain is forwarded downstream, so tweaking is possible (and encouraged). Furthermore, when a patch is loaded on the master unit, it is dumped as a SysEx to each unit of the chain for synchronization purposes. However, this doesn't work the other way round: if you tweak a parameter or reload a new patch on the last unit in the chain, the other units upstream won't be aware of it!","title":"polychaining"},{"location":"shruthi/manual/#updating-the-shruthi-firmware-by-midi","text":"To update the Shruthi firmware, hold the S6 switch (or the OSC 2 SHAPE + switch on the XT) while the synth is being powered on. The screen remains empty, and the LEDs L1 , L3 , L5 and L7 are lit. The Shruthi is now waiting for SysEx data containing firmware update commands. This data is compiled into a MIDI file you can download on the Mutable Instruments website . During the firmware update procedure, the LEDs will light up one by one - the last LED being lit will also blink as the data is received. The update takes about 1 minute. If something goes wrong during the update procedure, the Shruthi is not bricked: it is possible to restart it with S6 held down, to retry the update procedure. If you want to use a dedicated SysEx transfer tool, we recommend Elektron's C6 tool available for both Windows and OS X, with the following timing settings:","title":"Updating the Shruthi firmware by MIDI"},{"location":"shruthi/manual/#midi-implementation","text":"A standard MIDI implementation chart can be viewed here .","title":"MIDI implementation"},{"location":"shruthi/manual/#received-messages","text":"","title":"Received messages"},{"location":"shruthi/manual/#note-onoff-0x80-and-0x90-aftertouch-0xa0-0xd0-and-pitch-bend-0xe0","text":"Note that the aftertouch is always global, and that its effect depends on the patching of the afttch modulation source in the modulation matrix (by default, none).","title":"Note on/off (0x80 and 0x90), aftertouch (0xa0, 0xd0) and pitch-bend (0xe0)"},{"location":"shruthi/manual/#program-change-0xc0","text":"This loads a patch from the internal or external memory. You can use the bank MSB CC (0x00) to load patches above 127. Note that the patch numbers shown in the load/save page are numbered from 1, but the MIDI patch numbers are numbered from 0, so the first patch is loaded with program change 0 even if it appears to be #1 on the load/save page.","title":"Program change (0xc0)"},{"location":"shruthi/manual/#control-changes-0xb0","text":"The Shruthi responds to the following system control change messages: All sound off (0x78) Reset all controllers (0x79) All notes off (0x7b) Omni on/off (0x7c, 0x7d) Hold pedal (0x40) Most synthesis parameters are accessible by non-standard control changes or NRPNs. Please refer to the Parameters accessible by MIDI section.","title":"Control changes (0xb0)"},{"location":"shruthi/manual/#clock-tick-0xf8","text":"This advances the system clock when the bpm setting is set to external or one of its multiples.","title":"Clock tick (0xf8)"},{"location":"shruthi/manual/#play-and-stop-0xfa-and-0xfc","text":"The Play message must be sent to activate the LFO, arpeggiator or sequencer when the bpm setting is set to external . The Stop message kills all notes and stops the sequencer or arpeggiator.","title":"Play and stop (0xfa and 0xfc)"},{"location":"shruthi/manual/#system-exclusive-messages-0xf0","text":"The Shruthi sends or receives System Exclusive messages for the following operations: Patch data dump Sequence data dump Wavetable dump Bulk memory dump Firmware update Post firmware-update reset Please refer to the SysEx data format section for more information.","title":"System exclusive messages (0xf0)."},{"location":"shruthi/manual/#synthesis-parameters-accessible-by-midi","text":"Most of the synthesis parameters are accessible by NRPN or CC. Editing a parameter by CC is fool-proof: send any value between 0 and 127, and it will mapped to the range of the parameter. For example, when adjusting the oscillator 1 range, the value 0 will be mapped to -24, and the value 127 will be mapped to +24. There is a bit of resolution loss for parameters with a large range (eg: tempo). This is not the case when using NRPN: in this case, the value in the data entry message will need to be exactly the requested value (no scaling occurs). Since most parameters have their range in a subset of 0--127, only a data entry LSB message has to be sent. When the maximum value of the parameter exceeds 127, or when it accepts negative values, a data entry MSB will have to be sent. Negative values are represented using 2's complement. For example, the MIDI messages to send to set the Oscillator 1 range to -12: 176 99 0 (NRPN MSB set to 0) 176 98 2 (NRPN LSB set to 2, from the table below: Oscillator 1 range) 176 6 1 (Data Entry MSB set to 1 -- value above 127 or negative) 176 38 116 (Data Entry LSB set to 116, because 116 - 128 = -12) The following table summarizes all the synthesis parameters, with their NRPN and CC numbers: Parameter number Range NRPN number CC number Oscillator 1 shape 0-34 0 20 Oscillator 1 parameter 0-127 1 21 Oscillator 1 range -24-24 2 22 Modulation operator 0-13 3 28 Oscillator 2 shape 0-34 4 24 Oscillator 2 parameter 0-127 5 25 Oscillator 2 range -24-24 6 26 Oscillator 2 detune 0-127 7 27 Oscillator balance 0-63 8 29 Sub oscillator volume 0-63 9 30 Noise volume 0-63 10 31 Sub oscillator/transient generator shape 0-10 11 23 Filter cutoff 0-127 12 14, 74 Filter resonance 0-63 13 15, 71 Envelope->cutoff modulation amount 0-63 14 102 Lfo->cutoff modulation amount 0-63 15 103 Envelope 1 attack 0-127 16 104 Envelope 1 decay 0-127 17 105 Envelope 1 sustain 0-127 18 106 Envelope 1 release 0-127 19 107 Envelope 2 attack 0-127 20 108, 73 Envelope 2 decay 0-127 21 109 Envelope 2 sustain 0-127 22 110 Envelope 2 release 0-127 23 111 LFO 1 waveform 0-20 24 112 LFO 1 rate 0-143 25 113 LFO 1 rise time 0-127 26 114 LFO 1 master/slave 0-3 27 115 LFO 2 waveform 0-20 28 116 LFO 2 rate 0-143 29 117 LFO 2 rise time 0-127 30 118 LFO 2 master/slave 0-3 31 119 Modulation n source 0-27 32 + 3 * (n - 1) Modulation n destination 0-26 33 + 3 * (n - 1) Modulation n amount -63-63 34 + 3 * (n - 1) Operator n source 1 0-31 94 + 3 * (n - 1) Operator n source 2 0-31 95 + 3 * (n - 1) Operator n operation 0-9 96 + 3 * (n - 1) Sequencer mode 0-2 100 75 Tempo 35-248 101 Groove template 0-5 102 76 Groove amount 0-127 103 77 Arpeggiator direction 0-3 104 78 Arpeggiator range 1-4 105 79 Arpeggiator pattern 0-15 106 80 Sequencer clock division 0-11 107 81 Octave transposition 0-11 82 Scale/raga 0-32 83 Portamento 0-63 84 Legato 0-1 68 The following control changes are specific to special filter boards: Parameter CC number SVF Filter cutoff 2 12 SVF Filter resonance 2 13 SVF Filter mode 1 85 SVF Filter mode 2 86 DSP FX param 1 12 DSP FX param 2 13 DSP FX mode 87 DSP FX program 88 Polivoks filter mode 89 Polivoks overdrive 90 Polivoks FM feedback 91 4PM filter mode 92 4PM resonance flavor 93 Delay time 12 Delay level 13 Delay feedback 94 Delay EQ flavor 95","title":"Synthesis parameters accessible by MIDI."},{"location":"shruthi/manual/#sysex-data-format","text":"SysEx messages all share the same format: 0xf0 (SysEx) 0x00 0x21 0x02 (Manufacturer ID for Mutable Instruments) 0x00 0x02 (Product ID for Shruthi) Command Argument Payload Checksum 0xf7 (End of SysEx) Command indicates what the receiver should do with the data in the payload block, and argument is a byte that might contain an additional piece of information about what to do with the data. Payload is a sequence of bytes in nibblized form. For example, the sequence 0x80 0x56 0x13 is transmitted as 0x08 0x00 0x05 0x06 0x01 0x03 . Checksum is equal to the nibblized-sum, modulo 256, of the bytes. In the example above, the checksum is equal to 0x80 + 0x56 + 0x13 = 0xe9 and is transmitted as 0x0e 0x09 .","title":"SysEx data format"},{"location":"shruthi/manual/#patch-transfer","text":"For patch transfer, command is equal to 0x01 and argument is null. The payload is a 92 bytes (184 nibbles) data structure described here . Upon reception, the Shruthi checks the patch data, and loads it in memory, in place of the currently edited patch. When receiving a patch by SysEx, the received patch is not written to persistent patch memory, it is only temporarily loaded in memory so you can edit it, and if you're happy with it, save it yourself. Since you don't risk overwriting stuff in memory when using SysEx patch transfer, use it and abuse it! For example, embed at the beginning of each of your tracks a dump of the patch, so your Shruthi will always recall the correct patch settings when you play the track back.","title":"Patch transfer"},{"location":"shruthi/manual/#sequence-transfer","text":"For sequence transfer, command is equal to 0x02 and argument is null. The payload is a 32 bytes (64 nibbles) data structure described here . Upon reception, the Shruthi loads the sequence data in memory, in place of the currently edited sequence.","title":"Sequence transfer"},{"location":"shruthi/manual/#waveform-transfer","text":"For waveform transfer, command is equal to 0x03 and argument is null. The payload is a sequence of 8x129 bytes (2064 nibbles) describing 8 single cycle waveforms, each of them being 129 samples long. The period must be 128 samples - the 129th sample must be equal to the first one and is used for interpolation wrap-around. The waveform is described with 8 bits unsigned samples.","title":"Waveform transfer"},{"location":"shruthi/manual/#storage-memory-dump","text":"The storage memory of the Shruthi is 2 + 8n kb large: 2kb of internal eeprom and 8n kb of external eeprom. It is partitioned as follows: Logical range Physical medium Physical range Content 0x0000 - 0x0010 Internal eeprom 0x0000 - 0x0010 System settings 0x0010 - 0x05d0 Internal eeprom 0x0010 - 0x05d0 16 internal patches 0x05d0 - 0x07d0 Internal eeprom 0x05d0 - 0x07d0 16 internal sequences 0x07d0 - 0x0800 Internal eeprom 0x07f0 - 0x0800 unused 0x0800 - 0x1f00 External eeprom 0x0000 - 0x1700 64 external patches 0x1f00 - 0x2700 External eeprom 0x1700 - 0x1f00 64 external sequences 0x2700 - 0x2800 External eeprom 0x1f00 - 0x2000 unused 0x2800 - 0x3f00 External eeprom 0x0000 - 0x1700 64 external patches 0x3f00 - 0x4700 External eeprom 0x1700 - 0x1f00 64 external sequences 0x4700 - 0x4800 External eeprom 0x1f00 - 0x2000 unused And so on as the external eeprom size increases... When doing a bulk backup, command is equal 0x40 , argument is a block index, from 0 to 127, and payload is a 128 bytes (256 nibbles) memory block. Upon reception, the Shruthi copies the received 128 bytes block to the logical address argument x 128. Thus, the first 16384 bytes of memory are addressed by this scheme. The next 16384 bytes of memory are transmitted by using the 0x41 command, and so on.","title":"Storage memory dump"},{"location":"shruthi/manual/#transfer-request","text":"For a patch transfer, command is equal to 0x11 and argument is null. The payload is empty. In other words, the full SysEx string is: 0xf0 0x00 0x21 0x02 0x00 0x02 0x11 0x00 0x00 0x00 0xf7 (the last pair of 0x00 being the checksum). Upon reception, the Shruthi dumps the current patch to the MIDI out. For a sequence transfer, command is equal to 0x12 .","title":"Transfer request"},{"location":"shruthi/manual/#write-request","text":"For a patch write request, command is equal to 0x21 , argument is null, and the payload is a 14-bits integer indicating a memory slot number (0-based indexing). Upon reception, the Shruthi writes the current patch to the memory location designated by the number. For a sequence write request, command is equal to 0x22 . For example, to write the current patch to slot 303 (302 in 0-based indexing, 0x012e in hexadecimal), the message is: 0xf0 (SysEx) 0x00 0x21 0x02 (Mutable Instruments) 0x00 0x02 (Shruthi) 0x21 (Patch write command) 0x00 (No argument) 0x00 0x01 0x02 0x0e (Patch number nibbles) 0x02 0x0f (Checkum) 0xf7 (End of SysEx)","title":"Write request"},{"location":"shruthi/manual/#firmware-update","text":"For firmware update, command is equal 0x7e , argument is null, and payload contains a 256 bytes (512 nibbles) block of code/data to be written to flash ROM. Upon reception of this message, the Shruthi writes the data block in flash ROM at the address pointer, and increments the address pointer by 256. The address pointer is initialized at 0x0000 At the end of the update procedure, a SysEx message with command = 0x7f, argument = 0x00 and no payload is sent. Upon reception, the Shruthi reboots into the newly updated firmware.","title":"Firmware update"},{"location":"shruthi/manual/#credits","text":"The following patches have been programmed by Florian Fourmy: Flo bass Follow! ElectroB The following patches have been programmed by stuartm: woblbass digobass pythagor noleleva ahhparis repliknt pwmstrng dahkand deetoon cowgirl voxelito woodtock The following patches have been programmed by Trackdriver: bitbass shorty VICdbass sawwy reason puddle blopbass borg fatbass wowwy pulsar stringe bigStrng simplBra pwmBrass arpSynth wasp rendezVo fullbell loFiFlut NESsie noisBell woice wavesurf lazrBird The remaining patches have been programmed by \u00c9milie Gillet","title":"Credits"},{"location":"shruthi/polivoks/","text":"Super baaad! This filter board is packed with anger and nastiness. It features the unique low-pass/band-pass filter circuit of the Polivoks with two additional distortion modes providing an even harsher sound. Using this filter board Please make sure that both the analog (CV1 to +5V) and digital (RX to +5V) ports of the filter and control boards are connected. Beware! Only the Shruthi-1 firmware v0.95 (or above) generates the digital signals required to control the mode selection and routing matrix. In addition, it is not possible to use simultaneously the Polivoks filter board and the Programmer since they will be both accessing at the same time the digital extension port. To activate the Polivoks filter board, select pvk in the system settings page. If you don't do so, it is likely that it will emit glitchy filtered sounds everytime you navigate through the pages. When pressing the S2 switch (Filter page) a second time, a new page is displayed allowing you to configure the filter routing. Cut Mod ove fm 100 bp off off The parameters are the following: cut (cutoff) : Cutoff frequency, conveniently repeated on this page. mod (mode) : Filter mode: lpf (low-pass) or bpf (band-pass). ove (overdrive) : VCA 10x overdrive for a loud, fuzzy distorted sound. fm (fm feedback) : FM feedback. The signal from the oscillators and external input are mixed together and fed back to filter cutoff control, creating a very rubbery FM sound, especially when the resonance is increased. CV1 can be used to switch the overdrive on/off ; and CV2 can be used to switch the FM feedback on/off. You can thus route, for example, the sequencer to CV1 to rhythmically toggle the distortion. Using the filter board without digital control If you want to use this filter board with manual control of the filter modes (for example from a Sidekick, or from a Shruthi=1 hooked to a programmer), just remove the CD4053, and look at the spot on the PCB with 3 pins marked 'LP BP'. Connect a SPDT switch there, with the center pin connected to the first pad, and the 2 other pins connected to the pads marked BP / LP. You now have a manual BP / LP selector. To activate the FM feedback, connect the two pads marked FM (a switch can be used to make this connection switchable). Schematics and PCB You can find the Eagle files for this board in the shruthi/hardware_design/pcb directory of the source code hosted on github . The schematics in PDF format are here . Bill of materials Bill of materials . An interesting mod consists in replacing R29 and R30 by 33k resistors. This will increase the amount of distortion of the filter but will shift its frequency range from 10-10kHz to 16-16kHz, for a brighter sound. Note that given the rudimentary exponential converter used in this circuit (and in the original Polivoks), there is no point trying to tune the self-oscillation of the filter to a musical scale; so no trimming here! A last note: this exponential converter is adjusted to cover a large chunk of the audio range with a LM4250 op-amp. If you want to substitute this part with a UA776, a few adjustments will be necessary in R15..R18. License This circuit and PCB layout is made available under a cc-by-sa-3.0 license. Releases v0.1 First prototype.","title":"Polivoks filter board"},{"location":"shruthi/polivoks/#using-this-filter-board","text":"Please make sure that both the analog (CV1 to +5V) and digital (RX to +5V) ports of the filter and control boards are connected. Beware! Only the Shruthi-1 firmware v0.95 (or above) generates the digital signals required to control the mode selection and routing matrix. In addition, it is not possible to use simultaneously the Polivoks filter board and the Programmer since they will be both accessing at the same time the digital extension port. To activate the Polivoks filter board, select pvk in the system settings page. If you don't do so, it is likely that it will emit glitchy filtered sounds everytime you navigate through the pages. When pressing the S2 switch (Filter page) a second time, a new page is displayed allowing you to configure the filter routing. Cut Mod ove fm 100 bp off off The parameters are the following: cut (cutoff) : Cutoff frequency, conveniently repeated on this page. mod (mode) : Filter mode: lpf (low-pass) or bpf (band-pass). ove (overdrive) : VCA 10x overdrive for a loud, fuzzy distorted sound. fm (fm feedback) : FM feedback. The signal from the oscillators and external input are mixed together and fed back to filter cutoff control, creating a very rubbery FM sound, especially when the resonance is increased. CV1 can be used to switch the overdrive on/off ; and CV2 can be used to switch the FM feedback on/off. You can thus route, for example, the sequencer to CV1 to rhythmically toggle the distortion.","title":"Using this filter board"},{"location":"shruthi/polivoks/#using-the-filter-board-without-digital-control","text":"If you want to use this filter board with manual control of the filter modes (for example from a Sidekick, or from a Shruthi=1 hooked to a programmer), just remove the CD4053, and look at the spot on the PCB with 3 pins marked 'LP BP'. Connect a SPDT switch there, with the center pin connected to the first pad, and the 2 other pins connected to the pads marked BP / LP. You now have a manual BP / LP selector. To activate the FM feedback, connect the two pads marked FM (a switch can be used to make this connection switchable).","title":"Using the filter board without digital control"},{"location":"shruthi/polivoks/#schematics-and-pcb","text":"You can find the Eagle files for this board in the shruthi/hardware_design/pcb directory of the source code hosted on github . The schematics in PDF format are here .","title":"Schematics and PCB"},{"location":"shruthi/polivoks/#bill-of-materials","text":"Bill of materials . An interesting mod consists in replacing R29 and R30 by 33k resistors. This will increase the amount of distortion of the filter but will shift its frequency range from 10-10kHz to 16-16kHz, for a brighter sound. Note that given the rudimentary exponential converter used in this circuit (and in the original Polivoks), there is no point trying to tune the self-oscillation of the filter to a musical scale; so no trimming here! A last note: this exponential converter is adjusted to cover a large chunk of the audio range with a LM4250 op-amp. If you want to substitute this part with a UA776, a few adjustments will be necessary in R15..R18.","title":"Bill of materials"},{"location":"shruthi/polivoks/#license","text":"This circuit and PCB layout is made available under a cc-by-sa-3.0 license.","title":"License"},{"location":"shruthi/polivoks/#releases","text":"","title":"Releases"},{"location":"shruthi/polivoks/#v01","text":"First prototype.","title":"v0.1"},{"location":"shruthi/smr4/","text":"The SMR-4 board comprises a 4-pole VCF (a jumper can be moved to provide a 2-pole output) with voltage-controlled resonance, a linear VCA, and a +/- 5V regulated power supply powering all those (and the digital section upstairs). Schematics and PCB You can find the Eagle files for this board in the shruthi/hardware_design/pcb directory of the source code hosted on github . The schematics in PDF format are here . How does it work? You can read an analysis here . Bill of materials Bill of materials . Some notes: These small deviations are not critical. Polystyrene caps might give a better sound. Filter tuning is improved by using matched, thermocoupled transistor pairs. Assembly instructions Getting ready For reference, during the assembly, you can use the following picture of an assembled board (it is provided with the kit): Mondrian, oh Mondrian ! Some equipment you'll need: Soldering iron + solder (nothing fancy, a 15 or 20W will do). Cutters. We assume you know soldering. If you don't, look first at this tutorial . We highly recommend you to purchase a simple kit from adafruit or sparkfun to practice on something that you won't regret breaking. A last word: be patient! we know you're just a couple of hours away from playing your Shruthi-1, but if you do something stupid, those hours will turn into days or weeks. DISCLAIMER: We are not responsible for anything wrong (including electric shocks, malfunctions, fires, accidents involving a soldering iron) that might happen during the assembly of the kit. Everything you do while assembling the kit is at your own risks. Step 1: power supply, part 1 Let's start with the power supply section (the \"column\" of parts on the right of the board). Building the power supply first will allow you to test it early and check that you won't be damaging other parts because of incorrect voltages. First, let's populate the board with: the fourteen 100nF ceramic caps (labelled 104). the 10pF ceramic cap (labelled 100). Ceramic capacitors are not polarized. Step 2: power supply, part 2 Now, add: The 3 100uF electrolytic caps (C2, C9, C19). The 2 220uF electrolytic caps (C23, C29). 470uF can also be used there. The (optional) 10uF tantalum cap (C31). The protection diode D1 All of them are polarized . The white stripe on the side of the electrolytic capacitors indicate which of their lead is negative. The negative lead is the shortest one. The long lead must go in the hole marked with a plus sign. Here is another view of the capacitors: C31 is optional. Adding C31 in parallel to C2 lowers the ESR of the pair, while having a moderate impact on the capacitance. C31 is polarized . The positive lead is marked with a + and a band (see this picture ) Finally, D1 is polarized , the white ring around it must match what is printed on the PCB. Step 3: power supply, part 3 If you don't want to use a main on/off switch, add a piece of wire (I use the leads of parts I have just cut) to make a permanent connection between the pads labelled SW. Otherwise, solder two pieces of wire to the rocker switch. The switch has no polarity. You can now solder the voltage regulators (LM7905 and LM7805). They are polarized . The metallic plate with the hole should be on the same side as the bold line of the part drawing on the PCB. The kit might include another part compatible with the LM7805, labelled KA7805 or TS7805. Now check one last time the orientation of everything before continuing! Finally, add the DC power socket. Step 4: power supply, part 4 Insert IC1 (LT1054). Be careful with the orientation , this IC is not oriented like most of the other ICs on the board! The LT1054 does not have a notch, but a round mark to indicate its first pin. This round mark must be near the IC1 marking on the PCB. The power supply is now ready to be tested. Connect a DC supply (unregulated, any voltage between 7.5V and 12V, center pin positive) and check the voltages at the following points of the PCB: Put the COM probe of your meter on the blue point on the far left (near the connector labelled GND). Test, with the other probe, that all the blue points are at 0V, all the red points at 5V, and all the green points at -5V. A difference of 0.1V is acceptable (I often get -5.1 and 4.9V, this is OK). If there's something wrong, check the regulators and capacitors polarities. Step 5: Resistors and diodes Add: 2x 1N4148 diodes. They are polarized , the black ring on the diode should be in the direction of the power supply. 1x 68R resistor (blue, grey, black, gold) 7x 220R resistors (red, red, black, black). Note that previous of the board (v0.5) uses only 6 of them. Step 6: Resistors again Add: 5x 1k resistors (brown, black, black, brown) 1x 2.0k resistor (red, black, black, brown) 1x 2.2k resistor (red, red, black, brown) 1x 5.6k resistor (green, blue, black, brown) 3x 6.8k resistor (blue, grey, black, brown). Step 7: Resistors, the trilogy Add 15 10k resistors (brown, black, black, red). The previous version of the board (v0.5) has 14 of them. Step 8: Resistors, the prequel If you have a v0.7 of the board, add the following resistors: 1x 30k resistor (orange, black, black, red) 3x 33k resistors (orange, orange, black, red) 1x 56k resistor (green, blue, black, red) 1x 68k resistor (blue, grey, black, red) 1x 100k resistor (brown, black, black, orange) 1x 220k resistor (red, red, black, orange) 1x 330k resistor (orange, orange, black, orange) If you have a v0.8 board, some resistor values have changed (68k to 33k ; 220k to 330k): 1x 30k resistor (orange, black, black, red) 4x 33k resistors (orange, orange, black, red) 1x 56k resistor (green, blue, black, red) 1x 100k resistor (brown, black, black, orange) 2x 330k resistor (orange, orange, black, orange) Step 9: Sockets Add 3x DIP14 IC sockets and 3x DIP16 IC sockets. Step 10: Capacitors Next, the capacitors. For these ones, polarity/orientation does not matter : 2x 100pF ceramic caps (labelled 101). 3x 4.7uF NP electrolytic caps. Audio is going through them, so their quality is important! 3x 33nF film caps. They smooth the control signals from the MCU. There's a trade-off between envelope response time and \"purity\" of the audio output - these values can be reduced a bit for more aggressive envelopes. 4x 1nF film caps near IC8. They are responsible for the actual filtering. You might want to put there something a little fancier (polystyrene), which might not have the same size as the standard 5.08mm lead spacing. Some 1nF poly/film cap also come in a 2.54mm spacing package. That's why there are 3 holes there... Ignore the middle one when using a capacitor in a 5.08mm spaced package, and ignore the outer hole when using a capacitor in a 2.54mm spaced package (such as those provided with the kit). Step 11: Transistors Transistors are polarized . Make sure that the \"flat\" and \"round\" sides of the transistors follow what is printed on the PCB. Be careful and don't mix up 2N3906 with 2N3904 ! Step 12: Connectors and trimpots Add the connectors and the trimpots: 1x 20k trimpot (W203) labelled lowwwww. 3x 5k trimpots (W502) at the positions labelled reso, DC and V/oct. 8x1 female connector for stacking the boards. 3x1 male connector for pole selection. The two audio connectors Don't forget putting a jumper on the poles selector! (JP3). 4 is the default, standard, reasonable value. Also, make sure that the conducting piece of the jumper touches the two pins of the 3x1 connector... If you intend to house your Shruthi in the standard acrylic case, you don't need to solder the volume pots - instead, you'll have to \"bridge\" two of the pots' solder pads as printed on the PCB. Step 13: IC time! You can now insert the ICs! (3x TL074 and 3x LM13700). All are looking \"left\" instead of IC7. IC7 looks in the opposite direction . The board should look like this: Pause: Ain't I missing something? You might have noticed 4 locations where one could solder a part with a 2.54mm pitch -- below IC4, and near the Resonance trimpot. These pads can be used to solder parts (Zeners, diodes, LEDs...) to tame/shape the sine wave the filter will emit when it self-oscillates. Step 14: Tuning To operate correctly, the filter needs to be tuned. The following symptoms indicate that the filter is not tuned optimally: Loud \"plop\" at note starts No self-oscillation when resonance is set to 63 Heavily distorted resonance at self-oscillation Dull sound even when cutoff = 127 Weird sounds heard when resonance = 63 Board connection First, you'll need to connect the two boards without stacking them. Here's how my setup looks like. Cables for doing that are now provided with the kit. \\ Some general notes regarding trimming: Trimmers are 22 turns. Once you've reach one of the extremities of their range, you'll still be able to turn the screw but it won't have any effect. You'll hear a small click or notice a slight change in torque required to turn the screw. Don't get crazy over trimming. There's no setting that will magically make everything sound like the original Minimoog of your dreams. Resonance setting The first step consists in setting up the feedback gain so that the filter plays a nice sine wave when resonance is set to a high value. Set the 2 oscillators to none , the resonance to 63 and cutoff to 50. Disable the envelope->filter modulation. The second line of the filter page on the LCD should display @ 50 63 0 0@ Press and hold the E4 key on a MIDI keyboard, or send this note from your sequencer (MIDI note #64). Turn the Reso trimmer counterclockwise until you can't hear any sound. Then turn it clockwise until you start hearing the self-oscillation. If you continue turning, the self-oscillation will get louder and eventually distort. Move back to the point where it starts appearing. The equilibrum point is the one for which the resonance doesn't take too long to come when a note is played, but is not heavily distorted. V/Oct response tuning Now we'll tune the V/oct trimmer, which allows the filter cutoff (and thus, the sine wave emitted by the filter at auto-oscillation) to follow musical intervals played on the keyboard. With cutoff set to 50 and resonance to 63, try playing C1, C2, C3, C4: the four notes should be one octave apart from each other. If this is not the case, adjust V/oct to achieve the right tuning. This process is a bit different from tuning a guitar: it doesn't matter whether pressing C1 will play a C1 - what matters is whether playing C1, C2 will play two sounds one octave apart. If they sound more like 11 semitones apart, rotate V/Oct clockwise. If they sound more like 13 semitones apart, rotate V/Oct counterclockwise. DC offset tuning This trimpot compensates the DC offset at the output of the filter, before it is sent to the VCA. If a signal with a DC component goes through a VCA, the envelope signal will \"bleed\" into the VCA output, resulting in clicks or pops with fast envelopes. With the oscillators still set to none, set the resonance to 0 and the cutoff to 0. Play a note on the keyboard, you'll just hear a short \"plop\" and then silence. Adjust the DC trimpot until you find a position that minimizes the loudness of the \"plop\". Note that the \"sweet spot\" for this setting is somewhere in the middle (11 turns away from the extremities). Cutoff range tuning This setting modifies the maximum cutoff frequency of the filter. When resonance is set to the maximum value (63), the oscillations can get instable for high settings of the cutoff value and high notes played on the keyboard (above E4). When this occurs, the auto-oscillation sine wave is at a very high frequency, but some of its undertones can be heard. You might choose to ignore this glitch and use the full range of the filter, or trim the Lowww trimpot to lower the frequency response of the filter and avoid hitting the instability region. Set the resonance to 63. Press and hold E4 on the MIDI keyboard (note #64). Set the cutoff to a value of 80. Adjust the Lowww trimpot to move up or down the pitch of the sound. To check how this affects the filter, sweep the cutoff until you reach high values above 112. If you change the Lowww so that a high pitched sound is heard for cutoff=80, the filter cutoff frequency will reach higher frequencies, with a greater risk of hitting the instability zone when resonance = 63. If you turn Lowww in the other direction, in such a way that cutoff=80 yields a lower pitched sound, the range of the cutoff will cover lower frequencies, resulting in a more damped sound when cutoff = 127, but you won't risk entering the instability zone. Kudos Todd Bailey for tons of board layout tips! Aaron D. Lanterman for his awesome class material. Releases v0.6, v0.7 Removed middle spacers holes. Self-oscillation in 2-poles mode. Increased hole sizes for audio and DC connectors. Added pads for external CV sources on cutoff. v0.5 Original release.","title":"SMR4 filter board"},{"location":"shruthi/smr4/#schematics-and-pcb","text":"You can find the Eagle files for this board in the shruthi/hardware_design/pcb directory of the source code hosted on github . The schematics in PDF format are here . How does it work? You can read an analysis here .","title":"Schematics and PCB"},{"location":"shruthi/smr4/#bill-of-materials","text":"Bill of materials . Some notes: These small deviations are not critical. Polystyrene caps might give a better sound. Filter tuning is improved by using matched, thermocoupled transistor pairs.","title":"Bill of materials"},{"location":"shruthi/smr4/#assembly-instructions","text":"","title":"Assembly instructions"},{"location":"shruthi/smr4/#getting-ready","text":"For reference, during the assembly, you can use the following picture of an assembled board (it is provided with the kit): Mondrian, oh Mondrian ! Some equipment you'll need: Soldering iron + solder (nothing fancy, a 15 or 20W will do). Cutters. We assume you know soldering. If you don't, look first at this tutorial . We highly recommend you to purchase a simple kit from adafruit or sparkfun to practice on something that you won't regret breaking. A last word: be patient! we know you're just a couple of hours away from playing your Shruthi-1, but if you do something stupid, those hours will turn into days or weeks. DISCLAIMER: We are not responsible for anything wrong (including electric shocks, malfunctions, fires, accidents involving a soldering iron) that might happen during the assembly of the kit. Everything you do while assembling the kit is at your own risks.","title":"Getting ready"},{"location":"shruthi/smr4/#step-1-power-supply-part-1","text":"Let's start with the power supply section (the \"column\" of parts on the right of the board). Building the power supply first will allow you to test it early and check that you won't be damaging other parts because of incorrect voltages. First, let's populate the board with: the fourteen 100nF ceramic caps (labelled 104). the 10pF ceramic cap (labelled 100). Ceramic capacitors are not polarized.","title":"Step 1: power supply, part 1"},{"location":"shruthi/smr4/#step-2-power-supply-part-2","text":"Now, add: The 3 100uF electrolytic caps (C2, C9, C19). The 2 220uF electrolytic caps (C23, C29). 470uF can also be used there. The (optional) 10uF tantalum cap (C31). The protection diode D1 All of them are polarized . The white stripe on the side of the electrolytic capacitors indicate which of their lead is negative. The negative lead is the shortest one. The long lead must go in the hole marked with a plus sign. Here is another view of the capacitors: C31 is optional. Adding C31 in parallel to C2 lowers the ESR of the pair, while having a moderate impact on the capacitance. C31 is polarized . The positive lead is marked with a + and a band (see this picture ) Finally, D1 is polarized , the white ring around it must match what is printed on the PCB.","title":"Step 2: power supply, part 2"},{"location":"shruthi/smr4/#step-3-power-supply-part-3","text":"If you don't want to use a main on/off switch, add a piece of wire (I use the leads of parts I have just cut) to make a permanent connection between the pads labelled SW. Otherwise, solder two pieces of wire to the rocker switch. The switch has no polarity. You can now solder the voltage regulators (LM7905 and LM7805). They are polarized . The metallic plate with the hole should be on the same side as the bold line of the part drawing on the PCB. The kit might include another part compatible with the LM7805, labelled KA7805 or TS7805. Now check one last time the orientation of everything before continuing! Finally, add the DC power socket.","title":"Step 3: power supply, part 3"},{"location":"shruthi/smr4/#step-4-power-supply-part-4","text":"Insert IC1 (LT1054). Be careful with the orientation , this IC is not oriented like most of the other ICs on the board! The LT1054 does not have a notch, but a round mark to indicate its first pin. This round mark must be near the IC1 marking on the PCB. The power supply is now ready to be tested. Connect a DC supply (unregulated, any voltage between 7.5V and 12V, center pin positive) and check the voltages at the following points of the PCB: Put the COM probe of your meter on the blue point on the far left (near the connector labelled GND). Test, with the other probe, that all the blue points are at 0V, all the red points at 5V, and all the green points at -5V. A difference of 0.1V is acceptable (I often get -5.1 and 4.9V, this is OK). If there's something wrong, check the regulators and capacitors polarities.","title":"Step 4: power supply, part 4"},{"location":"shruthi/smr4/#step-5-resistors-and-diodes","text":"Add: 2x 1N4148 diodes. They are polarized , the black ring on the diode should be in the direction of the power supply. 1x 68R resistor (blue, grey, black, gold) 7x 220R resistors (red, red, black, black). Note that previous of the board (v0.5) uses only 6 of them.","title":"Step 5: Resistors and diodes"},{"location":"shruthi/smr4/#step-6-resistors-again","text":"Add: 5x 1k resistors (brown, black, black, brown) 1x 2.0k resistor (red, black, black, brown) 1x 2.2k resistor (red, red, black, brown) 1x 5.6k resistor (green, blue, black, brown) 3x 6.8k resistor (blue, grey, black, brown).","title":"Step 6: Resistors again"},{"location":"shruthi/smr4/#step-7-resistors-the-trilogy","text":"Add 15 10k resistors (brown, black, black, red). The previous version of the board (v0.5) has 14 of them.","title":"Step 7: Resistors, the trilogy"},{"location":"shruthi/smr4/#step-8-resistors-the-prequel","text":"If you have a v0.7 of the board, add the following resistors: 1x 30k resistor (orange, black, black, red) 3x 33k resistors (orange, orange, black, red) 1x 56k resistor (green, blue, black, red) 1x 68k resistor (blue, grey, black, red) 1x 100k resistor (brown, black, black, orange) 1x 220k resistor (red, red, black, orange) 1x 330k resistor (orange, orange, black, orange) If you have a v0.8 board, some resistor values have changed (68k to 33k ; 220k to 330k): 1x 30k resistor (orange, black, black, red) 4x 33k resistors (orange, orange, black, red) 1x 56k resistor (green, blue, black, red) 1x 100k resistor (brown, black, black, orange) 2x 330k resistor (orange, orange, black, orange)","title":"Step 8: Resistors, the prequel"},{"location":"shruthi/smr4/#step-9-sockets","text":"Add 3x DIP14 IC sockets and 3x DIP16 IC sockets.","title":"Step 9: Sockets"},{"location":"shruthi/smr4/#step-10-capacitors","text":"Next, the capacitors. For these ones, polarity/orientation does not matter : 2x 100pF ceramic caps (labelled 101). 3x 4.7uF NP electrolytic caps. Audio is going through them, so their quality is important! 3x 33nF film caps. They smooth the control signals from the MCU. There's a trade-off between envelope response time and \"purity\" of the audio output - these values can be reduced a bit for more aggressive envelopes. 4x 1nF film caps near IC8. They are responsible for the actual filtering. You might want to put there something a little fancier (polystyrene), which might not have the same size as the standard 5.08mm lead spacing. Some 1nF poly/film cap also come in a 2.54mm spacing package. That's why there are 3 holes there... Ignore the middle one when using a capacitor in a 5.08mm spaced package, and ignore the outer hole when using a capacitor in a 2.54mm spaced package (such as those provided with the kit).","title":"Step 10: Capacitors"},{"location":"shruthi/smr4/#step-11-transistors","text":"Transistors are polarized . Make sure that the \"flat\" and \"round\" sides of the transistors follow what is printed on the PCB. Be careful and don't mix up 2N3906 with 2N3904 !","title":"Step 11: Transistors"},{"location":"shruthi/smr4/#step-12-connectors-and-trimpots","text":"Add the connectors and the trimpots: 1x 20k trimpot (W203) labelled lowwwww. 3x 5k trimpots (W502) at the positions labelled reso, DC and V/oct. 8x1 female connector for stacking the boards. 3x1 male connector for pole selection. The two audio connectors Don't forget putting a jumper on the poles selector! (JP3). 4 is the default, standard, reasonable value. Also, make sure that the conducting piece of the jumper touches the two pins of the 3x1 connector... If you intend to house your Shruthi in the standard acrylic case, you don't need to solder the volume pots - instead, you'll have to \"bridge\" two of the pots' solder pads as printed on the PCB.","title":"Step 12: Connectors and trimpots"},{"location":"shruthi/smr4/#step-13-ic-time","text":"You can now insert the ICs! (3x TL074 and 3x LM13700). All are looking \"left\" instead of IC7. IC7 looks in the opposite direction . The board should look like this:","title":"Step 13: IC time!"},{"location":"shruthi/smr4/#pause-aint-i-missing-something","text":"You might have noticed 4 locations where one could solder a part with a 2.54mm pitch -- below IC4, and near the Resonance trimpot. These pads can be used to solder parts (Zeners, diodes, LEDs...) to tame/shape the sine wave the filter will emit when it self-oscillates.","title":"Pause: Ain't I missing something?"},{"location":"shruthi/smr4/#step-14-tuning","text":"To operate correctly, the filter needs to be tuned. The following symptoms indicate that the filter is not tuned optimally: Loud \"plop\" at note starts No self-oscillation when resonance is set to 63 Heavily distorted resonance at self-oscillation Dull sound even when cutoff = 127 Weird sounds heard when resonance = 63","title":"Step 14: Tuning"},{"location":"shruthi/smr4/#board-connection","text":"First, you'll need to connect the two boards without stacking them. Here's how my setup looks like. Cables for doing that are now provided with the kit. \\ Some general notes regarding trimming: Trimmers are 22 turns. Once you've reach one of the extremities of their range, you'll still be able to turn the screw but it won't have any effect. You'll hear a small click or notice a slight change in torque required to turn the screw. Don't get crazy over trimming. There's no setting that will magically make everything sound like the original Minimoog of your dreams.","title":"Board connection"},{"location":"shruthi/smr4/#resonance-setting","text":"The first step consists in setting up the feedback gain so that the filter plays a nice sine wave when resonance is set to a high value. Set the 2 oscillators to none , the resonance to 63 and cutoff to 50. Disable the envelope->filter modulation. The second line of the filter page on the LCD should display @ 50 63 0 0@ Press and hold the E4 key on a MIDI keyboard, or send this note from your sequencer (MIDI note #64). Turn the Reso trimmer counterclockwise until you can't hear any sound. Then turn it clockwise until you start hearing the self-oscillation. If you continue turning, the self-oscillation will get louder and eventually distort. Move back to the point where it starts appearing. The equilibrum point is the one for which the resonance doesn't take too long to come when a note is played, but is not heavily distorted.","title":"Resonance setting"},{"location":"shruthi/smr4/#voct-response-tuning","text":"Now we'll tune the V/oct trimmer, which allows the filter cutoff (and thus, the sine wave emitted by the filter at auto-oscillation) to follow musical intervals played on the keyboard. With cutoff set to 50 and resonance to 63, try playing C1, C2, C3, C4: the four notes should be one octave apart from each other. If this is not the case, adjust V/oct to achieve the right tuning. This process is a bit different from tuning a guitar: it doesn't matter whether pressing C1 will play a C1 - what matters is whether playing C1, C2 will play two sounds one octave apart. If they sound more like 11 semitones apart, rotate V/Oct clockwise. If they sound more like 13 semitones apart, rotate V/Oct counterclockwise.","title":"V/Oct response tuning"},{"location":"shruthi/smr4/#dc-offset-tuning","text":"This trimpot compensates the DC offset at the output of the filter, before it is sent to the VCA. If a signal with a DC component goes through a VCA, the envelope signal will \"bleed\" into the VCA output, resulting in clicks or pops with fast envelopes. With the oscillators still set to none, set the resonance to 0 and the cutoff to 0. Play a note on the keyboard, you'll just hear a short \"plop\" and then silence. Adjust the DC trimpot until you find a position that minimizes the loudness of the \"plop\". Note that the \"sweet spot\" for this setting is somewhere in the middle (11 turns away from the extremities).","title":"DC offset tuning"},{"location":"shruthi/smr4/#cutoff-range-tuning","text":"This setting modifies the maximum cutoff frequency of the filter. When resonance is set to the maximum value (63), the oscillations can get instable for high settings of the cutoff value and high notes played on the keyboard (above E4). When this occurs, the auto-oscillation sine wave is at a very high frequency, but some of its undertones can be heard. You might choose to ignore this glitch and use the full range of the filter, or trim the Lowww trimpot to lower the frequency response of the filter and avoid hitting the instability region. Set the resonance to 63. Press and hold E4 on the MIDI keyboard (note #64). Set the cutoff to a value of 80. Adjust the Lowww trimpot to move up or down the pitch of the sound. To check how this affects the filter, sweep the cutoff until you reach high values above 112. If you change the Lowww so that a high pitched sound is heard for cutoff=80, the filter cutoff frequency will reach higher frequencies, with a greater risk of hitting the instability zone when resonance = 63. If you turn Lowww in the other direction, in such a way that cutoff=80 yields a lower pitched sound, the range of the cutoff will cover lower frequencies, resulting in a more damped sound when cutoff = 127, but you won't risk entering the instability zone.","title":"Cutoff range tuning"},{"location":"shruthi/smr4/#kudos","text":"Todd Bailey for tons of board layout tips! Aaron D. Lanterman for his awesome class material.","title":"Kudos"},{"location":"shruthi/smr4/#releases","text":"","title":"Releases"},{"location":"shruthi/smr4/#v06-v07","text":"Removed middle spacers holes. Self-oscillation in 2-poles mode. Increased hole sizes for audio and DC connectors. Added pads for external CV sources on cutoff.","title":"v0.6, v0.7"},{"location":"shruthi/smr4/#v05","text":"Original release.","title":"v0.5"},{"location":"shruthi/smr4mkii/","text":"The SMR-4mkII is a revision of the classic 4-pole VCF / VCA board shipped with the Shruthi-1 kits. It keeps the \"solid\" sound of the original version -- actually the core filter circuit is unchanged -- but its part count has been reduced thanks to a few optimizations in the circuit. Another of its distinctive features, compared to its predecessor, is the reduced number of trimmer adjustments (from 4 to 1) that need to be done. You can find the Eagle files for this board in the shruthi/hardware_design/pcb directory of the source code hosted on github . The schematics in PDF format are here . How does it work? You can read an analysis here . Bill of materials Bill of materials. Note that the resistors from Digikey have minor differences in value (E48 vs E24 series). These differences are not critical. Assembly instructions Getting ready For reference, during the assembly, you can use the following picture of an assembled board (it is provided with the kit): Mondrian, oh Mondrian ! Some equipment you'll need: Soldering iron + solder (nothing fancy, a 15 or 20W will do). Cutters. We assume you know soldering. If you don't, look first at this tutorial . We highly recommend you to purchase a simple kit from adafruit or sparkfun to practice on something that you won't regret breaking. A last word: be patient! we know you're just a couple of hours away from playing your Shruthi-1, but if you do something stupid, those hours will turn into days or weeks. DISCLAIMER: We are not responsible for anything wrong (including electric shocks, malfunctions, fires, accidents involving a soldering iron) that might happen during the assembly of the kit. Everything you do while assembling the kit is at your own risks. Step 1: power supply, part 1 Let's start with the power supply section. Building the power supply first will allow you to test it early and check that you will not be damaging other parts because of incorrect voltages. First, let's populate the board with: the sixteen 100nF ceramic caps (labelled 104). Most of those are \"bypass capacitors\" acting as local charge reservoirs near each IC. the 10pF ceramic cap (labelled 100). Ceramic capacitors are not polarized. Step 2: power supply, part 2 Add: The protection diode D1. D1 is polarized , the white ring around it must match the symbol silkscreened on the PCB. A DIP8 socket. Step 3: power supply, part 3 Now, add: The 3 100uF electrolytic caps (C2, C11, C12). Note that the caps that come with your kit might have a different color or voltage. What matters is the value printed on it. If it is labelled 100uF, it's good! The (optional) 10uF tantalum cap (C1). The 2 220uF electrolytic caps (C20, C30). 470uF or higher can also be used there ; but the higher the capacity, the bulkier the caps get. All of them are polarized . The white stripe on the side of the electrolytic capacitors indicates which of their lead is negative. The negative lead is the shortest one. The long lead must go in the hole marked with a plus sign. Here is another view of the capacitors: C1 is optional -- it is shipped with the kit, but if you are building this yourself and cannot source cheap Tantalum caps, you can ignore it (it would be required if the power supply had to deliver more than the <20mA required by the SMR4 mkII circuit). C1 is polarized . The positive lead is marked with a + and a band (see this picture ) Step 4: power supply, part 4 You can now solder the voltage regulators (LM7905 and LM7805 ; though they can be labelled MC7805, KA7905 etc depending on which manufacturer they come from). They are polarized . The metallic plate with the hole should be on the same side as the bold line of the part drawing on the PCB. Solder the DC connector. The best way to solder it is to heat the exposed copper \"ring\" on the PCB, and then to let the solder melt around it. It will form a \"lake\" of solder around the leg of the connector. Solder one leg, adjust the connector into the right position, then solder the other legs. Finally, if you don't want to use a main on/off switch, add a piece of wire (I use the leads of parts I have just cut) to make a permanent connection between the pads labelled SW. Otherwise, solder two pieces of wire to a rocker switch. The switch has no polarity. Step 5: power supply, testing You can now insert IC1 (LT1054). Be careful with the orientation , this IC is oriented unlike the other ICs on the board! The LT1054 does not have a notch, but a round mark to indicate its first pin. This round mark must be near the IC1 marking on the PCB. The power supply is now ready to be tested. Connect a DC supply (unregulated, any voltage between 7.5V and 9V, center pin positive) and check the voltages at the following points of the PCB: Put the COM probe of your meter on the blue point on the far left (near the connector labelled GND). Test, with the other probe, that all the red points are at 5V, and all the green points at -5V. A difference of 0.1V is acceptable (I often get -5.1 and 4.9V, this is OK). \\ If there's something wrong, check the regulators and capacitors polarities. Step 6: Resistors Add: 1x 68R resistor (blue, grey, black, gold) 6x 220R resistors (red, red, black, black). Step 7: Resistors again Add: 2x 1k resistors (brown, black, black, brown) 3x 2.2k resistor (red, red, black, brown) Step 8: Resistors, the trilogy Add 12x 10k resistors (brown, black, black, red). Be careful , there are spots for 18k resistors and the 0 and 8 look a bit similar! Step 9: Resistors, the prequel Add: 3x 18k resistor (brown, grey, black, red) 1x 33k resistors (orange, orange, black, red) 1x 47k resistor (yellow, purple, black, red) 1x 100k resistor (brown, black, black, orange) 1x 150k resistor (brown, green, black, orange) 1x 330k resistor (orange, orange, black, orange) You will be left with a 1M resistor. If you plan to use the SMR4 mkII board with a Shruthi-1 control board, solder it. See more about this in the hacks and mods section. Step 10: Small caps Add: 3x 100pF ceramic caps (labelled 101). 2x 220nF ceramic caps (labelled 224). These caps are not polarized. Step 11: Sockets Add 1x DIP8, 2x DIP14 and 3x DIP16 IC sockets. Step 12: Taller parts Add 4x 1nF film caps near IC7. Film capacitors can come in two sizes: 2.54mm (small) and 5.08mm (larger), that's why the PCB footprint has 3 holes while the part has only 2! The photo shows how to insert the 2.54mm caps - the outer hole is left empty. When a 5.08mm cap is used, the middle hole is left empty. Add 4x 2N3906 transistors. Transistors are polarized . Make sure that the \"flat\" and \"round\" sides of the transistors follow what is printed on the PCB. Add 3x 4.7uF NP electrolytic caps. They are not polarized, so please ignore the +/- marking on the PCB. Step 13: Connectors and trimpot Add the connectors and the trimpot: 1x 20k trimpot (labelled 203). 8x1 female connector for stacking the boards. 3x1 male connector for the Poles selector. The two audio connectors. Don't forget putting a jumper on the poles selector! 4 is the recommended position (After all it's not an SMR2!). If you intend to house your Shruthi in the standard acrylic case, you will not have much room to add gain pots -- so instead, you'll have to \"bridge\" two of the pots' solder pads as printed on the PCB. Step 14: IC time! You can now insert the ICs! (1x TL072, 2x TL074 and 3x LM13700). All are looking \"left\". The board should look like this: You have finished building the board; You can already play with it, but it is highly recommended to continue and tune the filter. Step 15: V/Oct Tuning The tuning procedure consists in making sure that the cutoff frequency of the filter follows a musical scale: increasing the cutoff setting on the Shruthi by 12 (or playing a note 1 octave = 12 semitones higher) should double the cutoff frequency. First, you'll need to assemble the filter and control boards. Maybe you can start screwing them together onto the bottom plate of the enclosure or you can just temporarily sandwich a female 1x8 connector between the boards just for testing. Dial the following settings on the Shruthi-1: Oscillator 1 shape: none Oscillator 2 shape: none Filter cutoff: 64 Filter resonance: 63 (maximum value) Filter envelope and LFO modulations: 0 Play on the keyboard. You should hear a pure tone (sine wave), which does not come from the Shruthi-1 oscillators but from the filter self-oscillating. Adjust the V/Oct trimmer so that the intervals are respected - that is to say, when you play C3 then C4, you should hear two notes, maybe not C3s and C4s, but they must be one octave apart. If you do not have a good sense of pitch, you can try a software tuner like Tuna Pitch on OS X. If the filter is correctly tuned, you should be able to play the filter \"self oscillation tone\" across roughly 4 octaves with correct tuning. Step 16: Congratulations! You have finished building and tuning your SMR4 mkII filter board. Have fun with it... and come back here in a few weeks if you want to push its limits! Mods and hacks VCA bleed fix for use with the Shruthi-1 digital control board The CVs generated by the Shruthi-1 control board cannot swing as low as ground -- there is always a tiny bit of residual voltage. This will prevent the VCA to be completely silenced. Most of the time this is not a problem, because the Shruthi-1's digital oscillators switch themselves off when the VCA envelope reaches 0. But this slight bleed can be heard when resonance is set to its maximum value. To prevent this bleed, solder the optional 1M resistor. This will shift the VCA CV down by a few mV. Pole selector switch You can connect those three points to the 3 terminals of a SPDT switch. This will allow you to switch between the 2 and 4 pole modes with the switch. Additional filter modes Solder a 10k resistor vertically below the pad labelled Mode on the PCB. Connecting the point labelled Mode to the points labelled BP1 and BP3 will give different flavors of band-pass filtering. It is recommended to use a SP3T switch (pole to Mode , throw1 to BP1 , throw2 to BP3 , throw3 left floating) to easily control this extra connection. This graph shows the 6 different responses that can be obtained by switching the pole selector to either positions (LP2 or LP4) and by patching BP1 or BP3 to the \"Mode\" pad (or leaving it unpatched in the first row). Extra CV inputs for filter cutoff control Each row is for an extra CV input controlling the filter cutoff. A resistor should be mounted vertically across the first two pads (try 15k to 68k... depending on your CV source!), and the last pad in the row is the CV input itself. Interesting FM effects can be obtained by feeding audio signals at these points, when the filter resonance is high! Troubleshooting The left/right channel is missing The Shruthi is a mono synth. The jack near the \"OUT\" text is a monophonic output, which needs to be hooked to a sound interface/mixer. The other jack is an input. I have connected an external audio source but I can't hear it. The SMR-4 board has a VCA, which needs to be opened to let the filtered audio signal go out. You need to either: Hold a note (for example, hold S1 to trigger a test note \u2013 and set the two oscillators to none if they are bothering you) Disconnect the envelope 2 from the VCA in the modulation matrix, by setting to 0 the modulation amount of en2 to vca (9th entry in the modulation matrix for most patches). The patches 125-128 are good examples of how to setup the Shruthi-1 for external signals processing. The output signal sounds ring-modulated or there's some buzzing/humming on the output. The \"ring-modulated\" sound is due to the DC adapter/supply not generating enough current. This can be verified easily by observing the +5V rail on a scope \u2013 if you see some periodic drops, something is wrong with the supply. We recommend a 300mA or 400mA supply if you stick to the parts used in the kit, and a 500mA in the event you have soldered a high-brightness LCD module different from those shipped with the kits (such as those sold by CrystalFontz). Another symptom of a poor quality DC adapter is the presence of low-frequency hissing/humming in the output. I get no sound or a a distorted sound. How do I know at which stage the problem is located? You can \"probe\" the circuit with an audio jack connected to a mixer/amp. The tip of the audio jack should be connected to the point you want to probe ; the sleeve should be connected to any point of the ground at ground potential (points marked \"GND\"). On the SMR4mkII, the audio path is the following: You should hear: Raw audio signals Raw audio signal with a 0.33 gain + audio input Audio signal filtered by 1 pole Audio signal filtered by 2 poles Audio signal filtered by 3 poles Audio signal filtered by 4 poles Audio signal filtered by 2 poles or 4 poles depending on the position of the Poles selector Filtered audio signal, with VCA applied to it Final audio signal Look for cold solder joints, swapped parts in the area around the point where the signal chain breaks. Releases v0.2 Rounded corners and text revision. v0.1 Original release.","title":"SMR4 mkII filter board"},{"location":"shruthi/smr4mkii/#bill-of-materials","text":"Bill of materials. Note that the resistors from Digikey have minor differences in value (E48 vs E24 series). These differences are not critical.","title":"Bill of materials"},{"location":"shruthi/smr4mkii/#assembly-instructions","text":"","title":"Assembly instructions"},{"location":"shruthi/smr4mkii/#getting-ready","text":"For reference, during the assembly, you can use the following picture of an assembled board (it is provided with the kit): Mondrian, oh Mondrian ! Some equipment you'll need: Soldering iron + solder (nothing fancy, a 15 or 20W will do). Cutters. We assume you know soldering. If you don't, look first at this tutorial . We highly recommend you to purchase a simple kit from adafruit or sparkfun to practice on something that you won't regret breaking. A last word: be patient! we know you're just a couple of hours away from playing your Shruthi-1, but if you do something stupid, those hours will turn into days or weeks. DISCLAIMER: We are not responsible for anything wrong (including electric shocks, malfunctions, fires, accidents involving a soldering iron) that might happen during the assembly of the kit. Everything you do while assembling the kit is at your own risks.","title":"Getting ready"},{"location":"shruthi/smr4mkii/#step-1-power-supply-part-1","text":"Let's start with the power supply section. Building the power supply first will allow you to test it early and check that you will not be damaging other parts because of incorrect voltages. First, let's populate the board with: the sixteen 100nF ceramic caps (labelled 104). Most of those are \"bypass capacitors\" acting as local charge reservoirs near each IC. the 10pF ceramic cap (labelled 100). Ceramic capacitors are not polarized.","title":"Step 1: power supply, part 1"},{"location":"shruthi/smr4mkii/#step-2-power-supply-part-2","text":"Add: The protection diode D1. D1 is polarized , the white ring around it must match the symbol silkscreened on the PCB. A DIP8 socket.","title":"Step 2: power supply, part 2"},{"location":"shruthi/smr4mkii/#step-3-power-supply-part-3","text":"Now, add: The 3 100uF electrolytic caps (C2, C11, C12). Note that the caps that come with your kit might have a different color or voltage. What matters is the value printed on it. If it is labelled 100uF, it's good! The (optional) 10uF tantalum cap (C1). The 2 220uF electrolytic caps (C20, C30). 470uF or higher can also be used there ; but the higher the capacity, the bulkier the caps get. All of them are polarized . The white stripe on the side of the electrolytic capacitors indicates which of their lead is negative. The negative lead is the shortest one. The long lead must go in the hole marked with a plus sign. Here is another view of the capacitors: C1 is optional -- it is shipped with the kit, but if you are building this yourself and cannot source cheap Tantalum caps, you can ignore it (it would be required if the power supply had to deliver more than the <20mA required by the SMR4 mkII circuit). C1 is polarized . The positive lead is marked with a + and a band (see this picture )","title":"Step 3: power supply, part 3"},{"location":"shruthi/smr4mkii/#step-4-power-supply-part-4","text":"You can now solder the voltage regulators (LM7905 and LM7805 ; though they can be labelled MC7805, KA7905 etc depending on which manufacturer they come from). They are polarized . The metallic plate with the hole should be on the same side as the bold line of the part drawing on the PCB. Solder the DC connector. The best way to solder it is to heat the exposed copper \"ring\" on the PCB, and then to let the solder melt around it. It will form a \"lake\" of solder around the leg of the connector. Solder one leg, adjust the connector into the right position, then solder the other legs. Finally, if you don't want to use a main on/off switch, add a piece of wire (I use the leads of parts I have just cut) to make a permanent connection between the pads labelled SW. Otherwise, solder two pieces of wire to a rocker switch. The switch has no polarity.","title":"Step 4: power supply, part 4"},{"location":"shruthi/smr4mkii/#step-5-power-supply-testing","text":"You can now insert IC1 (LT1054). Be careful with the orientation , this IC is oriented unlike the other ICs on the board! The LT1054 does not have a notch, but a round mark to indicate its first pin. This round mark must be near the IC1 marking on the PCB. The power supply is now ready to be tested. Connect a DC supply (unregulated, any voltage between 7.5V and 9V, center pin positive) and check the voltages at the following points of the PCB: Put the COM probe of your meter on the blue point on the far left (near the connector labelled GND). Test, with the other probe, that all the red points are at 5V, and all the green points at -5V. A difference of 0.1V is acceptable (I often get -5.1 and 4.9V, this is OK). \\ If there's something wrong, check the regulators and capacitors polarities.","title":"Step 5: power supply, testing"},{"location":"shruthi/smr4mkii/#step-6-resistors","text":"Add: 1x 68R resistor (blue, grey, black, gold) 6x 220R resistors (red, red, black, black).","title":"Step 6: Resistors"},{"location":"shruthi/smr4mkii/#step-7-resistors-again","text":"Add: 2x 1k resistors (brown, black, black, brown) 3x 2.2k resistor (red, red, black, brown)","title":"Step 7: Resistors again"},{"location":"shruthi/smr4mkii/#step-8-resistors-the-trilogy","text":"Add 12x 10k resistors (brown, black, black, red). Be careful , there are spots for 18k resistors and the 0 and 8 look a bit similar!","title":"Step 8: Resistors, the trilogy"},{"location":"shruthi/smr4mkii/#step-9-resistors-the-prequel","text":"Add: 3x 18k resistor (brown, grey, black, red) 1x 33k resistors (orange, orange, black, red) 1x 47k resistor (yellow, purple, black, red) 1x 100k resistor (brown, black, black, orange) 1x 150k resistor (brown, green, black, orange) 1x 330k resistor (orange, orange, black, orange) You will be left with a 1M resistor. If you plan to use the SMR4 mkII board with a Shruthi-1 control board, solder it. See more about this in the hacks and mods section.","title":"Step 9: Resistors, the prequel"},{"location":"shruthi/smr4mkii/#step-10-small-caps","text":"Add: 3x 100pF ceramic caps (labelled 101). 2x 220nF ceramic caps (labelled 224). These caps are not polarized.","title":"Step 10: Small caps"},{"location":"shruthi/smr4mkii/#step-11-sockets","text":"Add 1x DIP8, 2x DIP14 and 3x DIP16 IC sockets.","title":"Step 11: Sockets"},{"location":"shruthi/smr4mkii/#step-12-taller-parts","text":"Add 4x 1nF film caps near IC7. Film capacitors can come in two sizes: 2.54mm (small) and 5.08mm (larger), that's why the PCB footprint has 3 holes while the part has only 2! The photo shows how to insert the 2.54mm caps - the outer hole is left empty. When a 5.08mm cap is used, the middle hole is left empty. Add 4x 2N3906 transistors. Transistors are polarized . Make sure that the \"flat\" and \"round\" sides of the transistors follow what is printed on the PCB. Add 3x 4.7uF NP electrolytic caps. They are not polarized, so please ignore the +/- marking on the PCB.","title":"Step 12: Taller parts"},{"location":"shruthi/smr4mkii/#step-13-connectors-and-trimpot","text":"Add the connectors and the trimpot: 1x 20k trimpot (labelled 203). 8x1 female connector for stacking the boards. 3x1 male connector for the Poles selector. The two audio connectors. Don't forget putting a jumper on the poles selector! 4 is the recommended position (After all it's not an SMR2!). If you intend to house your Shruthi in the standard acrylic case, you will not have much room to add gain pots -- so instead, you'll have to \"bridge\" two of the pots' solder pads as printed on the PCB.","title":"Step 13: Connectors and trimpot"},{"location":"shruthi/smr4mkii/#step-14-ic-time","text":"You can now insert the ICs! (1x TL072, 2x TL074 and 3x LM13700). All are looking \"left\". The board should look like this: You have finished building the board; You can already play with it, but it is highly recommended to continue and tune the filter.","title":"Step 14: IC time!"},{"location":"shruthi/smr4mkii/#step-15-voct-tuning","text":"The tuning procedure consists in making sure that the cutoff frequency of the filter follows a musical scale: increasing the cutoff setting on the Shruthi by 12 (or playing a note 1 octave = 12 semitones higher) should double the cutoff frequency. First, you'll need to assemble the filter and control boards. Maybe you can start screwing them together onto the bottom plate of the enclosure or you can just temporarily sandwich a female 1x8 connector between the boards just for testing. Dial the following settings on the Shruthi-1: Oscillator 1 shape: none Oscillator 2 shape: none Filter cutoff: 64 Filter resonance: 63 (maximum value) Filter envelope and LFO modulations: 0 Play on the keyboard. You should hear a pure tone (sine wave), which does not come from the Shruthi-1 oscillators but from the filter self-oscillating. Adjust the V/Oct trimmer so that the intervals are respected - that is to say, when you play C3 then C4, you should hear two notes, maybe not C3s and C4s, but they must be one octave apart. If you do not have a good sense of pitch, you can try a software tuner like Tuna Pitch on OS X. If the filter is correctly tuned, you should be able to play the filter \"self oscillation tone\" across roughly 4 octaves with correct tuning.","title":"Step 15: V/Oct Tuning"},{"location":"shruthi/smr4mkii/#step-16-congratulations","text":"You have finished building and tuning your SMR4 mkII filter board. Have fun with it... and come back here in a few weeks if you want to push its limits!","title":"Step 16: Congratulations!"},{"location":"shruthi/smr4mkii/#mods-and-hacks","text":"","title":"Mods and hacks"},{"location":"shruthi/smr4mkii/#vca-bleed-fix-for-use-with-the-shruthi-1-digital-control-board","text":"The CVs generated by the Shruthi-1 control board cannot swing as low as ground -- there is always a tiny bit of residual voltage. This will prevent the VCA to be completely silenced. Most of the time this is not a problem, because the Shruthi-1's digital oscillators switch themselves off when the VCA envelope reaches 0. But this slight bleed can be heard when resonance is set to its maximum value. To prevent this bleed, solder the optional 1M resistor. This will shift the VCA CV down by a few mV.","title":"VCA bleed fix for use with the Shruthi-1 digital control board"},{"location":"shruthi/smr4mkii/#pole-selector-switch","text":"You can connect those three points to the 3 terminals of a SPDT switch. This will allow you to switch between the 2 and 4 pole modes with the switch.","title":"Pole selector switch"},{"location":"shruthi/smr4mkii/#additional-filter-modes","text":"Solder a 10k resistor vertically below the pad labelled Mode on the PCB. Connecting the point labelled Mode to the points labelled BP1 and BP3 will give different flavors of band-pass filtering. It is recommended to use a SP3T switch (pole to Mode , throw1 to BP1 , throw2 to BP3 , throw3 left floating) to easily control this extra connection. This graph shows the 6 different responses that can be obtained by switching the pole selector to either positions (LP2 or LP4) and by patching BP1 or BP3 to the \"Mode\" pad (or leaving it unpatched in the first row).","title":"Additional filter modes"},{"location":"shruthi/smr4mkii/#extra-cv-inputs-for-filter-cutoff-control","text":"Each row is for an extra CV input controlling the filter cutoff. A resistor should be mounted vertically across the first two pads (try 15k to 68k... depending on your CV source!), and the last pad in the row is the CV input itself. Interesting FM effects can be obtained by feeding audio signals at these points, when the filter resonance is high!","title":"Extra CV inputs for filter cutoff control"},{"location":"shruthi/smr4mkii/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"shruthi/smr4mkii/#the-leftright-channel-is-missing","text":"The Shruthi is a mono synth. The jack near the \"OUT\" text is a monophonic output, which needs to be hooked to a sound interface/mixer. The other jack is an input.","title":"The left/right channel is missing"},{"location":"shruthi/smr4mkii/#i-have-connected-an-external-audio-source-but-i-cant-hear-it","text":"The SMR-4 board has a VCA, which needs to be opened to let the filtered audio signal go out. You need to either: Hold a note (for example, hold S1 to trigger a test note \u2013 and set the two oscillators to none if they are bothering you) Disconnect the envelope 2 from the VCA in the modulation matrix, by setting to 0 the modulation amount of en2 to vca (9th entry in the modulation matrix for most patches). The patches 125-128 are good examples of how to setup the Shruthi-1 for external signals processing.","title":"I have connected an external audio source but I can't hear it."},{"location":"shruthi/smr4mkii/#the-output-signal-sounds-ring-modulated-or-theres-some-buzzinghumming-on-the-output","text":"The \"ring-modulated\" sound is due to the DC adapter/supply not generating enough current. This can be verified easily by observing the +5V rail on a scope \u2013 if you see some periodic drops, something is wrong with the supply. We recommend a 300mA or 400mA supply if you stick to the parts used in the kit, and a 500mA in the event you have soldered a high-brightness LCD module different from those shipped with the kits (such as those sold by CrystalFontz). Another symptom of a poor quality DC adapter is the presence of low-frequency hissing/humming in the output.","title":"The output signal sounds ring-modulated or there's some buzzing/humming on the output."},{"location":"shruthi/smr4mkii/#i-get-no-sound-or-a-a-distorted-sound-how-do-i-know-at-which-stage-the-problem-is-located","text":"You can \"probe\" the circuit with an audio jack connected to a mixer/amp. The tip of the audio jack should be connected to the point you want to probe ; the sleeve should be connected to any point of the ground at ground potential (points marked \"GND\"). On the SMR4mkII, the audio path is the following: You should hear: Raw audio signals Raw audio signal with a 0.33 gain + audio input Audio signal filtered by 1 pole Audio signal filtered by 2 poles Audio signal filtered by 3 poles Audio signal filtered by 4 poles Audio signal filtered by 2 poles or 4 poles depending on the position of the Poles selector Filtered audio signal, with VCA applied to it Final audio signal Look for cold solder joints, swapped parts in the area around the point where the signal chain breaks.","title":"I get no sound or a a distorted sound. How do I know at which stage the problem is located?"},{"location":"shruthi/smr4mkii/#releases","text":"","title":"Releases"},{"location":"shruthi/smr4mkii/#v02","text":"Rounded corners and text revision.","title":"v0.2"},{"location":"shruthi/smr4mkii/#v01","text":"Original release.","title":"v0.1"},{"location":"shruthi/ssm2044/","text":"This filter board is based on the classic SSM2044 filter chip, which is still available in surplus online shops. Providing a VC 4-pole LPF (with VC resonance), the SSM2044 was used in the PPG Wave, the Korg PolySix and MonoPoly ( nice reference here ), but also in the SP1200. Its sound is very warm and \"juicy\". To complete this filter, a linear VCA based on the high-quality SSM2164 quad-VCA chip is added. Don't be fooled by the magical SSM letters: this one is a modern, widely available (and classy!) chip. The VCA cells on the SSM2164 have an exponential response curve and need to be linearized. One such cell is used in a feedback configuration to convert the linear CV into a logarithmic CV (the little man in the op-amp can find the inverse of functions!), and a second cell is used for the actual amplification, using the inverse CV. This design is due to Mike Irwin. It would have been very unfortunate to leave the 2 remaining VCA cells on the SSM2164 unused, so we decided to wire them into a 2-pole low-pass, the cutoff frequency of which is controlled by CV1. Yet another low-pass? No, because the SSM2044 has two inputs: an inverting one and a non-inverting one. The original signal is sent to the inverting input, and the low-passed signal is sent to the non-inverting input. The SSM2044 will thus process the difference of both signals, which will sound like a high-pass filtered version of the original signal, with cutoff controlled by CV1. Why didn't we go with a high-pass? The circuit was a bit-simpler this way, and it sounded like an interesting use of the inverting and non-inverting inputs of the SSM2044. Note that this filter board will only be distributed as a PCB (no kit). Schematics and PCB You can find the Eagle files for this board in the shruthi/hardware_design/pcb directory of the source code hosted on github . The schematics in PDF format are here . Bill of materials Bill of materials . The SSM2044 is a bit finicky to use. It produces some noise when the cutoff is swept too abruptly, and the output may have a massive DC offset dependent on the resonance and cutoff frequency -- causing CVs to \"bleed\" in the output signal. The first problem is solved by low-pass filtering the cutoff CV by the R23/C16 pair. You can smooth the response even more by increasing C16, but beware of groovy, wobbly envelopes if there's too much filtering! The second problem is solved by the high-pass filter realized by R39 and C34. Increase R39 to boost a bit the low-end of the signal, at the cost of more thumps/pops when the envelope moves fast. Assembly notes Here's an image of an assembled board: Some random notes: I have used posh polystyrene caps for the high-pass filter. For the low-pass, my 6.8nF polystyrene caps were a bit massive so I ended up using standard film ones - the filter works perfectly and I have not noticed any impact on the sound. I might change the layout a bit in a future revision to allow for bigger caps. The LT1054 is not socketed simply because I ran out of DIP8 sockets! The V/Oct trimpot is in the same direction as the other ones contrary to what is printed on the PCB. This has no impact. Usage Trimming and tuning Filter First, Reso should be adjusted so that the filter enters in auto-oscillation (with all oscillators set to none ) when the value of resonance approaches 63. Then, V/oct must be adjusted so that a melody played by the auto-oscillation sine wave is in tune. Finally, F. range (aka Lowwww on the other filter boards) should be adjusted so that the high pitched sine wave produced with cutoff = 127, resonance = 63 and all oscillators off is at the limits of your hearing range. VCA silencing Set the Envelope 2 sustain value to 0 and press a key. Adjust the Gate trimmer until you hear something (you might have to boost the gain a lot on your amp/speakers to actually notice the change). Then slowly turn the trimmer in the other direction and stop as soon as you stop hearing the sound. What is going on? Gate is offsetting the envelope CV up and down a tiny bit so that when the envelope reaches a value of 0, the VCA has a null gain, rather than a \"low but audible\" gain of -60dB. Using the High-pass filter The high-pass filter setting is not exposed in the Shruthi-1 interface, since some other filter boards do not contain a HP! To control it, connect modulation source offset to CV1 , and control the modulation amount to sweep the high-pass filter. Kudos Seppoman for some hints on dealing with the SSM2044 quirks. Releases v0.2 Removed middle spacers holes. Increased VCA gain bias range. Increased hole sizes for audio and DC connectors. Added more space for capacitors (so that styroflex caps can be mounted). v0.1 Original release.","title":"SSM2044 filter board"},{"location":"shruthi/ssm2044/#schematics-and-pcb","text":"You can find the Eagle files for this board in the shruthi/hardware_design/pcb directory of the source code hosted on github . The schematics in PDF format are here .","title":"Schematics and PCB"},{"location":"shruthi/ssm2044/#bill-of-materials","text":"Bill of materials . The SSM2044 is a bit finicky to use. It produces some noise when the cutoff is swept too abruptly, and the output may have a massive DC offset dependent on the resonance and cutoff frequency -- causing CVs to \"bleed\" in the output signal. The first problem is solved by low-pass filtering the cutoff CV by the R23/C16 pair. You can smooth the response even more by increasing C16, but beware of groovy, wobbly envelopes if there's too much filtering! The second problem is solved by the high-pass filter realized by R39 and C34. Increase R39 to boost a bit the low-end of the signal, at the cost of more thumps/pops when the envelope moves fast.","title":"Bill of materials"},{"location":"shruthi/ssm2044/#assembly-notes","text":"Here's an image of an assembled board: Some random notes: I have used posh polystyrene caps for the high-pass filter. For the low-pass, my 6.8nF polystyrene caps were a bit massive so I ended up using standard film ones - the filter works perfectly and I have not noticed any impact on the sound. I might change the layout a bit in a future revision to allow for bigger caps. The LT1054 is not socketed simply because I ran out of DIP8 sockets! The V/Oct trimpot is in the same direction as the other ones contrary to what is printed on the PCB. This has no impact.","title":"Assembly notes"},{"location":"shruthi/ssm2044/#usage","text":"","title":"Usage"},{"location":"shruthi/ssm2044/#trimming-and-tuning","text":"","title":"Trimming and tuning"},{"location":"shruthi/ssm2044/#filter","text":"First, Reso should be adjusted so that the filter enters in auto-oscillation (with all oscillators set to none ) when the value of resonance approaches 63. Then, V/oct must be adjusted so that a melody played by the auto-oscillation sine wave is in tune. Finally, F. range (aka Lowwww on the other filter boards) should be adjusted so that the high pitched sine wave produced with cutoff = 127, resonance = 63 and all oscillators off is at the limits of your hearing range.","title":"Filter"},{"location":"shruthi/ssm2044/#vca-silencing","text":"Set the Envelope 2 sustain value to 0 and press a key. Adjust the Gate trimmer until you hear something (you might have to boost the gain a lot on your amp/speakers to actually notice the change). Then slowly turn the trimmer in the other direction and stop as soon as you stop hearing the sound. What is going on? Gate is offsetting the envelope CV up and down a tiny bit so that when the envelope reaches a value of 0, the VCA has a null gain, rather than a \"low but audible\" gain of -60dB.","title":"VCA silencing"},{"location":"shruthi/ssm2044/#using-the-high-pass-filter","text":"The high-pass filter setting is not exposed in the Shruthi-1 interface, since some other filter boards do not contain a HP! To control it, connect modulation source offset to CV1 , and control the modulation amount to sweep the high-pass filter.","title":"Using the High-pass filter"},{"location":"shruthi/ssm2044/#kudos","text":"Seppoman for some hints on dealing with the SSM2044 quirks.","title":"Kudos"},{"location":"shruthi/ssm2044/#releases","text":"","title":"Releases"},{"location":"shruthi/ssm2044/#v02","text":"Removed middle spacers holes. Increased VCA gain bias range. Increased hole sizes for audio and DC connectors. Added more space for capacitors (so that styroflex caps can be mounted).","title":"v0.2"},{"location":"shruthi/ssm2044/#v01","text":"Original release.","title":"v0.1"},{"location":"shruthi/svf/","text":"Tired of all those boring 4-pole low-pass filters? This filter board is for you! It features 2 independent 2-pole filters with low-pass, band-pass and high-pass modes, which can be routed in serial or parallel. The routing and mode switching is digitally controlled - this can be stored with patch data and modified from the Shruthi-1 digital board menus (Shruthi-1 digital board v0.6 and firmware v0.93 or above). Using this filter board Please make sure that both the analog (CV1 to +5V) and digital (RX to +5V) ports of the filter and control boards are connected. Beware! Only the Shruthi-1 firmware v0.93 (or above) generates the digital signals required to control the mode selection and routing matrix. In addition, it is not possible to use simultaneously the SVF filter board and the Programmer since they will be both accessing at the same time the digital extension port. To activate your SVF board, select svf in the system settings page. If you don't do so, it is likely that it will emit glitchy filtered sounds everytime you navigate through the pages. When pressing the S2 switch (Filter page) a second time, a new page is displayed allowing you to configure the filter routing and the cutoff/resonance of the secondary filter. Cut res md1 md2 110 0 lpf +hp The parameters are the following: cut (cutoff) : Cutoff frequency of the secondary filter. res (resonance) : Resonance of the secondary filter. md1 (mode 1) : Mode of the main filter. The modes are lpf (low-pass), bpf (band-pass), and hpf (high-pass). md2 (mode 2) : Mode of the secondary filter. The modes are lp (low-pass), bp (band-pass), and hp (high-pass). The first character indicates the filter topology. + is for the parallel mode ; > is for the serial mode. The CV1 and CV2 buses are used to transmit the cutoff and resonance settings of the secondary filter. Thus, you can use these as modulation destinations in the modulation matrix to route envelopes, LFOs, etc to the cutoff and resonance of the secondary filter. For example, if you want the second filter to track the note played on the keyboard, just like the main filter does by default, this can be done with the following modulation patch: Mod src dst amt 1 not cv1 63 If for any specific reason you don't want to digitally switch between the modes, but rather want to build your own modeswitchamatron (one such reason would be that you want to use the programmer and like knobby and switchy things), remove the two 4053s and manually patch your favorite filter topology with wires between the pins of IC12 and IC13. The labels on IC12 and IC13 indicate which signals are available at those pins: MIX: oscillators + audio input mix BP1: output of filter 1 BP mode HP1: output of filter 1 HP mode LP1: output of filter 1 LP mode 1>VCA: contribution of filter 2 to the final output. >2: filter 2 input BP2: output of filter 2 BP mode HP2: output of filter 2 HP mode LP2: output of filter 2 LP mode 2>VCA: contribution of filter 2 to the final output. Schematics and PCB You can find the Eagle files for this board in the shruthi/hardware_design/pcb directory of the source code hosted on github . The schematics in PDF format are here . If you are wondering how it works, this document provides an analysis and some design notes. Bill of materials Bill of materials. Not required. Check the SSM2164 datasheet to learn about the difference in noise/distortion between class A and class AB operation and decide wisely. Do not populate the diodes for a harsh, clipped resonance. License This circuit and PCB layout is made available under a cc-by-sa-3.0 license. Releases v0.2 Added label with Zener value. Fixed bad routing of audio connector trace. Changed a few gains along the audio path to minimize clipping when using vanilla TL072 (breadboard proto used TLV272s). v0.1 First prototype. Kudos David Dixon and Tom Wiltshire for precious discussions on SSM2164 SVF design.","title":"SVF filter board (old)"},{"location":"shruthi/svf/#using-this-filter-board","text":"Please make sure that both the analog (CV1 to +5V) and digital (RX to +5V) ports of the filter and control boards are connected. Beware! Only the Shruthi-1 firmware v0.93 (or above) generates the digital signals required to control the mode selection and routing matrix. In addition, it is not possible to use simultaneously the SVF filter board and the Programmer since they will be both accessing at the same time the digital extension port. To activate your SVF board, select svf in the system settings page. If you don't do so, it is likely that it will emit glitchy filtered sounds everytime you navigate through the pages. When pressing the S2 switch (Filter page) a second time, a new page is displayed allowing you to configure the filter routing and the cutoff/resonance of the secondary filter. Cut res md1 md2 110 0 lpf +hp The parameters are the following: cut (cutoff) : Cutoff frequency of the secondary filter. res (resonance) : Resonance of the secondary filter. md1 (mode 1) : Mode of the main filter. The modes are lpf (low-pass), bpf (band-pass), and hpf (high-pass). md2 (mode 2) : Mode of the secondary filter. The modes are lp (low-pass), bp (band-pass), and hp (high-pass). The first character indicates the filter topology. + is for the parallel mode ; > is for the serial mode. The CV1 and CV2 buses are used to transmit the cutoff and resonance settings of the secondary filter. Thus, you can use these as modulation destinations in the modulation matrix to route envelopes, LFOs, etc to the cutoff and resonance of the secondary filter. For example, if you want the second filter to track the note played on the keyboard, just like the main filter does by default, this can be done with the following modulation patch: Mod src dst amt 1 not cv1 63 If for any specific reason you don't want to digitally switch between the modes, but rather want to build your own modeswitchamatron (one such reason would be that you want to use the programmer and like knobby and switchy things), remove the two 4053s and manually patch your favorite filter topology with wires between the pins of IC12 and IC13. The labels on IC12 and IC13 indicate which signals are available at those pins: MIX: oscillators + audio input mix BP1: output of filter 1 BP mode HP1: output of filter 1 HP mode LP1: output of filter 1 LP mode 1>VCA: contribution of filter 2 to the final output. >2: filter 2 input BP2: output of filter 2 BP mode HP2: output of filter 2 HP mode LP2: output of filter 2 LP mode 2>VCA: contribution of filter 2 to the final output.","title":"Using this filter board"},{"location":"shruthi/svf/#schematics-and-pcb","text":"You can find the Eagle files for this board in the shruthi/hardware_design/pcb directory of the source code hosted on github . The schematics in PDF format are here . If you are wondering how it works, this document provides an analysis and some design notes.","title":"Schematics and PCB"},{"location":"shruthi/svf/#bill-of-materials","text":"Bill of materials. Not required. Check the SSM2164 datasheet to learn about the difference in noise/distortion between class A and class AB operation and decide wisely. Do not populate the diodes for a harsh, clipped resonance.","title":"Bill of materials"},{"location":"shruthi/svf/#license","text":"This circuit and PCB layout is made available under a cc-by-sa-3.0 license.","title":"License"},{"location":"shruthi/svf/#releases","text":"","title":"Releases"},{"location":"shruthi/svf/#v02","text":"Added label with Zener value. Fixed bad routing of audio connector trace. Changed a few gains along the audio path to minimize clipping when using vanilla TL072 (breadboard proto used TLV272s).","title":"v0.2"},{"location":"shruthi/svf/#v01","text":"First prototype.","title":"v0.1"},{"location":"shruthi/svf/#kudos","text":"David Dixon and Tom Wiltshire for precious discussions on SSM2164 SVF design.","title":"Kudos"},{"location":"shruthi/svf2/","text":"Note : Documentation for the older version of this board is available here . This filter board features 2 independent 2-pole state variable filters with low-pass, band-pass and high-pass modes, which can be routed in serial or parallel. The routing and mode switching is digitally controlled and can be stored in patches. Schematics and PCB You can find the Eagle files for this board in the shruthi/hardware_design/pcb directory of the source code hosted on github . The schematics in PDF format are here . The position of all parts is shown on this drawing . If you are wondering how it works, this document provides an analysis and some design notes. Bill of materials Bill of materials (second half of the document) . Note that the resistors from Digikey have minor differences in value (E48 vs E24 series). These differences are not critical. Assembly instructions We assume you know soldering. If you don't, look first at this tutorial . Be patient! DISCLAIMER: We are not responsible for anything wrong (including electric shocks, malfunctions, fires, accidents involving a soldering iron) that might happen during the assembly of the kit. Everything you do while assembling the kit is at your own risks. The assembly is done in two chapters: first, we build the power supply section, and then, the rest of the filter board. Building the power supply section first allows potentially destructive mistakes to be detected early. Power supply step 1: Capacitors Add 1x 10pF ceramic capacitor (marked 100 = \"10 with 0 extra zeros pF\") in position C7. This part is not polarized. It tunes the frequency of the DC/DC converter which generates the negative voltage for powering the analog section. Add 2x 100nF ceramic capacitors (marked 104 = \"10 with 4 extra zeros = 100,000pF = 100nF\") in positions C38 and C48. These parts are not polarized, and serve for power supply filtering. Note: the marking on these capacitors is very small and difficult to read. To help you recognize them: 1/ These are the only capacitors not attached to a cardboard strip. 2/ The print is much smaller than on the other values such as 10pF, 560pF, or 100pF. Power supply step 2: Diode and connectors Add 1x 1N400x diode in position D1. The diode is polarized . The ring on the diode must be on the same side as the marking on the board. This diode serves as a protection in case a power supply with the wrong polarity is connected by mistake. Add 1x DIP8 IC socket in position IC1 - note that the notch is oriented towards the exterior of the board. Solder a jumper wire (for example a leg of a capacitor you have cut in the previous steps) between the two pads marked SW. This connection can be broken to solder an on/off switch. Solder the DC jack connector in position J1. Power supply step 3: More capacitors Add one 10\u00b5F tantalum capacitor in position C3. This part is polarized . A small stripe is printed on the part and indicates the + lead, which should go in the hole marked + on the board. This part is a charge reservoir for the DC/DC converter. Add 3x 100\u00b5F electrolytic capacitors in positions C2, C15 and C16. Note that the blue and tall 100\u00b5F capacitor shown on this photo was out of stock at the time the kit were prepared. Instead, your kit contains a smaller (about 8mm), black part. These capacitors are all polarized (and will pop if soldered with the wrong orientation!). The white stripe painted on the capacitor indicates its negative lead. The positive lead is the long one, and should go in the hole marked with a + on the PCB. These parts are used for power supply filtering. Add 2x 220\u00b5F electrolytic capacitors in positions C37 and C49. They are all polarized (and will pop if soldered with the wrong orientation!). The white stripe painted on the capacitor indicates its negative lead. The positive lead is the long one, and should go in the hole marked with a + on the PCB. These parts are used for power supply filtering. Power supply step 4: ICs Solder the 7805 positive voltage regulator in position IC14, and the 7905 negative voltage regulator in position IC5. They have different names, hence are different parts, and should not be mixed up! They are also polarized - make sure the metal tab is oriented on the same side as on the picture (it is also depicted with a thick white line on the PCB). These parts output a smooth, steady voltage from whatever the wall-wart plugged into the unit delivers. Any excess of energy delivered by the wall-wart is dissipated as heat, so these parts can get quite hot! Insert the LT1054 DC/DC converter in the IC1 socket. This part is polarized - make sure it is inserted with the same orientation as on the picture. Power supply step 5: Voltage test Connect a wall-wart with the following specifications: Output voltage: 7.5V to 9V Output current: 300mA or more Polarity: - -( o- + (center tip positive) Measure the voltage on a +5V point of the PCB. Check that it is between 4.9V and 5.1V. Measure the voltage on a -5V point of the PCB. Check that it is between -4.9V and -5.1V. All good? Let us dive into the assembly of the filter itself! Step 1: Jumper wires Solder two pieces of wire between the two lower pads in positions R1 and R2. If you decide to build a custom case later, these pads can be used to solder input and output gain potentiometers. Step 2: Resistors, first decade Add 1x 220R resistor (red red black black brown) in position R3. Add 8x 470R resistors (yellow purple black black brown) in positions R22, R23, R33, R34, R38, R39, R48 and R49. Resistors are not polarized - but it's a good idea to solder them just like on the photos in case you need the assistance of someone else to verify or troubleshoot your work. Step 3: Resistors, second decade Add 2x 1.0k resistors (brown black black brown brown) in positions R51 and R52. Step 4: Resistors, third decade Add 3x 10k resistors (brown black black red brown) in positions R10, R11 and R17. Add 2x 15k resistors (brown green black red brown) in positions R28 and R44. Add 6x 22k resistors (red red black red brown) in positions R8, R15, R16, R18, R19 and R21. Step 5: Resistors, fourth decade Add 18x 33k resistors (orange orange black red brown). Step 6: Resistors, the last decade { Add 4x 100k resistors (brown black black orange brown) in positions R9, R14, R20 and R24. Add 2x 330k resistors (orange orange black orange brown) in positions R29 and R45. Most of the resistors soldered in the previous steps work for setting gain factors in various stages of the circuitry - a wildly distorted or quiet output; or a filter control going rapidly out of range are often the consequence of incorrect resistor values. Step 7: Zener diodes Solder 4x 3.6V Zener diodes in positions D2, D3, D4 and D5. The diodes are polarized - the black ring of the diode must be on the same side as the ring printed on the symbol on the PCB. These diodes work as voltage limiters. A pair of back to back 3.6V Zener diodes will force the signal to stay roughly within the -3.6V to 3.6V range. What is interesting is that this \"limiting\" effect is relatively gentle - no hard clipping occurs. This soft-limiting circuit is used in each filter, to prevent it from screaming when resonance is high - instead we get a gentle sinusoidal self oscillation! An interesting mod would be to use a switch to enable/disable them. Step 8: Ceramic capacitors Add 3x 100pF ceramic capacitors (marked 101 = \"10 with 1 extra zero = 100pF\") in positions C10, C13 and C14. These parts are not polarized, and tame high frequencies in the mixer, output amplifier, and VCA control circuits. Add 8x 560pF ceramic capacitors (marked 561 = \"56 with 1 extra zero = 560pF\") in positions C24, C25, C29, C30, C41, C42, C44 and C45. These parts are not polarized, and prevent high frequency signals from reaching the sensitive inputs of the V2164 ICs. Step 9: Ceramic capacitors Add 21x 100nF ceramic capacitors (marked 104 = \"10 with 4 extra zero = 100,000pF = 100nF\"). These parts are not polarized, and serve as decoupling capacitors - local reservoirs of energy immediately available to each IC. Note: the marking on these capacitors is very small and difficult to read. To help you recognize them: 1/ These are the only capacitors not attached to a cardboard strip. 2/ The print is much smaller than on the other values such as 10pF, 560pF, or 100pF. Step 10: IC sockets Make sure that the notch of IC sockets is oriented on the same side as the notch on the PCB symbol. This does not change anything electrically, but having the notch in the right position is a helpful hint for correctly inserting the IC in the next steps! Add 5x DIP8 sockets in positions IC2, IC3, IC4, IC6 and IC10. Add 1x DIP14 socket in position IC8. Add 5x DIP16 sockets in positions IC7, IC9, IC11, IC12 and IC13. Step 11: Film capacitors Add 1x 6.8nF capacitor in position C9. The value \"6.8n\" or \"6800\" is printed on it. This cap smooths the VCA CV signal. Add 2x 33nF capacitors in positions C11 and C12. The value \"33n\" or \"0.033\" is printed on it. They smooth the two VCF frequency CV signals. Add 2x 68nF capacitors in positions C8 and C22. The value \"68n\" or \"0.068\" is printed on it. They smooth the two VCF resonance CV signals. Step 12: Connectors and trimmers Add the 1x8 and 1x6 connectors. Add the 4x 5k trimmers. Make sure that the screw is oriented towards the exterior of the board. Step 13: Non-polarized capacitors Add the 2x 1.0\u00b5F NP capacitors in positions C20 and C21 and the 2x 4.7\u00b5F NP capacitors in positions C1 and C34. They are not polarized. They are used to block the DC component of the signal between various stages of the circuitry (and as such, prevent VCA CV feedthrough, which manifests itself as \"pops\"). Step 14: Styroflex capacitors Solder the 4x 220pF styroflex capacitors in positions C33, C35, C39 and C46. Bend the lead carefully! These parts are not polarized. They are the main filter capacitors - 2 of them per filter (this is a two-pole filter). Styroflex capacitors are available in small tolerances and have good temperature stability - they are thus good choices for filters. Step 15: Connectors and ICs Insert the ICs. They all have their notch oriented towards the left - at the exception of the LT1054! Solder the two audio connectors. Done! Using this filter board Control board configuration and connections To activate your SVF board, select svf for the fil setting in the system settings page. If you don't do so, it is likely that the filter will emit glitchy filtered sounds every time you navigate through the pages. After having made the change, press S6 (load/save), turn the encoder to select \"ok\" and click. This will save the filter board setting for future use. Make sure that both the analog (CV1 to +5V) and digital (RX to +5V) ports of the filter and control boards are connected. Controlling filter 2 When pressing the S2 switch (Filter page) a second time, a new page is displayed allowing you to configure the filter routing and the cutoff/resonance of the secondary filter. Cut res md1 md2 110 0 lpf +hp The parameters are the following: cut (cutoff) : Cutoff frequency of the secondary filter. res (resonance) : Resonance of the secondary filter. md1 (mode 1) : Mode of the main filter. The modes are lpf (low-pass), bpf (band-pass), and hpf (high-pass). md2 (mode 2) : Mode of the secondary filter. The modes are lp (low-pass), bp (band-pass), and hp (high-pass). The first character indicates the filter topology. + is for the parallel mode ; > is for the serial mode. Relative control of filter 2 Three special modes are available for filter 1: lp> , bp> , hp> . In these modes, the cutoff frequency of filter 2 becomes relative to the cutoff frequency of filter 1 ; and the cutoff 2 setting controls the spacing between the two (with a value above 64 representing a positive shift and a value below 64 a negative shift). For example: Cut res md1 md2 64 0 bp> +bp The frequency of filter 2 is the same as the frequency of filter 1. Cut res md1 md2 76 0 bp> +bp Filter 2's cutoff is one octave (64 + 12 semitones = 76) above filter 1's cutoff. Cut res md1 md2 52 0 bp> +bp Filter 2's cutoff is one octave (64 - 12 semitones = 52) below filter 1's cutoff. This coupling mode is recommended for getting filter 2 to track the played note (since filter 1 does). Modulating filter 2 The CV1 and CV2 buses are used to transmit the cutoff and resonance settings of the secondary filter. Thus, you can use these as modulation destinations in the modulation matrix to route envelopes, LFOs, etc to the cutoff and resonance of the secondary filter. For example, if you want the second filter to be modulated by a LFO, this can be done with the following modulation patch: Mod src dst amt 1 lf1 cv1 63 Calibration Note that when the two boards are stacked (but not screwed), it is still possible to lift the control board while keeping it connected to access the 4 trimmers. Filter 1 tuning The tuning procedure consists in making sure that the cutoff frequency of the filter follows a musical scale: increasing the cutoff setting on the Shruthi by 12 (or playing a note 1 octave = 12 semitones higher) should double the cutoff frequency. Power the Shruthi on and dial the following settings from the init patch: Oscillator 1 shape: none Oscillator 2 shape: none Filter cutoff: 64 Filter resonance: 63 (maximum value) Filter envelope and LFO modulations: 0 Cut res env lfo 64 63 0 0 Play on the keyboard. You should hear a pure tone (sine wave), which does not come from the Shruthi oscillators but from the filter self-oscillating. Adjust the first V/Oct trimmer (R5) so that the intervals are respected - that is to say, when you play C2 then C4, you should hear two notes, maybe not C2s and C4s, but they must be two octaves apart. If you do not have a good sense of pitch, you can try a software tuner like Tuna Pitch on OS X. If the filter is correctly tuned, you should be able to play the filter \"self oscillation tone\" across roughly 4 octaves with correct tuning. Now, play and hold a note in the higher octaves. Sweep the cutoff control up. You will notice glitches/changes in pitch when cutoff reaches very high values above 110 - this is due to interactions between the filter self-oscillation and the digital carrier used to control the filter. If you want to get rid of them (they manifest themselves only when resonance is very high), turn the first Range trimmer (R4) so that this zone is out of reach - the downside will be that the filter will have a \"darker\" tone and that it won't be possible to fully open it. Filter 2 tuning We assume that you have already dialled all settings for filter 1 tuning. Set the second filter settings to: Cut res md1 md2 64 63 lp> +lp The second filter is now active, in parallel with the first, with the same settings and key-tracking. You will now hear two tones whenever a note is played. Adjust filter 2's Range and V/Oct trimmer so that the two tones are fused into one - it will be very hard to get them to be exactly aligned, but getting a mild beating/chorusing between the two notes is enough! Tweaks and mods VCA bleed compensation Solder the remaining 2M resistor (red black black yellow) between the two pads marked \"opt\" to totally close the VCA when no note is played. This has the slightly negative effect of reducing the smoothness of the VCA envelope. You can also try a higher value below 10M. For advanced builders only: ghost eyes The two minuscule LEDs are for the ghost eyes. Since getting their orientation right is tricky, here is how we recommend doing it: Connect the control board to the filter board, set the resonance to 63 (this is one of the ways of getting the ghost eyes to light up) Disconnect the control board and keep the filter board powered. Check that you have +5V on the lower pad of each eye. Put one LED in place with tweezers. Change its position/orientation until it lights up. Solder it. Good luck! Repeat the same procedure for the other LED. License This circuit and PCB layout is made available under a cc-by-sa-3.0 license. Kudos David Dixon and Tom Wiltshire for precious discussions on SSM2164 SVF design.","title":"SVF filter board"},{"location":"shruthi/svf2/#schematics-and-pcb","text":"You can find the Eagle files for this board in the shruthi/hardware_design/pcb directory of the source code hosted on github . The schematics in PDF format are here . The position of all parts is shown on this drawing . If you are wondering how it works, this document provides an analysis and some design notes.","title":"Schematics and PCB"},{"location":"shruthi/svf2/#bill-of-materials","text":"Bill of materials (second half of the document) . Note that the resistors from Digikey have minor differences in value (E48 vs E24 series). These differences are not critical.","title":"Bill of materials"},{"location":"shruthi/svf2/#assembly-instructions","text":"We assume you know soldering. If you don't, look first at this tutorial . Be patient! DISCLAIMER: We are not responsible for anything wrong (including electric shocks, malfunctions, fires, accidents involving a soldering iron) that might happen during the assembly of the kit. Everything you do while assembling the kit is at your own risks. The assembly is done in two chapters: first, we build the power supply section, and then, the rest of the filter board. Building the power supply section first allows potentially destructive mistakes to be detected early.","title":"Assembly instructions"},{"location":"shruthi/svf2/#power-supply-step-1-capacitors","text":"Add 1x 10pF ceramic capacitor (marked 100 = \"10 with 0 extra zeros pF\") in position C7. This part is not polarized. It tunes the frequency of the DC/DC converter which generates the negative voltage for powering the analog section. Add 2x 100nF ceramic capacitors (marked 104 = \"10 with 4 extra zeros = 100,000pF = 100nF\") in positions C38 and C48. These parts are not polarized, and serve for power supply filtering. Note: the marking on these capacitors is very small and difficult to read. To help you recognize them: 1/ These are the only capacitors not attached to a cardboard strip. 2/ The print is much smaller than on the other values such as 10pF, 560pF, or 100pF.","title":"Power supply step 1: Capacitors"},{"location":"shruthi/svf2/#power-supply-step-2-diode-and-connectors","text":"Add 1x 1N400x diode in position D1. The diode is polarized . The ring on the diode must be on the same side as the marking on the board. This diode serves as a protection in case a power supply with the wrong polarity is connected by mistake. Add 1x DIP8 IC socket in position IC1 - note that the notch is oriented towards the exterior of the board. Solder a jumper wire (for example a leg of a capacitor you have cut in the previous steps) between the two pads marked SW. This connection can be broken to solder an on/off switch. Solder the DC jack connector in position J1.","title":"Power supply step 2: Diode and connectors"},{"location":"shruthi/svf2/#power-supply-step-3-more-capacitors","text":"Add one 10\u00b5F tantalum capacitor in position C3. This part is polarized . A small stripe is printed on the part and indicates the + lead, which should go in the hole marked + on the board. This part is a charge reservoir for the DC/DC converter. Add 3x 100\u00b5F electrolytic capacitors in positions C2, C15 and C16. Note that the blue and tall 100\u00b5F capacitor shown on this photo was out of stock at the time the kit were prepared. Instead, your kit contains a smaller (about 8mm), black part. These capacitors are all polarized (and will pop if soldered with the wrong orientation!). The white stripe painted on the capacitor indicates its negative lead. The positive lead is the long one, and should go in the hole marked with a + on the PCB. These parts are used for power supply filtering. Add 2x 220\u00b5F electrolytic capacitors in positions C37 and C49. They are all polarized (and will pop if soldered with the wrong orientation!). The white stripe painted on the capacitor indicates its negative lead. The positive lead is the long one, and should go in the hole marked with a + on the PCB. These parts are used for power supply filtering.","title":"Power supply step 3: More capacitors"},{"location":"shruthi/svf2/#power-supply-step-4-ics","text":"Solder the 7805 positive voltage regulator in position IC14, and the 7905 negative voltage regulator in position IC5. They have different names, hence are different parts, and should not be mixed up! They are also polarized - make sure the metal tab is oriented on the same side as on the picture (it is also depicted with a thick white line on the PCB). These parts output a smooth, steady voltage from whatever the wall-wart plugged into the unit delivers. Any excess of energy delivered by the wall-wart is dissipated as heat, so these parts can get quite hot! Insert the LT1054 DC/DC converter in the IC1 socket. This part is polarized - make sure it is inserted with the same orientation as on the picture.","title":"Power supply step 4: ICs"},{"location":"shruthi/svf2/#power-supply-step-5-voltage-test","text":"Connect a wall-wart with the following specifications: Output voltage: 7.5V to 9V Output current: 300mA or more Polarity: - -( o- + (center tip positive) Measure the voltage on a +5V point of the PCB. Check that it is between 4.9V and 5.1V. Measure the voltage on a -5V point of the PCB. Check that it is between -4.9V and -5.1V. All good? Let us dive into the assembly of the filter itself!","title":"Power supply step 5: Voltage test"},{"location":"shruthi/svf2/#step-1-jumper-wires","text":"Solder two pieces of wire between the two lower pads in positions R1 and R2. If you decide to build a custom case later, these pads can be used to solder input and output gain potentiometers.","title":"Step 1: Jumper wires"},{"location":"shruthi/svf2/#step-2-resistors-first-decade","text":"Add 1x 220R resistor (red red black black brown) in position R3. Add 8x 470R resistors (yellow purple black black brown) in positions R22, R23, R33, R34, R38, R39, R48 and R49. Resistors are not polarized - but it's a good idea to solder them just like on the photos in case you need the assistance of someone else to verify or troubleshoot your work.","title":"Step 2: Resistors, first decade"},{"location":"shruthi/svf2/#step-3-resistors-second-decade","text":"Add 2x 1.0k resistors (brown black black brown brown) in positions R51 and R52.","title":"Step 3: Resistors, second decade"},{"location":"shruthi/svf2/#step-4-resistors-third-decade","text":"Add 3x 10k resistors (brown black black red brown) in positions R10, R11 and R17. Add 2x 15k resistors (brown green black red brown) in positions R28 and R44. Add 6x 22k resistors (red red black red brown) in positions R8, R15, R16, R18, R19 and R21.","title":"Step 4: Resistors, third decade"},{"location":"shruthi/svf2/#step-5-resistors-fourth-decade","text":"Add 18x 33k resistors (orange orange black red brown).","title":"Step 5: Resistors, fourth decade"},{"location":"shruthi/svf2/#step-6-resistors-the-last-decade","text":"{ Add 4x 100k resistors (brown black black orange brown) in positions R9, R14, R20 and R24. Add 2x 330k resistors (orange orange black orange brown) in positions R29 and R45. Most of the resistors soldered in the previous steps work for setting gain factors in various stages of the circuitry - a wildly distorted or quiet output; or a filter control going rapidly out of range are often the consequence of incorrect resistor values.","title":"Step 6: Resistors, the last decade"},{"location":"shruthi/svf2/#step-7-zener-diodes","text":"Solder 4x 3.6V Zener diodes in positions D2, D3, D4 and D5. The diodes are polarized - the black ring of the diode must be on the same side as the ring printed on the symbol on the PCB. These diodes work as voltage limiters. A pair of back to back 3.6V Zener diodes will force the signal to stay roughly within the -3.6V to 3.6V range. What is interesting is that this \"limiting\" effect is relatively gentle - no hard clipping occurs. This soft-limiting circuit is used in each filter, to prevent it from screaming when resonance is high - instead we get a gentle sinusoidal self oscillation! An interesting mod would be to use a switch to enable/disable them.","title":"Step 7: Zener diodes"},{"location":"shruthi/svf2/#step-8-ceramic-capacitors","text":"Add 3x 100pF ceramic capacitors (marked 101 = \"10 with 1 extra zero = 100pF\") in positions C10, C13 and C14. These parts are not polarized, and tame high frequencies in the mixer, output amplifier, and VCA control circuits. Add 8x 560pF ceramic capacitors (marked 561 = \"56 with 1 extra zero = 560pF\") in positions C24, C25, C29, C30, C41, C42, C44 and C45. These parts are not polarized, and prevent high frequency signals from reaching the sensitive inputs of the V2164 ICs.","title":"Step 8: Ceramic capacitors"},{"location":"shruthi/svf2/#step-9-ceramic-capacitors","text":"Add 21x 100nF ceramic capacitors (marked 104 = \"10 with 4 extra zero = 100,000pF = 100nF\"). These parts are not polarized, and serve as decoupling capacitors - local reservoirs of energy immediately available to each IC. Note: the marking on these capacitors is very small and difficult to read. To help you recognize them: 1/ These are the only capacitors not attached to a cardboard strip. 2/ The print is much smaller than on the other values such as 10pF, 560pF, or 100pF.","title":"Step 9: Ceramic capacitors"},{"location":"shruthi/svf2/#step-10-ic-sockets","text":"Make sure that the notch of IC sockets is oriented on the same side as the notch on the PCB symbol. This does not change anything electrically, but having the notch in the right position is a helpful hint for correctly inserting the IC in the next steps! Add 5x DIP8 sockets in positions IC2, IC3, IC4, IC6 and IC10. Add 1x DIP14 socket in position IC8. Add 5x DIP16 sockets in positions IC7, IC9, IC11, IC12 and IC13.","title":"Step 10: IC sockets"},{"location":"shruthi/svf2/#step-11-film-capacitors","text":"Add 1x 6.8nF capacitor in position C9. The value \"6.8n\" or \"6800\" is printed on it. This cap smooths the VCA CV signal. Add 2x 33nF capacitors in positions C11 and C12. The value \"33n\" or \"0.033\" is printed on it. They smooth the two VCF frequency CV signals. Add 2x 68nF capacitors in positions C8 and C22. The value \"68n\" or \"0.068\" is printed on it. They smooth the two VCF resonance CV signals.","title":"Step 11: Film capacitors"},{"location":"shruthi/svf2/#step-12-connectors-and-trimmers","text":"Add the 1x8 and 1x6 connectors. Add the 4x 5k trimmers. Make sure that the screw is oriented towards the exterior of the board.","title":"Step 12: Connectors and trimmers"},{"location":"shruthi/svf2/#step-13-non-polarized-capacitors","text":"Add the 2x 1.0\u00b5F NP capacitors in positions C20 and C21 and the 2x 4.7\u00b5F NP capacitors in positions C1 and C34. They are not polarized. They are used to block the DC component of the signal between various stages of the circuitry (and as such, prevent VCA CV feedthrough, which manifests itself as \"pops\").","title":"Step 13: Non-polarized capacitors"},{"location":"shruthi/svf2/#step-14-styroflex-capacitors","text":"Solder the 4x 220pF styroflex capacitors in positions C33, C35, C39 and C46. Bend the lead carefully! These parts are not polarized. They are the main filter capacitors - 2 of them per filter (this is a two-pole filter). Styroflex capacitors are available in small tolerances and have good temperature stability - they are thus good choices for filters.","title":"Step 14: Styroflex capacitors"},{"location":"shruthi/svf2/#step-15-connectors-and-ics","text":"Insert the ICs. They all have their notch oriented towards the left - at the exception of the LT1054! Solder the two audio connectors. Done!","title":"Step 15: Connectors and ICs"},{"location":"shruthi/svf2/#using-this-filter-board","text":"","title":"Using this filter board"},{"location":"shruthi/svf2/#control-board-configuration-and-connections","text":"To activate your SVF board, select svf for the fil setting in the system settings page. If you don't do so, it is likely that the filter will emit glitchy filtered sounds every time you navigate through the pages. After having made the change, press S6 (load/save), turn the encoder to select \"ok\" and click. This will save the filter board setting for future use. Make sure that both the analog (CV1 to +5V) and digital (RX to +5V) ports of the filter and control boards are connected.","title":"Control board configuration and connections"},{"location":"shruthi/svf2/#controlling-filter-2","text":"When pressing the S2 switch (Filter page) a second time, a new page is displayed allowing you to configure the filter routing and the cutoff/resonance of the secondary filter. Cut res md1 md2 110 0 lpf +hp The parameters are the following: cut (cutoff) : Cutoff frequency of the secondary filter. res (resonance) : Resonance of the secondary filter. md1 (mode 1) : Mode of the main filter. The modes are lpf (low-pass), bpf (band-pass), and hpf (high-pass). md2 (mode 2) : Mode of the secondary filter. The modes are lp (low-pass), bp (band-pass), and hp (high-pass). The first character indicates the filter topology. + is for the parallel mode ; > is for the serial mode.","title":"Controlling filter 2"},{"location":"shruthi/svf2/#relative-control-of-filter-2","text":"Three special modes are available for filter 1: lp> , bp> , hp> . In these modes, the cutoff frequency of filter 2 becomes relative to the cutoff frequency of filter 1 ; and the cutoff 2 setting controls the spacing between the two (with a value above 64 representing a positive shift and a value below 64 a negative shift). For example: Cut res md1 md2 64 0 bp> +bp The frequency of filter 2 is the same as the frequency of filter 1. Cut res md1 md2 76 0 bp> +bp Filter 2's cutoff is one octave (64 + 12 semitones = 76) above filter 1's cutoff. Cut res md1 md2 52 0 bp> +bp Filter 2's cutoff is one octave (64 - 12 semitones = 52) below filter 1's cutoff. This coupling mode is recommended for getting filter 2 to track the played note (since filter 1 does).","title":"Relative control of filter 2"},{"location":"shruthi/svf2/#modulating-filter-2","text":"The CV1 and CV2 buses are used to transmit the cutoff and resonance settings of the secondary filter. Thus, you can use these as modulation destinations in the modulation matrix to route envelopes, LFOs, etc to the cutoff and resonance of the secondary filter. For example, if you want the second filter to be modulated by a LFO, this can be done with the following modulation patch: Mod src dst amt 1 lf1 cv1 63","title":"Modulating filter 2"},{"location":"shruthi/svf2/#calibration","text":"Note that when the two boards are stacked (but not screwed), it is still possible to lift the control board while keeping it connected to access the 4 trimmers.","title":"Calibration"},{"location":"shruthi/svf2/#filter-1-tuning","text":"The tuning procedure consists in making sure that the cutoff frequency of the filter follows a musical scale: increasing the cutoff setting on the Shruthi by 12 (or playing a note 1 octave = 12 semitones higher) should double the cutoff frequency. Power the Shruthi on and dial the following settings from the init patch: Oscillator 1 shape: none Oscillator 2 shape: none Filter cutoff: 64 Filter resonance: 63 (maximum value) Filter envelope and LFO modulations: 0 Cut res env lfo 64 63 0 0 Play on the keyboard. You should hear a pure tone (sine wave), which does not come from the Shruthi oscillators but from the filter self-oscillating. Adjust the first V/Oct trimmer (R5) so that the intervals are respected - that is to say, when you play C2 then C4, you should hear two notes, maybe not C2s and C4s, but they must be two octaves apart. If you do not have a good sense of pitch, you can try a software tuner like Tuna Pitch on OS X. If the filter is correctly tuned, you should be able to play the filter \"self oscillation tone\" across roughly 4 octaves with correct tuning. Now, play and hold a note in the higher octaves. Sweep the cutoff control up. You will notice glitches/changes in pitch when cutoff reaches very high values above 110 - this is due to interactions between the filter self-oscillation and the digital carrier used to control the filter. If you want to get rid of them (they manifest themselves only when resonance is very high), turn the first Range trimmer (R4) so that this zone is out of reach - the downside will be that the filter will have a \"darker\" tone and that it won't be possible to fully open it.","title":"Filter 1 tuning"},{"location":"shruthi/svf2/#filter-2-tuning","text":"We assume that you have already dialled all settings for filter 1 tuning. Set the second filter settings to: Cut res md1 md2 64 63 lp> +lp The second filter is now active, in parallel with the first, with the same settings and key-tracking. You will now hear two tones whenever a note is played. Adjust filter 2's Range and V/Oct trimmer so that the two tones are fused into one - it will be very hard to get them to be exactly aligned, but getting a mild beating/chorusing between the two notes is enough!","title":"Filter 2 tuning"},{"location":"shruthi/svf2/#tweaks-and-mods","text":"","title":"Tweaks and mods"},{"location":"shruthi/svf2/#vca-bleed-compensation","text":"Solder the remaining 2M resistor (red black black yellow) between the two pads marked \"opt\" to totally close the VCA when no note is played. This has the slightly negative effect of reducing the smoothness of the VCA envelope. You can also try a higher value below 10M.","title":"VCA bleed compensation"},{"location":"shruthi/svf2/#for-advanced-builders-only-ghost-eyes","text":"The two minuscule LEDs are for the ghost eyes. Since getting their orientation right is tricky, here is how we recommend doing it: Connect the control board to the filter board, set the resonance to 63 (this is one of the ways of getting the ghost eyes to light up) Disconnect the control board and keep the filter board powered. Check that you have +5V on the lower pad of each eye. Put one LED in place with tweezers. Change its position/orientation until it lights up. Solder it. Good luck! Repeat the same procedure for the other LED.","title":"For advanced builders only: ghost eyes"},{"location":"shruthi/svf2/#license","text":"This circuit and PCB layout is made available under a cc-by-sa-3.0 license.","title":"License"},{"location":"shruthi/svf2/#kudos","text":"David Dixon and Tom Wiltshire for precious discussions on SSM2164 SVF design.","title":"Kudos"},{"location":"shruthi/xt_enclosure/","text":"Assembly instructions Peel the protective foil from the plexiglas panels. Remove, if necessary, the remaining little pieces of plexiglas left in the holes. The filter board will lie on 4x M3 12mm screws, fastened to the bottom panel with 4x M3 nuts. The nuts keep the filter board elevated 2mm above the bottom panel. The control board will lie on 8x M3 F/F 25mm spacers, fastened to the bottom panel with 8x M3 6mm screws. Observe that the bottom panel is not symmetrical. Make sure that you get it right just like on this photo: Put the filter board in place and fasten it with 4x M3 nuts. If you want the power switch at the back of the case to be more than just decorative, cut the SW jumper near the power inlet. Solder two long pieces of wires on each pad. Put the control board in place, with the female \"arduino-style\" connector sandwiched between the filter and control board. You will need to cut its legs (and the legs of the connector on the control board) to reach the right height. At this stage, it's a good thing to check that there is no bad connection between the two boards - power the Shruthi on and give it a quick test run. Fasten the control board to the 4x 25mm spacers in the center using 4x 6mm M3 screws. Fasten the control board to the remaining 4x 25mm spacers using 4x M3 9mm M/F spacers. You can now put the side panels in place. The back panel is held in place with the 2 plastic nuts on the audio jack. If you plan to use the main power switch, grab the two pieces of wires soldered at the previous step through the power switch hole in the back. Solder them to the switch. Push the power switch in the hole. The springs on the side of the switch will keep it in place. Attach the side panels using 4x 12mm M3 screws and 4x M3 nuts. Put the top panel and the 3mm thick window for the display. The case is provided with 1mm, 2mm and 3mm thick windows in case you use a different type of display. Put the aluminium panel on top of the plexiglas top panel. Fasten it using 4x 8mm M3 hex screws. Not too tight! Flip the case and stick the 4 rubber feet on the bottom panel. Drop the switch caps in the holes. If a switch cap does not fit, remove the aluminum panel and file the edges of the plexiglas panel - you might also need to check that the two top panels are correctly aligned. If the switch caps are too loose and do not stay in place when the case is flipped, you can either: use a drop of glue; or use long-nose pliers to tighten the plastic bit inside the cap that snaps onto the tactile switch. The final step is to push the knobs. Think twice before, because they are damn hard to remove! Spend some time with the synth. Is everything alright? Ready to go? It's knob time! Note that you can use silicone grease if you want to make removing them later easier. Yeah! Now eat your candy! Documents Aluminium panel design ( illustrator and Draftsight ). The files are released under a cc-by-sa license.","title":"XT enclosure"},{"location":"shruthi/xt_enclosure/#assembly-instructions","text":"Peel the protective foil from the plexiglas panels. Remove, if necessary, the remaining little pieces of plexiglas left in the holes. The filter board will lie on 4x M3 12mm screws, fastened to the bottom panel with 4x M3 nuts. The nuts keep the filter board elevated 2mm above the bottom panel. The control board will lie on 8x M3 F/F 25mm spacers, fastened to the bottom panel with 8x M3 6mm screws. Observe that the bottom panel is not symmetrical. Make sure that you get it right just like on this photo: Put the filter board in place and fasten it with 4x M3 nuts. If you want the power switch at the back of the case to be more than just decorative, cut the SW jumper near the power inlet. Solder two long pieces of wires on each pad. Put the control board in place, with the female \"arduino-style\" connector sandwiched between the filter and control board. You will need to cut its legs (and the legs of the connector on the control board) to reach the right height. At this stage, it's a good thing to check that there is no bad connection between the two boards - power the Shruthi on and give it a quick test run. Fasten the control board to the 4x 25mm spacers in the center using 4x 6mm M3 screws. Fasten the control board to the remaining 4x 25mm spacers using 4x M3 9mm M/F spacers. You can now put the side panels in place. The back panel is held in place with the 2 plastic nuts on the audio jack. If you plan to use the main power switch, grab the two pieces of wires soldered at the previous step through the power switch hole in the back. Solder them to the switch. Push the power switch in the hole. The springs on the side of the switch will keep it in place. Attach the side panels using 4x 12mm M3 screws and 4x M3 nuts. Put the top panel and the 3mm thick window for the display. The case is provided with 1mm, 2mm and 3mm thick windows in case you use a different type of display. Put the aluminium panel on top of the plexiglas top panel. Fasten it using 4x 8mm M3 hex screws. Not too tight! Flip the case and stick the 4 rubber feet on the bottom panel. Drop the switch caps in the holes. If a switch cap does not fit, remove the aluminum panel and file the edges of the plexiglas panel - you might also need to check that the two top panels are correctly aligned. If the switch caps are too loose and do not stay in place when the case is flipped, you can either: use a drop of glue; or use long-nose pliers to tighten the plastic bit inside the cap that snaps onto the tactile switch. The final step is to push the knobs. Think twice before, because they are damn hard to remove! Spend some time with the synth. Is everything alright? Ready to go? It's knob time! Note that you can use silicone grease if you want to make removing them later easier. Yeah! Now eat your candy!","title":"Assembly instructions"},{"location":"shruthi/xt_enclosure/#documents","text":"Aluminium panel design ( illustrator and Draftsight ). The files are released under a cc-by-sa license.","title":"Documents"},{"location":"shruthi/ym_build/","text":"Contents of the kit The kit contains: Yellow control board and filter board PCBs Yellow semi-opaque case Yellow/Orange LCD module 8 yellow flat top LEDs Case hardware Board stacking hardware Switches, potentiometers, encoders with knobs/caps ; trimmers and resistor networks Quartz, audio capacitors Connectors (Audio, MIDI, DC power, board-to-board) Integrated circuits, including flashed MCU and 464 memories eeprom. Extra candy! The kit does not contain: Capacitors Resistors Semi-conductors (diodes, transistors) IC sockets The following document shows the BOM of the control board and the filter board. Parts to be purchased are in blue, parts included are listed in pale green. The parts not included in the kits can be purchased at: Reichelt Elektronik for European customers, for 9.53\u20ac . Note that Reichelt's minimum order amount is 10\u20ac, so spoil yourself with 0.47\u20ac worth of electro-goodies! Mouser (EZ access code: ea0e2f28c0) for US customers, for \\$20.97 USD . Mouser does not have a minimum order quantity but the shipping fees to Europe might be high. Farnell, Digikey, using the listed references. Assembly \\ Filter board assembly instructions Control board assembly instructions . Note that a 6.8 ohm resistor should be used instead of 68 (R20 in the schematics) to increase the brightness of the display. And don't forget to solder the 1x6 \"expansion connector\" on the bottom left of the control board! Kudos Case design by Frank Daniels . Illustrations by Hannes Pasqualini .","title":"Yellow magic kit"},{"location":"shruthi/ym_build/#contents-of-the-kit","text":"The kit contains: Yellow control board and filter board PCBs Yellow semi-opaque case Yellow/Orange LCD module 8 yellow flat top LEDs Case hardware Board stacking hardware Switches, potentiometers, encoders with knobs/caps ; trimmers and resistor networks Quartz, audio capacitors Connectors (Audio, MIDI, DC power, board-to-board) Integrated circuits, including flashed MCU and 464 memories eeprom. Extra candy! The kit does not contain: Capacitors Resistors Semi-conductors (diodes, transistors) IC sockets The following document shows the BOM of the control board and the filter board. Parts to be purchased are in blue, parts included are listed in pale green. The parts not included in the kits can be purchased at: Reichelt Elektronik for European customers, for 9.53\u20ac . Note that Reichelt's minimum order amount is 10\u20ac, so spoil yourself with 0.47\u20ac worth of electro-goodies! Mouser (EZ access code: ea0e2f28c0) for US customers, for \\$20.97 USD . Mouser does not have a minimum order quantity but the shipping fees to Europe might be high. Farnell, Digikey, using the listed references.","title":"Contents of the kit"},{"location":"shruthi/ym_build/#assembly","text":"\\ Filter board assembly instructions Control board assembly instructions . Note that a 6.8 ohm resistor should be used instead of 68 (R20 in the schematics) to increase the brightness of the display. And don't forget to solder the 1x6 \"expansion connector\" on the bottom left of the control board!","title":"Assembly"},{"location":"shruthi/ym_build/#kudos","text":"Case design by Frank Daniels . Illustrations by Hannes Pasqualini .","title":"Kudos"}]}